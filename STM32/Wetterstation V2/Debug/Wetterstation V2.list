
Wetterstation V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094d4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  08009668  08009668  0000a668  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009cb8  08009cb8  0000b1d8  2**0
                  CONTENTS
  4 .ARM          00000008  08009cb8  08009cb8  0000acb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009cc0  08009cc0  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cc0  08009cc0  0000acc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009cc4  08009cc4  0000acc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08009cc8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009a4  200001d8  08009ea0  0000b1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b7c  08009ea0  0000bb7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014628  00000000  00000000  0000b208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003955  00000000  00000000  0001f830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  00023188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d20  00000000  00000000  000242a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ca2d  00000000  00000000  00024fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001794b  00000000  00000000  000419ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4e8b  00000000  00000000  00059338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fe1c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054f0  00000000  00000000  000fe208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001036f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800964c 	.word	0x0800964c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800964c 	.word	0x0800964c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <CommHandler_Init>:

#include "CommHandler.h"
#include "LoRa_E5.h"
#include <stdio.h>

void CommHandler_Init(void) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
    // Initialisiere das LoRa-Modul
    LoRa_E5_Init();
 8000f3c:	f000 fb24 	bl	8001588 <LoRa_E5_Init>
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <HP20x_IIC_WriteCmd>:

KalmanFilter t_filter;  // Temperaturfilter
KalmanFilter p_filter;  // Druckfilter
KalmanFilter a_filter;  // Höhenfilter

void HP20x_IIC_WriteCmd(uint8_t cmd) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af02      	add	r7, sp, #8
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(&hi2c1, HP20X_I2C_DEV_ID, &cmd, 1, HAL_MAX_DELAY);
 8000f4e:	1dfa      	adds	r2, r7, #7
 8000f50:	f04f 33ff 	mov.w	r3, #4294967295
 8000f54:	9300      	str	r3, [sp, #0]
 8000f56:	2301      	movs	r3, #1
 8000f58:	21ec      	movs	r1, #236	@ 0xec
 8000f5a:	4803      	ldr	r0, [pc, #12]	@ (8000f68 <HP20x_IIC_WriteCmd+0x24>)
 8000f5c:	f002 fbf4 	bl	8003748 <HAL_I2C_Master_Transmit>
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000430 	.word	0x20000430

08000f6c <HP20x_IIC_ReadData>:

uint32_t HP20x_IIC_ReadData(uint8_t cmd) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af02      	add	r7, sp, #8
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
    uint8_t buffer[3];
    HAL_I2C_Master_Transmit(&hi2c1, HP20X_I2C_DEV_ID, &cmd, 1, HAL_MAX_DELAY);
 8000f76:	1dfa      	adds	r2, r7, #7
 8000f78:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	2301      	movs	r3, #1
 8000f80:	21ec      	movs	r1, #236	@ 0xec
 8000f82:	480d      	ldr	r0, [pc, #52]	@ (8000fb8 <HP20x_IIC_ReadData+0x4c>)
 8000f84:	f002 fbe0 	bl	8003748 <HAL_I2C_Master_Transmit>
    HAL_Delay(45); // Wait for the measurement to complete
 8000f88:	202d      	movs	r0, #45	@ 0x2d
 8000f8a:	f001 fe0b 	bl	8002ba4 <HAL_Delay>
    HAL_I2C_Master_Receive(&hi2c1, HP20X_I2C_DEV_ID, buffer, 3, HAL_MAX_DELAY);
 8000f8e:	f107 020c 	add.w	r2, r7, #12
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	2303      	movs	r3, #3
 8000f9a:	21ec      	movs	r1, #236	@ 0xec
 8000f9c:	4806      	ldr	r0, [pc, #24]	@ (8000fb8 <HP20x_IIC_ReadData+0x4c>)
 8000f9e:	f002 fceb 	bl	8003978 <HAL_I2C_Master_Receive>
    return ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | buffer[2];
 8000fa2:	7b3b      	ldrb	r3, [r7, #12]
 8000fa4:	041a      	lsls	r2, r3, #16
 8000fa6:	7b7b      	ldrb	r3, [r7, #13]
 8000fa8:	021b      	lsls	r3, r3, #8
 8000faa:	4313      	orrs	r3, r2
 8000fac:	7bba      	ldrb	r2, [r7, #14]
 8000fae:	4313      	orrs	r3, r2
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000430 	.word	0x20000430

08000fbc <HP20x_Init>:

void HP20x_Init(void) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
    HP20x_IIC_WriteCmd(HP20X_CMD_SOFT_RST);
 8000fc2:	2006      	movs	r0, #6
 8000fc4:	f7ff ffbe 	bl	8000f44 <HP20x_IIC_WriteCmd>
    HAL_Delay(100); // Wait for the sensor to reset
 8000fc8:	2064      	movs	r0, #100	@ 0x64
 8000fca:	f001 fdeb 	bl	8002ba4 <HAL_Delay>

    // Send OSR and channel setting command
    uint8_t cmd = HP20X_CMD_WR_CONVERT | HP20X_CONVERT_OSR4096;
 8000fce:	2340      	movs	r3, #64	@ 0x40
 8000fd0:	71fb      	strb	r3, [r7, #7]
    HP20x_IIC_WriteCmd(cmd);
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ffb5 	bl	8000f44 <HP20x_IIC_WriteCmd>
    HAL_Delay(1000); // Wait for the sensor to settle
 8000fda:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fde:	f001 fde1 	bl	8002ba4 <HAL_Delay>

    // Initialize Kalman filters
    KalmanFilter_Init(&t_filter, 0.022, 0.617, 1, 0);
 8000fe2:	eddf 1a18 	vldr	s3, [pc, #96]	@ 8001044 <HP20x_Init+0x88>
 8000fe6:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8000fea:	eddf 0a17 	vldr	s1, [pc, #92]	@ 8001048 <HP20x_Init+0x8c>
 8000fee:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 800104c <HP20x_Init+0x90>
 8000ff2:	4817      	ldr	r0, [pc, #92]	@ (8001050 <HP20x_Init+0x94>)
 8000ff4:	f000 feb8 	bl	8001d68 <KalmanFilter_Init>
    KalmanFilter_Init(&p_filter, 0.022, 0.617, 1, 0);
 8000ff8:	eddf 1a12 	vldr	s3, [pc, #72]	@ 8001044 <HP20x_Init+0x88>
 8000ffc:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8001000:	eddf 0a11 	vldr	s1, [pc, #68]	@ 8001048 <HP20x_Init+0x8c>
 8001004:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 800104c <HP20x_Init+0x90>
 8001008:	4812      	ldr	r0, [pc, #72]	@ (8001054 <HP20x_Init+0x98>)
 800100a:	f000 fead 	bl	8001d68 <KalmanFilter_Init>
    KalmanFilter_Init(&a_filter, 0.022, 0.617, 1, 0);
 800100e:	eddf 1a0d 	vldr	s3, [pc, #52]	@ 8001044 <HP20x_Init+0x88>
 8001012:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8001016:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 8001048 <HP20x_Init+0x8c>
 800101a:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800104c <HP20x_Init+0x90>
 800101e:	480e      	ldr	r0, [pc, #56]	@ (8001058 <HP20x_Init+0x9c>)
 8001020:	f000 fea2 	bl	8001d68 <KalmanFilter_Init>

    KalmanFilter_PreInitialize(&t_filter, HP20x_ReadTemperature);
 8001024:	490d      	ldr	r1, [pc, #52]	@ (800105c <HP20x_Init+0xa0>)
 8001026:	480a      	ldr	r0, [pc, #40]	@ (8001050 <HP20x_Init+0x94>)
 8001028:	f000 ff0b 	bl	8001e42 <KalmanFilter_PreInitialize>
    KalmanFilter_PreInitialize(&p_filter, HP20x_ReadPressure);
 800102c:	490c      	ldr	r1, [pc, #48]	@ (8001060 <HP20x_Init+0xa4>)
 800102e:	4809      	ldr	r0, [pc, #36]	@ (8001054 <HP20x_Init+0x98>)
 8001030:	f000 ff07 	bl	8001e42 <KalmanFilter_PreInitialize>
    KalmanFilter_PreInitialize(&a_filter, HP20x_ReadAltitude);
 8001034:	490b      	ldr	r1, [pc, #44]	@ (8001064 <HP20x_Init+0xa8>)
 8001036:	4808      	ldr	r0, [pc, #32]	@ (8001058 <HP20x_Init+0x9c>)
 8001038:	f000 ff03 	bl	8001e42 <KalmanFilter_PreInitialize>
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	00000000 	.word	0x00000000
 8001048:	3f1df3b6 	.word	0x3f1df3b6
 800104c:	3cb43958 	.word	0x3cb43958
 8001050:	200001f4 	.word	0x200001f4
 8001054:	20000208 	.word	0x20000208
 8001058:	2000021c 	.word	0x2000021c
 800105c:	08001121 	.word	0x08001121
 8001060:	08001069 	.word	0x08001069
 8001064:	080010c5 	.word	0x080010c5

08001068 <HP20x_ReadPressure>:
void HP20x_SoftReset(void) {
    HP20x_IIC_WriteCmd(HP20X_CMD_SOFT_RST);
    HAL_Delay(1000); // Wait for the sensor to reset
}

float HP20x_ReadPressure(void) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
    // Send OSR and channel setting command
    uint8_t cmd = HP20X_CMD_WR_CONVERT | HP20X_CONVERT_OSR4096;
 800106e:	2340      	movs	r3, #64	@ 0x40
 8001070:	71fb      	strb	r3, [r7, #7]
    HP20x_IIC_WriteCmd(cmd);
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ff65 	bl	8000f44 <HP20x_IIC_WriteCmd>
    HAL_Delay(1000); // Wait for the sensor to settle
 800107a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800107e:	f001 fd91 	bl	8002ba4 <HAL_Delay>
    return (float)HP20x_IIC_ReadData(HP20X_CMD_READ_PRESSURE) / 100.0;
 8001082:	2030      	movs	r0, #48	@ 0x30
 8001084:	f7ff ff72 	bl	8000f6c <HP20x_IIC_ReadData>
 8001088:	ee07 0a90 	vmov	s15, r0
 800108c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001090:	ee17 0a90 	vmov	r0, s15
 8001094:	f7ff fa58 	bl	8000548 <__aeabi_f2d>
 8001098:	f04f 0200 	mov.w	r2, #0
 800109c:	4b08      	ldr	r3, [pc, #32]	@ (80010c0 <HP20x_ReadPressure+0x58>)
 800109e:	f7ff fbd5 	bl	800084c <__aeabi_ddiv>
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	4610      	mov	r0, r2
 80010a8:	4619      	mov	r1, r3
 80010aa:	f7ff fd7d 	bl	8000ba8 <__aeabi_d2f>
 80010ae:	4603      	mov	r3, r0
 80010b0:	ee07 3a90 	vmov	s15, r3
}
 80010b4:	eeb0 0a67 	vmov.f32	s0, s15
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40590000 	.word	0x40590000

080010c4 <HP20x_ReadAltitude>:

float HP20x_ReadAltitude(void) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
    // Send OSR and channel setting command
    uint8_t cmd = HP20X_CMD_WR_CONVERT | HP20X_CONVERT_OSR4096;
 80010ca:	2340      	movs	r3, #64	@ 0x40
 80010cc:	71fb      	strb	r3, [r7, #7]
    HP20x_IIC_WriteCmd(cmd);
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff37 	bl	8000f44 <HP20x_IIC_WriteCmd>
    HAL_Delay(1000); // Wait for the sensor to settle
 80010d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010da:	f001 fd63 	bl	8002ba4 <HAL_Delay>
    return (float)HP20x_IIC_ReadData(HP20X_CMD_READ_ALTITUDE) / 100.0;
 80010de:	2031      	movs	r0, #49	@ 0x31
 80010e0:	f7ff ff44 	bl	8000f6c <HP20x_IIC_ReadData>
 80010e4:	ee07 0a90 	vmov	s15, r0
 80010e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010ec:	ee17 0a90 	vmov	r0, s15
 80010f0:	f7ff fa2a 	bl	8000548 <__aeabi_f2d>
 80010f4:	f04f 0200 	mov.w	r2, #0
 80010f8:	4b08      	ldr	r3, [pc, #32]	@ (800111c <HP20x_ReadAltitude+0x58>)
 80010fa:	f7ff fba7 	bl	800084c <__aeabi_ddiv>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	4610      	mov	r0, r2
 8001104:	4619      	mov	r1, r3
 8001106:	f7ff fd4f 	bl	8000ba8 <__aeabi_d2f>
 800110a:	4603      	mov	r3, r0
 800110c:	ee07 3a90 	vmov	s15, r3
}
 8001110:	eeb0 0a67 	vmov.f32	s0, s15
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40590000 	.word	0x40590000

08001120 <HP20x_ReadTemperature>:

float HP20x_ReadTemperature(void) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
    // Send OSR and channel setting command
    uint8_t cmd = HP20X_CMD_WR_CONVERT | HP20X_CONVERT_OSR4096;
 8001126:	2340      	movs	r3, #64	@ 0x40
 8001128:	71fb      	strb	r3, [r7, #7]
    HP20x_IIC_WriteCmd(cmd);
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff09 	bl	8000f44 <HP20x_IIC_WriteCmd>
    HAL_Delay(1000); // Wait for the sensor to settle
 8001132:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001136:	f001 fd35 	bl	8002ba4 <HAL_Delay>
    return (float)HP20x_IIC_ReadData(HP20X_CMD_READ_TEMPERATURE) / 100.0;
 800113a:	2032      	movs	r0, #50	@ 0x32
 800113c:	f7ff ff16 	bl	8000f6c <HP20x_IIC_ReadData>
 8001140:	ee07 0a90 	vmov	s15, r0
 8001144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001148:	ee17 0a90 	vmov	r0, s15
 800114c:	f7ff f9fc 	bl	8000548 <__aeabi_f2d>
 8001150:	f04f 0200 	mov.w	r2, #0
 8001154:	4b08      	ldr	r3, [pc, #32]	@ (8001178 <HP20x_ReadTemperature+0x58>)
 8001156:	f7ff fb79 	bl	800084c <__aeabi_ddiv>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	4610      	mov	r0, r2
 8001160:	4619      	mov	r1, r3
 8001162:	f7ff fd21 	bl	8000ba8 <__aeabi_d2f>
 8001166:	4603      	mov	r3, r0
 8001168:	ee07 3a90 	vmov	s15, r3
}
 800116c:	eeb0 0a67 	vmov.f32	s0, s15
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40590000 	.word	0x40590000

0800117c <HP20x_ReadAllMeasuredValues>:

void HP20x_ReadAllMeasuredValues(float* temperature, float* pressure, float* altitude) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
    // Sende OSR und Kanal-Einstellungsbefehl
    uint8_t cmd = HP20X_CMD_WR_CONVERT | HP20X_CONVERT_OSR4096;
 8001188:	2340      	movs	r3, #64	@ 0x40
 800118a:	77fb      	strb	r3, [r7, #31]
    HP20x_IIC_WriteCmd(cmd);
 800118c:	7ffb      	ldrb	r3, [r7, #31]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff fed8 	bl	8000f44 <HP20x_IIC_WriteCmd>
    HAL_Delay(1000); // Warten, bis sich der Sensor stabilisiert hat
 8001194:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001198:	f001 fd04 	bl	8002ba4 <HAL_Delay>

    // Lese die Daten vom Sensor
    float rawPressure = (float)HP20x_IIC_ReadData(HP20X_CMD_READ_PRESSURE) / 100.0;
 800119c:	2030      	movs	r0, #48	@ 0x30
 800119e:	f7ff fee5 	bl	8000f6c <HP20x_IIC_ReadData>
 80011a2:	ee07 0a90 	vmov	s15, r0
 80011a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011aa:	ee17 0a90 	vmov	r0, s15
 80011ae:	f7ff f9cb 	bl	8000548 <__aeabi_f2d>
 80011b2:	f04f 0200 	mov.w	r2, #0
 80011b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001270 <HP20x_ReadAllMeasuredValues+0xf4>)
 80011b8:	f7ff fb48 	bl	800084c <__aeabi_ddiv>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4610      	mov	r0, r2
 80011c2:	4619      	mov	r1, r3
 80011c4:	f7ff fcf0 	bl	8000ba8 <__aeabi_d2f>
 80011c8:	4603      	mov	r3, r0
 80011ca:	61bb      	str	r3, [r7, #24]
    float rawAltitude = (float)HP20x_IIC_ReadData(HP20X_CMD_READ_ALTITUDE) / 100.0;
 80011cc:	2031      	movs	r0, #49	@ 0x31
 80011ce:	f7ff fecd 	bl	8000f6c <HP20x_IIC_ReadData>
 80011d2:	ee07 0a90 	vmov	s15, r0
 80011d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011da:	ee17 0a90 	vmov	r0, s15
 80011de:	f7ff f9b3 	bl	8000548 <__aeabi_f2d>
 80011e2:	f04f 0200 	mov.w	r2, #0
 80011e6:	4b22      	ldr	r3, [pc, #136]	@ (8001270 <HP20x_ReadAllMeasuredValues+0xf4>)
 80011e8:	f7ff fb30 	bl	800084c <__aeabi_ddiv>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4610      	mov	r0, r2
 80011f2:	4619      	mov	r1, r3
 80011f4:	f7ff fcd8 	bl	8000ba8 <__aeabi_d2f>
 80011f8:	4603      	mov	r3, r0
 80011fa:	617b      	str	r3, [r7, #20]
    float rawTemperature = (float)HP20x_IIC_ReadData(HP20X_CMD_READ_TEMPERATURE) / 100.0;
 80011fc:	2032      	movs	r0, #50	@ 0x32
 80011fe:	f7ff feb5 	bl	8000f6c <HP20x_IIC_ReadData>
 8001202:	ee07 0a90 	vmov	s15, r0
 8001206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800120a:	ee17 0a90 	vmov	r0, s15
 800120e:	f7ff f99b 	bl	8000548 <__aeabi_f2d>
 8001212:	f04f 0200 	mov.w	r2, #0
 8001216:	4b16      	ldr	r3, [pc, #88]	@ (8001270 <HP20x_ReadAllMeasuredValues+0xf4>)
 8001218:	f7ff fb18 	bl	800084c <__aeabi_ddiv>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4610      	mov	r0, r2
 8001222:	4619      	mov	r1, r3
 8001224:	f7ff fcc0 	bl	8000ba8 <__aeabi_d2f>
 8001228:	4603      	mov	r3, r0
 800122a:	613b      	str	r3, [r7, #16]

    // Aktualisiere die Messwerte und wende den Kalman-Filter an (falls erforderlich)
    *temperature = KalmanFilter_Update(&t_filter, rawTemperature);
 800122c:	ed97 0a04 	vldr	s0, [r7, #16]
 8001230:	4810      	ldr	r0, [pc, #64]	@ (8001274 <HP20x_ReadAllMeasuredValues+0xf8>)
 8001232:	f000 fdb7 	bl	8001da4 <KalmanFilter_Update>
 8001236:	eef0 7a40 	vmov.f32	s15, s0
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	edc3 7a00 	vstr	s15, [r3]
    *pressure = KalmanFilter_Update(&p_filter, rawPressure);
 8001240:	ed97 0a06 	vldr	s0, [r7, #24]
 8001244:	480c      	ldr	r0, [pc, #48]	@ (8001278 <HP20x_ReadAllMeasuredValues+0xfc>)
 8001246:	f000 fdad 	bl	8001da4 <KalmanFilter_Update>
 800124a:	eef0 7a40 	vmov.f32	s15, s0
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	edc3 7a00 	vstr	s15, [r3]
    *altitude = KalmanFilter_Update(&a_filter, rawAltitude);
 8001254:	ed97 0a05 	vldr	s0, [r7, #20]
 8001258:	4808      	ldr	r0, [pc, #32]	@ (800127c <HP20x_ReadAllMeasuredValues+0x100>)
 800125a:	f000 fda3 	bl	8001da4 <KalmanFilter_Update>
 800125e:	eef0 7a40 	vmov.f32	s15, s0
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	edc3 7a00 	vstr	s15, [r3]
}
 8001268:	bf00      	nop
 800126a:	3720      	adds	r7, #32
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40590000 	.word	0x40590000
 8001274:	200001f4 	.word	0x200001f4
 8001278:	20000208 	.word	0x20000208
 800127c:	2000021c 	.word	0x2000021c

08001280 <INA3221_Init>:
 */

#include "INA3221.h"

// Initialize INA3221 with default configuration
HAL_StatusTypeDef INA3221_Init(I2C_HandleTypeDef *hi2c) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
    uint16_t config = 0x7127;  // Example configuration, adjust as needed
 8001288:	f247 1327 	movw	r3, #28967	@ 0x7127
 800128c:	81fb      	strh	r3, [r7, #14]
    return INA3221_WriteRegister(hi2c, INA3221_REG_CONFIG, config);
 800128e:	89fb      	ldrh	r3, [r7, #14]
 8001290:	461a      	mov	r2, r3
 8001292:	2100      	movs	r1, #0
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f000 f805 	bl	80012a4 <INA3221_WriteRegister>
 800129a:	4603      	mov	r3, r0
}
 800129c:	4618      	mov	r0, r3
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <INA3221_WriteRegister>:

// Function to write a 16-bit value to a specific register
HAL_StatusTypeDef INA3221_WriteRegister(I2C_HandleTypeDef *hi2c, uint8_t reg, uint16_t value) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af02      	add	r7, sp, #8
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	70fb      	strb	r3, [r7, #3]
 80012b0:	4613      	mov	r3, r2
 80012b2:	803b      	strh	r3, [r7, #0]
    uint8_t data[3] = {reg, (value >> 8) & 0xFF, value & 0xFF};
 80012b4:	78fb      	ldrb	r3, [r7, #3]
 80012b6:	733b      	strb	r3, [r7, #12]
 80012b8:	883b      	ldrh	r3, [r7, #0]
 80012ba:	0a1b      	lsrs	r3, r3, #8
 80012bc:	b29b      	uxth	r3, r3
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	737b      	strb	r3, [r7, #13]
 80012c2:	883b      	ldrh	r3, [r7, #0]
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	73bb      	strb	r3, [r7, #14]
    return HAL_I2C_Master_Transmit(hi2c, INA3221_ADDRESS, data, 3, HAL_MAX_DELAY);
 80012c8:	f107 020c 	add.w	r2, r7, #12
 80012cc:	f04f 33ff 	mov.w	r3, #4294967295
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	2303      	movs	r3, #3
 80012d4:	2180      	movs	r1, #128	@ 0x80
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f002 fa36 	bl	8003748 <HAL_I2C_Master_Transmit>
 80012dc:	4603      	mov	r3, r0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <INA3221_ReadRegister>:

// Function to read a 16-bit value from a specific register
int16_t INA3221_ReadRegister(I2C_HandleTypeDef *hi2c, uint8_t reg) {
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b086      	sub	sp, #24
 80012ea:	af02      	add	r7, sp, #8
 80012ec:	6078      	str	r0, [r7, #4]
 80012ee:	460b      	mov	r3, r1
 80012f0:	70fb      	strb	r3, [r7, #3]
    uint8_t data[2];
    if (HAL_I2C_Master_Transmit(hi2c, INA3221_ADDRESS, &reg, 1, HAL_MAX_DELAY) != HAL_OK)
 80012f2:	1cfa      	adds	r2, r7, #3
 80012f4:	f04f 33ff 	mov.w	r3, #4294967295
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	2301      	movs	r3, #1
 80012fc:	2180      	movs	r1, #128	@ 0x80
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f002 fa22 	bl	8003748 <HAL_I2C_Master_Transmit>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d002      	beq.n	8001310 <INA3221_ReadRegister+0x2a>
        return -1;
 800130a:	f04f 33ff 	mov.w	r3, #4294967295
 800130e:	e016      	b.n	800133e <INA3221_ReadRegister+0x58>

    if (HAL_I2C_Master_Receive(hi2c, INA3221_ADDRESS, data, 2, HAL_MAX_DELAY) != HAL_OK)
 8001310:	f107 020c 	add.w	r2, r7, #12
 8001314:	f04f 33ff 	mov.w	r3, #4294967295
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2302      	movs	r3, #2
 800131c:	2180      	movs	r1, #128	@ 0x80
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f002 fb2a 	bl	8003978 <HAL_I2C_Master_Receive>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d002      	beq.n	8001330 <INA3221_ReadRegister+0x4a>
        return -1;
 800132a:	f04f 33ff 	mov.w	r3, #4294967295
 800132e:	e006      	b.n	800133e <INA3221_ReadRegister+0x58>

    return (data[0] << 8) | data[1];
 8001330:	7b3b      	ldrb	r3, [r7, #12]
 8001332:	021b      	lsls	r3, r3, #8
 8001334:	b21a      	sxth	r2, r3
 8001336:	7b7b      	ldrb	r3, [r7, #13]
 8001338:	b21b      	sxth	r3, r3
 800133a:	4313      	orrs	r3, r2
 800133c:	b21b      	sxth	r3, r3
}
 800133e:	4618      	mov	r0, r3
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <INA3221_ReadShuntVoltage>:

// Read shunt voltage form 1, 2, or 3
int16_t INA3221_ReadShuntVoltage(I2C_HandleTypeDef *hi2c, uint8_t channel) {
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	460b      	mov	r3, r1
 8001350:	70fb      	strb	r3, [r7, #3]
    return INA3221_ReadRegister(hi2c, INA3221_REG_SHUNT_VOLTAGE_1 + (channel - 1) * 2);
 8001352:	78fb      	ldrb	r3, [r7, #3]
 8001354:	3b01      	subs	r3, #1
 8001356:	b2db      	uxtb	r3, r3
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	b2db      	uxtb	r3, r3
 800135c:	3301      	adds	r3, #1
 800135e:	b2db      	uxtb	r3, r3
 8001360:	4619      	mov	r1, r3
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff ffbf 	bl	80012e6 <INA3221_ReadRegister>
 8001368:	4603      	mov	r3, r0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <INA3221_ReadBusVoltage>:

// Read bus voltage form 1, 2, or 3
int16_t INA3221_ReadBusVoltage(I2C_HandleTypeDef *hi2c, uint8_t channel) {
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
 800137a:	460b      	mov	r3, r1
 800137c:	70fb      	strb	r3, [r7, #3]
    return INA3221_ReadRegister(hi2c, INA3221_REG_BUS_VOLTAGE_1 + (channel - 1) * 2);
 800137e:	78fb      	ldrb	r3, [r7, #3]
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	b2db      	uxtb	r3, r3
 8001384:	4619      	mov	r1, r3
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff ffad 	bl	80012e6 <INA3221_ReadRegister>
 800138c:	4603      	mov	r3, r0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <INA3221_ReadAll>:
    float shuntVoltage_V = shuntVoltage * 0.00004;  // 40 uV per LSB
    return shuntVoltage_V / shunt_resistance;
}

// Read all voltages and currents for all channels
HAL_StatusTypeDef INA3221_ReadAll(I2C_HandleTypeDef *hi2c, float shunt_resistance, float *bus_voltages, float *currents) {
 8001398:	b5b0      	push	{r4, r5, r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80013a4:	6079      	str	r1, [r7, #4]
 80013a6:	603a      	str	r2, [r7, #0]
    for (uint8_t channel = 1; channel <= 3; channel++) {
 80013a8:	2301      	movs	r3, #1
 80013aa:	75fb      	strb	r3, [r7, #23]
 80013ac:	e05b      	b.n	8001466 <INA3221_ReadAll+0xce>
        int16_t busVoltage = INA3221_ReadBusVoltage(hi2c, channel);
 80013ae:	7dfb      	ldrb	r3, [r7, #23]
 80013b0:	4619      	mov	r1, r3
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	f7ff ffdd 	bl	8001372 <INA3221_ReadBusVoltage>
 80013b8:	4603      	mov	r3, r0
 80013ba:	82bb      	strh	r3, [r7, #20]
        int16_t shuntVoltage = INA3221_ReadShuntVoltage(hi2c, channel);
 80013bc:	7dfb      	ldrb	r3, [r7, #23]
 80013be:	4619      	mov	r1, r3
 80013c0:	68f8      	ldr	r0, [r7, #12]
 80013c2:	f7ff ffc0 	bl	8001346 <INA3221_ReadShuntVoltage>
 80013c6:	4603      	mov	r3, r0
 80013c8:	827b      	strh	r3, [r7, #18]

        if (busVoltage == -1 || shuntVoltage == -1)
 80013ca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d2:	d004      	beq.n	80013de <INA3221_ReadAll+0x46>
 80013d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80013d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013dc:	d101      	bne.n	80013e2 <INA3221_ReadAll+0x4a>
            return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e045      	b.n	800146e <INA3221_ReadAll+0xd6>

        bus_voltages[channel - 1] = busVoltage * 0.001;  // Conversion to volts (1 mV per LSB)
 80013e2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff f89c 	bl	8000524 <__aeabi_i2d>
 80013ec:	a322      	add	r3, pc, #136	@ (adr r3, 8001478 <INA3221_ReadAll+0xe0>)
 80013ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f2:	f7ff f901 	bl	80005f8 <__aeabi_dmul>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4610      	mov	r0, r2
 80013fc:	4619      	mov	r1, r3
 80013fe:	7dfb      	ldrb	r3, [r7, #23]
 8001400:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001404:	3b01      	subs	r3, #1
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	18d4      	adds	r4, r2, r3
 800140c:	f7ff fbcc 	bl	8000ba8 <__aeabi_d2f>
 8001410:	4603      	mov	r3, r0
 8001412:	6023      	str	r3, [r4, #0]
        currents[channel - 1] = shuntVoltage * 0.00004 / shunt_resistance;  // Current in amperes
 8001414:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff f883 	bl	8000524 <__aeabi_i2d>
 800141e:	a318      	add	r3, pc, #96	@ (adr r3, 8001480 <INA3221_ReadAll+0xe8>)
 8001420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001424:	f7ff f8e8 	bl	80005f8 <__aeabi_dmul>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4614      	mov	r4, r2
 800142e:	461d      	mov	r5, r3
 8001430:	68b8      	ldr	r0, [r7, #8]
 8001432:	f7ff f889 	bl	8000548 <__aeabi_f2d>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4620      	mov	r0, r4
 800143c:	4629      	mov	r1, r5
 800143e:	f7ff fa05 	bl	800084c <__aeabi_ddiv>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	4610      	mov	r0, r2
 8001448:	4619      	mov	r1, r3
 800144a:	7dfb      	ldrb	r3, [r7, #23]
 800144c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001450:	3b01      	subs	r3, #1
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	683a      	ldr	r2, [r7, #0]
 8001456:	18d4      	adds	r4, r2, r3
 8001458:	f7ff fba6 	bl	8000ba8 <__aeabi_d2f>
 800145c:	4603      	mov	r3, r0
 800145e:	6023      	str	r3, [r4, #0]
    for (uint8_t channel = 1; channel <= 3; channel++) {
 8001460:	7dfb      	ldrb	r3, [r7, #23]
 8001462:	3301      	adds	r3, #1
 8001464:	75fb      	strb	r3, [r7, #23]
 8001466:	7dfb      	ldrb	r3, [r7, #23]
 8001468:	2b03      	cmp	r3, #3
 800146a:	d9a0      	bls.n	80013ae <INA3221_ReadAll+0x16>
    }
    return HAL_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bdb0      	pop	{r4, r5, r7, pc}
 8001476:	bf00      	nop
 8001478:	d2f1a9fc 	.word	0xd2f1a9fc
 800147c:	3f50624d 	.word	0x3f50624d
 8001480:	88e368f1 	.word	0x88e368f1
 8001484:	3f04f8b5 	.word	0x3f04f8b5

08001488 <ConvertTextToHex>:
// UART-Handle für das LoRa E5
extern UART_HandleTypeDef huart1; // LoRa-Modul ist an UART1 angeschlossen
extern UART_HandleTypeDef huart2; // UART2 für Debugging

// Funktion zur Umwandlung von Text in Hexadezimal
void ConvertTextToHex(const char *text, char *hex_buffer, size_t buffer_size) {
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
    size_t length = strlen(text);
 8001494:	68f8      	ldr	r0, [r7, #12]
 8001496:	f7fe feeb 	bl	8000270 <strlen>
 800149a:	6138      	str	r0, [r7, #16]
    for (size_t i = 0; i < length && (i * 2) < buffer_size - 1; i++) {
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
 80014a0:	e00e      	b.n	80014c0 <ConvertTextToHex+0x38>
        snprintf(&hex_buffer[i * 2], 3, "%02X", (unsigned char)text[i]);
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	68ba      	ldr	r2, [r7, #8]
 80014a8:	18d0      	adds	r0, r2, r3
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	4413      	add	r3, r2
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	4a0a      	ldr	r2, [pc, #40]	@ (80014dc <ConvertTextToHex+0x54>)
 80014b4:	2103      	movs	r1, #3
 80014b6:	f005 ff85 	bl	80073c4 <sniprintf>
    for (size_t i = 0; i < length && (i * 2) < buffer_size - 1; i++) {
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	3301      	adds	r3, #1
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	697a      	ldr	r2, [r7, #20]
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d205      	bcs.n	80014d4 <ConvertTextToHex+0x4c>
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	005a      	lsls	r2, r3, #1
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d3e6      	bcc.n	80014a2 <ConvertTextToHex+0x1a>
    }
}
 80014d4:	bf00      	nop
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	08009668 	.word	0x08009668

080014e0 <LoRa_E5_SendCommand>:

// Funktion zum Senden eines Befehls und Lesen der Antwort
static void LoRa_E5_SendCommand(const char *command) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
    // Empfangspuffer vor der Verwendung leeren
    memset(lora_rx_buffer, 0, LORA_BUFFER_SIZE);
 80014e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014ec:	2100      	movs	r1, #0
 80014ee:	4820      	ldr	r0, [pc, #128]	@ (8001570 <LoRa_E5_SendCommand+0x90>)
 80014f0:	f006 f874 	bl	80075dc <memset>

    // Befehl senden
    HAL_UART_Transmit(&huart1, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7fe febb 	bl	8000270 <strlen>
 80014fa:	4603      	mov	r3, r0
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	481b      	ldr	r0, [pc, #108]	@ (8001574 <LoRa_E5_SendCommand+0x94>)
 8001506:	f003 ff49 	bl	800539c <HAL_UART_Transmit>
    printf("LoRa E5: Sent command: %s\n", command);
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	481a      	ldr	r0, [pc, #104]	@ (8001578 <LoRa_E5_SendCommand+0x98>)
 800150e:	f005 fee9 	bl	80072e4 <iprintf>

    // Antwort per DMA empfangen
    HAL_UART_Receive_DMA(&huart1, lora_rx_buffer, LORA_BUFFER_SIZE);
 8001512:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001516:	4916      	ldr	r1, [pc, #88]	@ (8001570 <LoRa_E5_SendCommand+0x90>)
 8001518:	4816      	ldr	r0, [pc, #88]	@ (8001574 <LoRa_E5_SendCommand+0x94>)
 800151a:	f003 ffc9 	bl	80054b0 <HAL_UART_Receive_DMA>

    // Warten, um sicherzustellen, dass die Antwort vollständig empfangen wurde
    HAL_Delay(500);
 800151e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001522:	f001 fb3f 	bl	8002ba4 <HAL_Delay>

    // Empfangene Daten anzeigen
    if (strlen((char *)lora_rx_buffer) > 0) {
 8001526:	4b12      	ldr	r3, [pc, #72]	@ (8001570 <LoRa_E5_SendCommand+0x90>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d019      	beq.n	8001562 <LoRa_E5_SendCommand+0x82>
        printf("LoRa E5: Received: %s\n", lora_rx_buffer);
 800152e:	4910      	ldr	r1, [pc, #64]	@ (8001570 <LoRa_E5_SendCommand+0x90>)
 8001530:	4812      	ldr	r0, [pc, #72]	@ (800157c <LoRa_E5_SendCommand+0x9c>)
 8001532:	f005 fed7 	bl	80072e4 <iprintf>

        // Antwort über UART2 (Debugging-Port) ausgeben
        HAL_UART_Transmit(&huart2, lora_rx_buffer, strlen((char *)lora_rx_buffer), HAL_MAX_DELAY);
 8001536:	480e      	ldr	r0, [pc, #56]	@ (8001570 <LoRa_E5_SendCommand+0x90>)
 8001538:	f7fe fe9a 	bl	8000270 <strlen>
 800153c:	4603      	mov	r3, r0
 800153e:	b29a      	uxth	r2, r3
 8001540:	f04f 33ff 	mov.w	r3, #4294967295
 8001544:	490a      	ldr	r1, [pc, #40]	@ (8001570 <LoRa_E5_SendCommand+0x90>)
 8001546:	480e      	ldr	r0, [pc, #56]	@ (8001580 <LoRa_E5_SendCommand+0xa0>)
 8001548:	f003 ff28 	bl	800539c <HAL_UART_Transmit>

        // Zusätzlicher Zeilenumbruch für bessere Lesbarkeit
        uint8_t newline = '\n';
 800154c:	230a      	movs	r3, #10
 800154e:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart2, &newline, 1, HAL_MAX_DELAY);
 8001550:	f107 010f 	add.w	r1, r7, #15
 8001554:	f04f 33ff 	mov.w	r3, #4294967295
 8001558:	2201      	movs	r2, #1
 800155a:	4809      	ldr	r0, [pc, #36]	@ (8001580 <LoRa_E5_SendCommand+0xa0>)
 800155c:	f003 ff1e 	bl	800539c <HAL_UART_Transmit>
    } else {
        printf("LoRa E5: No response received.\n");
    }
}
 8001560:	e002      	b.n	8001568 <LoRa_E5_SendCommand+0x88>
        printf("LoRa E5: No response received.\n");
 8001562:	4808      	ldr	r0, [pc, #32]	@ (8001584 <LoRa_E5_SendCommand+0xa4>)
 8001564:	f005 ff26 	bl	80073b4 <puts>
}
 8001568:	bf00      	nop
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000230 	.word	0x20000230
 8001574:	2000088c 	.word	0x2000088c
 8001578:	08009670 	.word	0x08009670
 800157c:	0800968c 	.word	0x0800968c
 8001580:	20000914 	.word	0x20000914
 8001584:	080096a4 	.word	0x080096a4

08001588 <LoRa_E5_Init>:

// Initialisierung des LoRa E5 Moduls
void LoRa_E5_Init(void) {
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
    printf("LoRa E5: Initializing...\n");
 800158c:	4803      	ldr	r0, [pc, #12]	@ (800159c <LoRa_E5_Init+0x14>)
 800158e:	f005 ff11 	bl	80073b4 <puts>
    LoRa_E5_SetModeTest();
 8001592:	f000 f805 	bl	80015a0 <LoRa_E5_SetModeTest>
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	080096c4 	.word	0x080096c4

080015a0 <LoRa_E5_SetModeTest>:

// Testmodus aktivieren
void LoRa_E5_SetModeTest(void) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
    LoRa_E5_SendCommand("AT+MODE=TEST\r\n");
 80015a4:	4802      	ldr	r0, [pc, #8]	@ (80015b0 <LoRa_E5_SetModeTest+0x10>)
 80015a6:	f7ff ff9b 	bl	80014e0 <LoRa_E5_SendCommand>
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	080096e0 	.word	0x080096e0

080015b4 <LoRa_E5_SetConfiguration>:

// Konfiguration setzen
void LoRa_E5_SetConfiguration(const char *config) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b0a2      	sub	sp, #136	@ 0x88
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
    char cmd[128];
    snprintf(cmd, sizeof(cmd), "AT+TEST=RFCFG,%s\r\n", config);
 80015bc:	f107 0008 	add.w	r0, r7, #8
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a06      	ldr	r2, [pc, #24]	@ (80015dc <LoRa_E5_SetConfiguration+0x28>)
 80015c4:	2180      	movs	r1, #128	@ 0x80
 80015c6:	f005 fefd 	bl	80073c4 <sniprintf>
    LoRa_E5_SendCommand(cmd);
 80015ca:	f107 0308 	add.w	r3, r7, #8
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff ff86 	bl	80014e0 <LoRa_E5_SendCommand>
}
 80015d4:	bf00      	nop
 80015d6:	3788      	adds	r7, #136	@ 0x88
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	080096f0 	.word	0x080096f0

080015e0 <LoRa_E5_SendMessage>:

// Nachricht im Testmodus senden
void LoRa_E5_SendMessage(const char *message) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	f5ad 6d04 	sub.w	sp, sp, #2112	@ 0x840
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	f507 6304 	add.w	r3, r7, #2112	@ 0x840
 80015ec:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 80015f0:	6018      	str	r0, [r3, #0]
    char hex_buffer[2 * LORA_BUFFER_SIZE] = {0}; // Puffer für Hexadezimalnachricht
 80015f2:	f507 6304 	add.w	r3, r7, #2112	@ 0x840
 80015f6:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	3304      	adds	r3, #4
 8001600:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
 8001604:	2100      	movs	r1, #0
 8001606:	4618      	mov	r0, r3
 8001608:	f005 ffe8 	bl	80075dc <memset>
    char at_command[2 * LORA_BUFFER_SIZE + 50] = {0}; // Puffer für das AT-Kommando
 800160c:	f507 6304 	add.w	r3, r7, #2112	@ 0x840
 8001610:	f6a3 0334 	subw	r3, r3, #2100	@ 0x834
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	3304      	adds	r3, #4
 800161a:	f240 422e 	movw	r2, #1070	@ 0x42e
 800161e:	2100      	movs	r1, #0
 8001620:	4618      	mov	r0, r3
 8001622:	f005 ffdb 	bl	80075dc <memset>

    // Text in Hexadezimal umwandeln
    ConvertTextToHex(message, hex_buffer, sizeof(hex_buffer));
 8001626:	f507 6188 	add.w	r1, r7, #1088	@ 0x440
 800162a:	f507 6304 	add.w	r3, r7, #2112	@ 0x840
 800162e:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8001632:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001636:	6818      	ldr	r0, [r3, #0]
 8001638:	f7ff ff26 	bl	8001488 <ConvertTextToHex>

    // AT-Befehl formatieren
    snprintf(at_command, sizeof(at_command), "AT+TEST=TXLRPKT,%s\r\n", hex_buffer);
 800163c:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8001640:	f107 000c 	add.w	r0, r7, #12
 8001644:	4a0a      	ldr	r2, [pc, #40]	@ (8001670 <LoRa_E5_SendMessage+0x90>)
 8001646:	f240 4132 	movw	r1, #1074	@ 0x432
 800164a:	f005 febb 	bl	80073c4 <sniprintf>

    // Befehl senden
    LoRa_E5_SendCommand(at_command);
 800164e:	f107 030c 	add.w	r3, r7, #12
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff ff44 	bl	80014e0 <LoRa_E5_SendCommand>

    printf("LoRa E5: Sent Hex Message: %s\n", hex_buffer);
 8001658:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 800165c:	4619      	mov	r1, r3
 800165e:	4805      	ldr	r0, [pc, #20]	@ (8001674 <LoRa_E5_SendMessage+0x94>)
 8001660:	f005 fe40 	bl	80072e4 <iprintf>
}
 8001664:	bf00      	nop
 8001666:	f507 6704 	add.w	r7, r7, #2112	@ 0x840
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	08009704 	.word	0x08009704
 8001674:	0800971c 	.word	0x0800971c

08001678 <SEN5X_Init>:
#include "SEN5X.h"
#include "crc.h"

extern I2C_HandleTypeDef hi2c1;

void SEN5X_Init(void) {
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  // No specific initialization command for SHT4X, just ensure the I2C bus is initialized
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
	...

08001688 <SEN5X_StartMeasurement>:

void SEN5X_StartMeasurement(void) {
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af02      	add	r7, sp, #8
  uint8_t cmd[] = { (SEN5X_CMD_START_MEASUREMENT >> 8) & 0xFF, SEN5X_CMD_START_MEASUREMENT & 0xFF };
 800168e:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 8001692:	80bb      	strh	r3, [r7, #4]
  HAL_I2C_Master_Transmit(&hi2c1, SEN5X_I2C_DEV_ID, cmd, 2, HAL_MAX_DELAY);
 8001694:	1d3a      	adds	r2, r7, #4
 8001696:	f04f 33ff 	mov.w	r3, #4294967295
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	2302      	movs	r3, #2
 800169e:	21d2      	movs	r1, #210	@ 0xd2
 80016a0:	4803      	ldr	r0, [pc, #12]	@ (80016b0 <SEN5X_StartMeasurement+0x28>)
 80016a2:	f002 f851 	bl	8003748 <HAL_I2C_Master_Transmit>
//  HAL_Delay(50); // Wait for the sensor to start measurement
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000430 	.word	0x20000430

080016b4 <SEN5X_StopMeasurement>:

void SEN5X_StopMeasurement(void) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af02      	add	r7, sp, #8
  uint8_t cmd[] = { (SEN5X_CMD_STOP_MEASUREMENT >> 8) & 0xFF, SEN5X_CMD_STOP_MEASUREMENT & 0xFF };
 80016ba:	f240 4301 	movw	r3, #1025	@ 0x401
 80016be:	80bb      	strh	r3, [r7, #4]
  HAL_I2C_Master_Transmit(&hi2c1, SEN5X_I2C_DEV_ID, cmd, 2, HAL_MAX_DELAY);
 80016c0:	1d3a      	adds	r2, r7, #4
 80016c2:	f04f 33ff 	mov.w	r3, #4294967295
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	2302      	movs	r3, #2
 80016ca:	21d2      	movs	r1, #210	@ 0xd2
 80016cc:	4803      	ldr	r0, [pc, #12]	@ (80016dc <SEN5X_StopMeasurement+0x28>)
 80016ce:	f002 f83b 	bl	8003748 <HAL_I2C_Master_Transmit>
//  HAL_Delay(200); // Wait for the sensor to respond
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000430 	.word	0x20000430

080016e0 <SEN5X_ReadAllMeasuredValues>:
  }

  return buffer[1];
}

void SEN5X_ReadAllMeasuredValues(float* pm1p0, float* pm2p5, float* pm4p0, float* pm10, float* humidity, float* temperature, float* voc_index, float* nox_index) {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b094      	sub	sp, #80	@ 0x50
 80016e4:	af02      	add	r7, sp, #8
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
 80016ec:	603b      	str	r3, [r7, #0]
  uint8_t cmd[] = { (SEN5X_CMD_READ_MEASURED_VALUES >> 8) & 0xFF, SEN5X_CMD_READ_MEASURED_VALUES & 0xFF };
 80016ee:	f24c 4303 	movw	r3, #50179	@ 0xc403
 80016f2:	863b      	strh	r3, [r7, #48]	@ 0x30
  uint8_t buffer[24];

  HAL_I2C_Master_Transmit(&hi2c1, SEN5X_I2C_DEV_ID, cmd, 2, HAL_MAX_DELAY);
 80016f4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80016f8:	f04f 33ff 	mov.w	r3, #4294967295
 80016fc:	9300      	str	r3, [sp, #0]
 80016fe:	2302      	movs	r3, #2
 8001700:	21d2      	movs	r1, #210	@ 0xd2
 8001702:	488d      	ldr	r0, [pc, #564]	@ (8001938 <SEN5X_ReadAllMeasuredValues+0x258>)
 8001704:	f002 f820 	bl	8003748 <HAL_I2C_Master_Transmit>
  HAL_Delay(20); // Wait for the sensor to prepare data
 8001708:	2014      	movs	r0, #20
 800170a:	f001 fa4b 	bl	8002ba4 <HAL_Delay>
  HAL_I2C_Master_Receive(&hi2c1, SEN5X_I2C_DEV_ID, buffer, 24, HAL_MAX_DELAY);
 800170e:	f107 0218 	add.w	r2, r7, #24
 8001712:	f04f 33ff 	mov.w	r3, #4294967295
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	2318      	movs	r3, #24
 800171a:	21d2      	movs	r1, #210	@ 0xd2
 800171c:	4886      	ldr	r0, [pc, #536]	@ (8001938 <SEN5X_ReadAllMeasuredValues+0x258>)
 800171e:	f002 f92b 	bl	8003978 <HAL_I2C_Master_Receive>

  // Verify CRC for each 2-byte data packet
  for (int i = 0; i < 24; i += 3) {
 8001722:	2300      	movs	r3, #0
 8001724:	647b      	str	r3, [r7, #68]	@ 0x44
 8001726:	e023      	b.n	8001770 <SEN5X_ReadAllMeasuredValues+0x90>
    uint8_t data[2] = { buffer[i], buffer[i+1] };
 8001728:	f107 0218 	add.w	r2, r7, #24
 800172c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800172e:	4413      	add	r3, r2
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	753b      	strb	r3, [r7, #20]
 8001734:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001736:	3301      	adds	r3, #1
 8001738:	3348      	adds	r3, #72	@ 0x48
 800173a:	443b      	add	r3, r7
 800173c:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8001740:	757b      	strb	r3, [r7, #21]
    uint8_t crc = buffer[i+2];
 8001742:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001744:	3302      	adds	r3, #2
 8001746:	3348      	adds	r3, #72	@ 0x48
 8001748:	443b      	add	r3, r7
 800174a:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800174e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (CalcCrc(data) != crc) {
 8001752:	f107 0314 	add.w	r3, r7, #20
 8001756:	4618      	mov	r0, r3
 8001758:	f000 f9c9 	bl	8001aee <CalcCrc>
 800175c:	4603      	mov	r3, r0
 800175e:	461a      	mov	r2, r3
 8001760:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001764:	4293      	cmp	r3, r2
 8001766:	f040 80e4 	bne.w	8001932 <SEN5X_ReadAllMeasuredValues+0x252>
  for (int i = 0; i < 24; i += 3) {
 800176a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800176c:	3303      	adds	r3, #3
 800176e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001770:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001772:	2b17      	cmp	r3, #23
 8001774:	ddd8      	ble.n	8001728 <SEN5X_ReadAllMeasuredValues+0x48>
      return;
    }
  }

  // Parse the buffer data
  uint16_t pm1p0_raw = (buffer[0] << 8) | buffer[1];
 8001776:	7e3b      	ldrb	r3, [r7, #24]
 8001778:	021b      	lsls	r3, r3, #8
 800177a:	b21a      	sxth	r2, r3
 800177c:	7e7b      	ldrb	r3, [r7, #25]
 800177e:	b21b      	sxth	r3, r3
 8001780:	4313      	orrs	r3, r2
 8001782:	b21b      	sxth	r3, r3
 8001784:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  uint16_t pm2p5_raw = (buffer[3] << 8) | buffer[4];
 8001788:	7efb      	ldrb	r3, [r7, #27]
 800178a:	021b      	lsls	r3, r3, #8
 800178c:	b21a      	sxth	r2, r3
 800178e:	7f3b      	ldrb	r3, [r7, #28]
 8001790:	b21b      	sxth	r3, r3
 8001792:	4313      	orrs	r3, r2
 8001794:	b21b      	sxth	r3, r3
 8001796:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  uint16_t pm4p0_raw = (buffer[6] << 8) | buffer[7];
 800179a:	7fbb      	ldrb	r3, [r7, #30]
 800179c:	021b      	lsls	r3, r3, #8
 800179e:	b21a      	sxth	r2, r3
 80017a0:	7ffb      	ldrb	r3, [r7, #31]
 80017a2:	b21b      	sxth	r3, r3
 80017a4:	4313      	orrs	r3, r2
 80017a6:	b21b      	sxth	r3, r3
 80017a8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  uint16_t pm10_raw = (buffer[9] << 8) | buffer[10];
 80017aa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80017ae:	021b      	lsls	r3, r3, #8
 80017b0:	b21a      	sxth	r2, r3
 80017b2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80017b6:	b21b      	sxth	r3, r3
 80017b8:	4313      	orrs	r3, r2
 80017ba:	b21b      	sxth	r3, r3
 80017bc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  int16_t humidity_raw = (buffer[12] << 8) | buffer[13];
 80017be:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80017c2:	021b      	lsls	r3, r3, #8
 80017c4:	b21a      	sxth	r2, r3
 80017c6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80017ca:	b21b      	sxth	r3, r3
 80017cc:	4313      	orrs	r3, r2
 80017ce:	877b      	strh	r3, [r7, #58]	@ 0x3a
  int16_t temperature_raw = (buffer[15] << 8) | buffer[16];
 80017d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80017d4:	021b      	lsls	r3, r3, #8
 80017d6:	b21a      	sxth	r2, r3
 80017d8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80017dc:	b21b      	sxth	r3, r3
 80017de:	4313      	orrs	r3, r2
 80017e0:	873b      	strh	r3, [r7, #56]	@ 0x38
  int16_t voc_raw = (buffer[18] << 8) | buffer[19];
 80017e2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80017e6:	021b      	lsls	r3, r3, #8
 80017e8:	b21a      	sxth	r2, r3
 80017ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80017ee:	b21b      	sxth	r3, r3
 80017f0:	4313      	orrs	r3, r2
 80017f2:	86fb      	strh	r3, [r7, #54]	@ 0x36
  int16_t nox_raw = (buffer[21] << 8) | buffer[22];
 80017f4:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80017f8:	021b      	lsls	r3, r3, #8
 80017fa:	b21a      	sxth	r2, r3
 80017fc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001800:	b21b      	sxth	r3, r3
 8001802:	4313      	orrs	r3, r2
 8001804:	86bb      	strh	r3, [r7, #52]	@ 0x34

  // Convert raw values to meaningful units
  *pm1p0 = pm1p0_raw / 10.0;
 8001806:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800180a:	4618      	mov	r0, r3
 800180c:	f7fe fe8a 	bl	8000524 <__aeabi_i2d>
 8001810:	f04f 0200 	mov.w	r2, #0
 8001814:	4b49      	ldr	r3, [pc, #292]	@ (800193c <SEN5X_ReadAllMeasuredValues+0x25c>)
 8001816:	f7ff f819 	bl	800084c <__aeabi_ddiv>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4610      	mov	r0, r2
 8001820:	4619      	mov	r1, r3
 8001822:	f7ff f9c1 	bl	8000ba8 <__aeabi_d2f>
 8001826:	4602      	mov	r2, r0
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	601a      	str	r2, [r3, #0]
  *pm2p5 = pm2p5_raw / 10.0;
 800182c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001830:	4618      	mov	r0, r3
 8001832:	f7fe fe77 	bl	8000524 <__aeabi_i2d>
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	4b40      	ldr	r3, [pc, #256]	@ (800193c <SEN5X_ReadAllMeasuredValues+0x25c>)
 800183c:	f7ff f806 	bl	800084c <__aeabi_ddiv>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	4610      	mov	r0, r2
 8001846:	4619      	mov	r1, r3
 8001848:	f7ff f9ae 	bl	8000ba8 <__aeabi_d2f>
 800184c:	4602      	mov	r2, r0
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	601a      	str	r2, [r3, #0]
  *pm4p0 = pm4p0_raw / 10.0;
 8001852:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001854:	4618      	mov	r0, r3
 8001856:	f7fe fe65 	bl	8000524 <__aeabi_i2d>
 800185a:	f04f 0200 	mov.w	r2, #0
 800185e:	4b37      	ldr	r3, [pc, #220]	@ (800193c <SEN5X_ReadAllMeasuredValues+0x25c>)
 8001860:	f7fe fff4 	bl	800084c <__aeabi_ddiv>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	4610      	mov	r0, r2
 800186a:	4619      	mov	r1, r3
 800186c:	f7ff f99c 	bl	8000ba8 <__aeabi_d2f>
 8001870:	4602      	mov	r2, r0
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	601a      	str	r2, [r3, #0]
  *pm10 = pm10_raw / 10.0;
 8001876:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001878:	4618      	mov	r0, r3
 800187a:	f7fe fe53 	bl	8000524 <__aeabi_i2d>
 800187e:	f04f 0200 	mov.w	r2, #0
 8001882:	4b2e      	ldr	r3, [pc, #184]	@ (800193c <SEN5X_ReadAllMeasuredValues+0x25c>)
 8001884:	f7fe ffe2 	bl	800084c <__aeabi_ddiv>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4610      	mov	r0, r2
 800188e:	4619      	mov	r1, r3
 8001890:	f7ff f98a 	bl	8000ba8 <__aeabi_d2f>
 8001894:	4602      	mov	r2, r0
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	601a      	str	r2, [r3, #0]
  *humidity = humidity_raw / 100.0;
 800189a:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 800189e:	4618      	mov	r0, r3
 80018a0:	f7fe fe40 	bl	8000524 <__aeabi_i2d>
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	4b25      	ldr	r3, [pc, #148]	@ (8001940 <SEN5X_ReadAllMeasuredValues+0x260>)
 80018aa:	f7fe ffcf 	bl	800084c <__aeabi_ddiv>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	4610      	mov	r0, r2
 80018b4:	4619      	mov	r1, r3
 80018b6:	f7ff f977 	bl	8000ba8 <__aeabi_d2f>
 80018ba:	4602      	mov	r2, r0
 80018bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80018be:	601a      	str	r2, [r3, #0]
  *temperature = temperature_raw / 200.0;
 80018c0:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7fe fe2d 	bl	8000524 <__aeabi_i2d>
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001944 <SEN5X_ReadAllMeasuredValues+0x264>)
 80018d0:	f7fe ffbc 	bl	800084c <__aeabi_ddiv>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4610      	mov	r0, r2
 80018da:	4619      	mov	r1, r3
 80018dc:	f7ff f964 	bl	8000ba8 <__aeabi_d2f>
 80018e0:	4602      	mov	r2, r0
 80018e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018e4:	601a      	str	r2, [r3, #0]
  *voc_index = voc_raw / 10.0;
 80018e6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fe1a 	bl	8000524 <__aeabi_i2d>
 80018f0:	f04f 0200 	mov.w	r2, #0
 80018f4:	4b11      	ldr	r3, [pc, #68]	@ (800193c <SEN5X_ReadAllMeasuredValues+0x25c>)
 80018f6:	f7fe ffa9 	bl	800084c <__aeabi_ddiv>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4610      	mov	r0, r2
 8001900:	4619      	mov	r1, r3
 8001902:	f7ff f951 	bl	8000ba8 <__aeabi_d2f>
 8001906:	4602      	mov	r2, r0
 8001908:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800190a:	601a      	str	r2, [r3, #0]
  *nox_index = nox_raw / 10.0;
 800190c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8001910:	4618      	mov	r0, r3
 8001912:	f7fe fe07 	bl	8000524 <__aeabi_i2d>
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	4b08      	ldr	r3, [pc, #32]	@ (800193c <SEN5X_ReadAllMeasuredValues+0x25c>)
 800191c:	f7fe ff96 	bl	800084c <__aeabi_ddiv>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4610      	mov	r0, r2
 8001926:	4619      	mov	r1, r3
 8001928:	f7ff f93e 	bl	8000ba8 <__aeabi_d2f>
 800192c:	4602      	mov	r2, r0
 800192e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001930:	601a      	str	r2, [r3, #0]
}
 8001932:	3748      	adds	r7, #72	@ 0x48
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20000430 	.word	0x20000430
 800193c:	40240000 	.word	0x40240000
 8001940:	40590000 	.word	0x40590000
 8001944:	40690000 	.word	0x40690000

08001948 <SHT4X_Init>:
#include "SHT4x.h"
#include "crc.h"

extern I2C_HandleTypeDef hi2c1;

void SHT4X_Init(void) {
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  // No specific initialization command for SHT4X, just ensure the I2C bus is initialized
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
	...

08001958 <SHT4X_Measure>:
    serial_number[i / 3 * 2] = data[0];
    serial_number[i / 3 * 2 + 1] = data[1];
  }
}

void SHT4X_Measure(float* temperature, float* humidity, uint8_t cmd, int* MeasurementDuration) {
 8001958:	b580      	push	{r7, lr}
 800195a:	b08c      	sub	sp, #48	@ 0x30
 800195c:	af02      	add	r7, sp, #8
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	4613      	mov	r3, r2
 8001966:	71fb      	strb	r3, [r7, #7]
  uint8_t buffer[6];

  HAL_I2C_Master_Transmit(&hi2c1, SHT4X_I2C_DEV_ID, &cmd, 1, HAL_MAX_DELAY);
 8001968:	1dfa      	adds	r2, r7, #7
 800196a:	f04f 33ff 	mov.w	r3, #4294967295
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	2301      	movs	r3, #1
 8001972:	2188      	movs	r1, #136	@ 0x88
 8001974:	4852      	ldr	r0, [pc, #328]	@ (8001ac0 <SHT4X_Measure+0x168>)
 8001976:	f001 fee7 	bl	8003748 <HAL_I2C_Master_Transmit>
  HAL_Delay(MeasurementDuration); // Wait for the measurement to complete
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f001 f911 	bl	8002ba4 <HAL_Delay>
  HAL_I2C_Master_Receive(&hi2c1, SHT4X_I2C_DEV_ID, buffer, 6, HAL_MAX_DELAY);
 8001982:	f107 0218 	add.w	r2, r7, #24
 8001986:	f04f 33ff 	mov.w	r3, #4294967295
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	2306      	movs	r3, #6
 800198e:	2188      	movs	r1, #136	@ 0x88
 8001990:	484b      	ldr	r0, [pc, #300]	@ (8001ac0 <SHT4X_Measure+0x168>)
 8001992:	f001 fff1 	bl	8003978 <HAL_I2C_Master_Receive>

  // Verify CRC for each 2-byte data packet
  for (int i = 0; i < 6; i += 3) {
 8001996:	2300      	movs	r3, #0
 8001998:	627b      	str	r3, [r7, #36]	@ 0x24
 800199a:	e020      	b.n	80019de <SHT4X_Measure+0x86>
    uint8_t data[2] = { buffer[i], buffer[i + 1] };
 800199c:	f107 0218 	add.w	r2, r7, #24
 80019a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a2:	4413      	add	r3, r2
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	753b      	strb	r3, [r7, #20]
 80019a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019aa:	3301      	adds	r3, #1
 80019ac:	3328      	adds	r3, #40	@ 0x28
 80019ae:	443b      	add	r3, r7
 80019b0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80019b4:	757b      	strb	r3, [r7, #21]
    uint8_t crc = buffer[i + 2];
 80019b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b8:	3302      	adds	r3, #2
 80019ba:	3328      	adds	r3, #40	@ 0x28
 80019bc:	443b      	add	r3, r7
 80019be:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80019c2:	77fb      	strb	r3, [r7, #31]
    if (CalcCrc(data) != crc) {
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	4618      	mov	r0, r3
 80019ca:	f000 f890 	bl	8001aee <CalcCrc>
 80019ce:	4603      	mov	r3, r0
 80019d0:	461a      	mov	r2, r3
 80019d2:	7ffb      	ldrb	r3, [r7, #31]
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d167      	bne.n	8001aa8 <SHT4X_Measure+0x150>
  for (int i = 0; i < 6; i += 3) {
 80019d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019da:	3303      	adds	r3, #3
 80019dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80019de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e0:	2b05      	cmp	r3, #5
 80019e2:	dddb      	ble.n	800199c <SHT4X_Measure+0x44>
      return;
    }
  }

  // Parse the buffer data
  uint16_t temperature_raw = (buffer[0] << 8) | buffer[1];
 80019e4:	7e3b      	ldrb	r3, [r7, #24]
 80019e6:	021b      	lsls	r3, r3, #8
 80019e8:	b21a      	sxth	r2, r3
 80019ea:	7e7b      	ldrb	r3, [r7, #25]
 80019ec:	b21b      	sxth	r3, r3
 80019ee:	4313      	orrs	r3, r2
 80019f0:	b21b      	sxth	r3, r3
 80019f2:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t humidity_raw = (buffer[3] << 8) | buffer[4];
 80019f4:	7efb      	ldrb	r3, [r7, #27]
 80019f6:	021b      	lsls	r3, r3, #8
 80019f8:	b21a      	sxth	r2, r3
 80019fa:	7f3b      	ldrb	r3, [r7, #28]
 80019fc:	b21b      	sxth	r3, r3
 80019fe:	4313      	orrs	r3, r2
 8001a00:	b21b      	sxth	r3, r3
 8001a02:	843b      	strh	r3, [r7, #32]

  // Convert raw values to meaningful units
  *temperature = -45 + 175 * ((float)temperature_raw / 65535.0);
 8001a04:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001a06:	ee07 3a90 	vmov	s15, r3
 8001a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a0e:	ee17 0a90 	vmov	r0, s15
 8001a12:	f7fe fd99 	bl	8000548 <__aeabi_f2d>
 8001a16:	a326      	add	r3, pc, #152	@ (adr r3, 8001ab0 <SHT4X_Measure+0x158>)
 8001a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1c:	f7fe ff16 	bl	800084c <__aeabi_ddiv>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4610      	mov	r0, r2
 8001a26:	4619      	mov	r1, r3
 8001a28:	a323      	add	r3, pc, #140	@ (adr r3, 8001ab8 <SHT4X_Measure+0x160>)
 8001a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2e:	f7fe fde3 	bl	80005f8 <__aeabi_dmul>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	4610      	mov	r0, r2
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	4b21      	ldr	r3, [pc, #132]	@ (8001ac4 <SHT4X_Measure+0x16c>)
 8001a40:	f7fe fc22 	bl	8000288 <__aeabi_dsub>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4610      	mov	r0, r2
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	f7ff f8ac 	bl	8000ba8 <__aeabi_d2f>
 8001a50:	4602      	mov	r2, r0
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	601a      	str	r2, [r3, #0]
  *humidity = -6 + 125 * ((float)humidity_raw / 65535.0);
 8001a56:	8c3b      	ldrh	r3, [r7, #32]
 8001a58:	ee07 3a90 	vmov	s15, r3
 8001a5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a60:	ee17 0a90 	vmov	r0, s15
 8001a64:	f7fe fd70 	bl	8000548 <__aeabi_f2d>
 8001a68:	a311      	add	r3, pc, #68	@ (adr r3, 8001ab0 <SHT4X_Measure+0x158>)
 8001a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6e:	f7fe feed 	bl	800084c <__aeabi_ddiv>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4610      	mov	r0, r2
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f04f 0200 	mov.w	r2, #0
 8001a7e:	4b12      	ldr	r3, [pc, #72]	@ (8001ac8 <SHT4X_Measure+0x170>)
 8001a80:	f7fe fdba 	bl	80005f8 <__aeabi_dmul>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4610      	mov	r0, r2
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	4b0e      	ldr	r3, [pc, #56]	@ (8001acc <SHT4X_Measure+0x174>)
 8001a92:	f7fe fbf9 	bl	8000288 <__aeabi_dsub>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f7ff f883 	bl	8000ba8 <__aeabi_d2f>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	601a      	str	r2, [r3, #0]
}
 8001aa8:	3728      	adds	r7, #40	@ 0x28
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	00000000 	.word	0x00000000
 8001ab4:	40efffe0 	.word	0x40efffe0
 8001ab8:	00000000 	.word	0x00000000
 8001abc:	4065e000 	.word	0x4065e000
 8001ac0:	20000430 	.word	0x20000430
 8001ac4:	40468000 	.word	0x40468000
 8001ac8:	405f4000 	.word	0x405f4000
 8001acc:	40180000 	.word	0x40180000

08001ad0 <SHT4X_MeasureHighPrecision>:

void SHT4X_MeasureHighPrecision(float* temperature, float* humidity) {
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  SHT4X_Measure(temperature, humidity, SHT4X_CMD_MEASURE_HIGH_PRECISION, 10);
 8001ada:	230a      	movs	r3, #10
 8001adc:	22fd      	movs	r2, #253	@ 0xfd
 8001ade:	6839      	ldr	r1, [r7, #0]
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff ff39 	bl	8001958 <SHT4X_Measure>
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <CalcCrc>:
 *  Created on: May 27, 2024
 *      Author: erikl
 */
#include "crc.h"

uint8_t CalcCrc(uint8_t data[2]) {
 8001aee:	b480      	push	{r7}
 8001af0:	b087      	sub	sp, #28
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
    uint8_t crc = 0xFF;
 8001af6:	23ff      	movs	r3, #255	@ 0xff
 8001af8:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < 2; i++) {
 8001afa:	2300      	movs	r3, #0
 8001afc:	613b      	str	r3, [r7, #16]
 8001afe:	e020      	b.n	8001b42 <CalcCrc+0x54>
        crc ^= data[i];
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	4413      	add	r3, r2
 8001b06:	781a      	ldrb	r2, [r3, #0]
 8001b08:	7dfb      	ldrb	r3, [r7, #23]
 8001b0a:	4053      	eors	r3, r2
 8001b0c:	75fb      	strb	r3, [r7, #23]
        for (uint8_t bit = 8; bit > 0; --bit) {
 8001b0e:	2308      	movs	r3, #8
 8001b10:	73fb      	strb	r3, [r7, #15]
 8001b12:	e010      	b.n	8001b36 <CalcCrc+0x48>
            if (crc & 0x80) {
 8001b14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	da06      	bge.n	8001b2a <CalcCrc+0x3c>
                crc = (crc << 1) ^ 0x31u;
 8001b1c:	7dfb      	ldrb	r3, [r7, #23]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 8001b26:	75fb      	strb	r3, [r7, #23]
 8001b28:	e002      	b.n	8001b30 <CalcCrc+0x42>
            } else {
                crc = (crc << 1);
 8001b2a:	7dfb      	ldrb	r3, [r7, #23]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	75fb      	strb	r3, [r7, #23]
        for (uint8_t bit = 8; bit > 0; --bit) {
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	73fb      	strb	r3, [r7, #15]
 8001b36:	7bfb      	ldrb	r3, [r7, #15]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1eb      	bne.n	8001b14 <CalcCrc+0x26>
    for (int i = 0; i < 2; i++) {
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	613b      	str	r3, [r7, #16]
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	dddb      	ble.n	8001b00 <CalcCrc+0x12>
            }
        }
    }
    return crc;
 8001b48:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	371c      	adds	r7, #28
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b5e:	4b10      	ldr	r3, [pc, #64]	@ (8001ba0 <MX_DMA_Init+0x48>)
 8001b60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b62:	4a0f      	ldr	r2, [pc, #60]	@ (8001ba0 <MX_DMA_Init+0x48>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	6493      	str	r3, [r2, #72]	@ 0x48
 8001b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba0 <MX_DMA_Init+0x48>)
 8001b6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	607b      	str	r3, [r7, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001b76:	2200      	movs	r2, #0
 8001b78:	2100      	movs	r1, #0
 8001b7a:	200f      	movs	r0, #15
 8001b7c:	f001 f911 	bl	8002da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001b80:	200f      	movs	r0, #15
 8001b82:	f001 f92a 	bl	8002dda <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001b86:	2200      	movs	r2, #0
 8001b88:	2100      	movs	r1, #0
 8001b8a:	2010      	movs	r0, #16
 8001b8c:	f001 f909 	bl	8002da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001b90:	2010      	movs	r0, #16
 8001b92:	f001 f922 	bl	8002dda <HAL_NVIC_EnableIRQ>

}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40021000 	.word	0x40021000

08001ba4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b088      	sub	sp, #32
 8001ba8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001baa:	f107 030c 	add.w	r3, r7, #12
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	609a      	str	r2, [r3, #8]
 8001bb6:	60da      	str	r2, [r3, #12]
 8001bb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bba:	4b1d      	ldr	r3, [pc, #116]	@ (8001c30 <MX_GPIO_Init+0x8c>)
 8001bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bbe:	4a1c      	ldr	r2, [pc, #112]	@ (8001c30 <MX_GPIO_Init+0x8c>)
 8001bc0:	f043 0304 	orr.w	r3, r3, #4
 8001bc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bc6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c30 <MX_GPIO_Init+0x8c>)
 8001bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bca:	f003 0304 	and.w	r3, r3, #4
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd2:	4b17      	ldr	r3, [pc, #92]	@ (8001c30 <MX_GPIO_Init+0x8c>)
 8001bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bd6:	4a16      	ldr	r2, [pc, #88]	@ (8001c30 <MX_GPIO_Init+0x8c>)
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bde:	4b14      	ldr	r3, [pc, #80]	@ (8001c30 <MX_GPIO_Init+0x8c>)
 8001be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	607b      	str	r3, [r7, #4]
 8001be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bea:	4b11      	ldr	r3, [pc, #68]	@ (8001c30 <MX_GPIO_Init+0x8c>)
 8001bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bee:	4a10      	ldr	r2, [pc, #64]	@ (8001c30 <MX_GPIO_Init+0x8c>)
 8001bf0:	f043 0302 	orr.w	r3, r3, #2
 8001bf4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c30 <MX_GPIO_Init+0x8c>)
 8001bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	603b      	str	r3, [r7, #0]
 8001c00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001c02:	2200      	movs	r2, #0
 8001c04:	2108      	movs	r1, #8
 8001c06:	480b      	ldr	r0, [pc, #44]	@ (8001c34 <MX_GPIO_Init+0x90>)
 8001c08:	f001 fcea 	bl	80035e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001c0c:	2308      	movs	r3, #8
 8001c0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c10:	2301      	movs	r3, #1
 8001c12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001c1c:	f107 030c 	add.w	r3, r7, #12
 8001c20:	4619      	mov	r1, r3
 8001c22:	4804      	ldr	r0, [pc, #16]	@ (8001c34 <MX_GPIO_Init+0x90>)
 8001c24:	f001 fb6a 	bl	80032fc <HAL_GPIO_Init>

}
 8001c28:	bf00      	nop
 8001c2a:	3720      	adds	r7, #32
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40021000 	.word	0x40021000
 8001c34:	48000400 	.word	0x48000400

08001c38 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cac <MX_I2C1_Init+0x74>)
 8001c3e:	4a1c      	ldr	r2, [pc, #112]	@ (8001cb0 <MX_I2C1_Init+0x78>)
 8001c40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0060112F;
 8001c42:	4b1a      	ldr	r3, [pc, #104]	@ (8001cac <MX_I2C1_Init+0x74>)
 8001c44:	4a1b      	ldr	r2, [pc, #108]	@ (8001cb4 <MX_I2C1_Init+0x7c>)
 8001c46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c48:	4b18      	ldr	r3, [pc, #96]	@ (8001cac <MX_I2C1_Init+0x74>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c4e:	4b17      	ldr	r3, [pc, #92]	@ (8001cac <MX_I2C1_Init+0x74>)
 8001c50:	2201      	movs	r2, #1
 8001c52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c54:	4b15      	ldr	r3, [pc, #84]	@ (8001cac <MX_I2C1_Init+0x74>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c5a:	4b14      	ldr	r3, [pc, #80]	@ (8001cac <MX_I2C1_Init+0x74>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c60:	4b12      	ldr	r3, [pc, #72]	@ (8001cac <MX_I2C1_Init+0x74>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c66:	4b11      	ldr	r3, [pc, #68]	@ (8001cac <MX_I2C1_Init+0x74>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001cac <MX_I2C1_Init+0x74>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c72:	480e      	ldr	r0, [pc, #56]	@ (8001cac <MX_I2C1_Init+0x74>)
 8001c74:	f001 fccc 	bl	8003610 <HAL_I2C_Init>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001c7e:	f000 fbeb 	bl	8002458 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c82:	2100      	movs	r1, #0
 8001c84:	4809      	ldr	r0, [pc, #36]	@ (8001cac <MX_I2C1_Init+0x74>)
 8001c86:	f002 fa13 	bl	80040b0 <HAL_I2CEx_ConfigAnalogFilter>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001c90:	f000 fbe2 	bl	8002458 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c94:	2100      	movs	r1, #0
 8001c96:	4805      	ldr	r0, [pc, #20]	@ (8001cac <MX_I2C1_Init+0x74>)
 8001c98:	f002 fa55 	bl	8004146 <HAL_I2CEx_ConfigDigitalFilter>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001ca2:	f000 fbd9 	bl	8002458 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000430 	.word	0x20000430
 8001cb0:	40005400 	.word	0x40005400
 8001cb4:	0060112f 	.word	0x0060112f

08001cb8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b096      	sub	sp, #88	@ 0x58
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]
 8001cce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cd0:	f107 0310 	add.w	r3, r7, #16
 8001cd4:	2234      	movs	r2, #52	@ 0x34
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f005 fc7f 	bl	80075dc <memset>
  if(i2cHandle->Instance==I2C1)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a1f      	ldr	r2, [pc, #124]	@ (8001d60 <HAL_I2C_MspInit+0xa8>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d137      	bne.n	8001d58 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ce8:	2340      	movs	r3, #64	@ 0x40
 8001cea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001cec:	2300      	movs	r3, #0
 8001cee:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cf0:	f107 0310 	add.w	r3, r7, #16
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f003 f96d 	bl	8004fd4 <HAL_RCCEx_PeriphCLKConfig>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001d00:	f000 fbaa 	bl	8002458 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d04:	4b17      	ldr	r3, [pc, #92]	@ (8001d64 <HAL_I2C_MspInit+0xac>)
 8001d06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d08:	4a16      	ldr	r2, [pc, #88]	@ (8001d64 <HAL_I2C_MspInit+0xac>)
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d10:	4b14      	ldr	r3, [pc, #80]	@ (8001d64 <HAL_I2C_MspInit+0xac>)
 8001d12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d1c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001d20:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d22:	2312      	movs	r3, #18
 8001d24:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d2e:	2304      	movs	r3, #4
 8001d30:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d32:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001d36:	4619      	mov	r1, r3
 8001d38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d3c:	f001 fade 	bl	80032fc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d40:	4b08      	ldr	r3, [pc, #32]	@ (8001d64 <HAL_I2C_MspInit+0xac>)
 8001d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d44:	4a07      	ldr	r2, [pc, #28]	@ (8001d64 <HAL_I2C_MspInit+0xac>)
 8001d46:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d4c:	4b05      	ldr	r3, [pc, #20]	@ (8001d64 <HAL_I2C_MspInit+0xac>)
 8001d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001d58:	bf00      	nop
 8001d5a:	3758      	adds	r7, #88	@ 0x58
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40005400 	.word	0x40005400
 8001d64:	40021000 	.word	0x40021000

08001d68 <KalmanFilter_Init>:
 *  Created on: May 27, 2024
 *      Author: erikl
 */
#include "kalman.h"

void KalmanFilter_Init(KalmanFilter* filter, float Q, float R, float initial_P, float initial_X_hat) {
 8001d68:	b480      	push	{r7}
 8001d6a:	b087      	sub	sp, #28
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6178      	str	r0, [r7, #20]
 8001d70:	ed87 0a04 	vstr	s0, [r7, #16]
 8001d74:	edc7 0a03 	vstr	s1, [r7, #12]
 8001d78:	ed87 1a02 	vstr	s2, [r7, #8]
 8001d7c:	edc7 1a01 	vstr	s3, [r7, #4]
    filter->Q = Q;
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	601a      	str	r2, [r3, #0]
    filter->R = R;
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	605a      	str	r2, [r3, #4]
    filter->P = initial_P;
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	609a      	str	r2, [r3, #8]
    filter->X_hat = initial_X_hat;
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	611a      	str	r2, [r3, #16]
}
 8001d98:	bf00      	nop
 8001d9a:	371c      	adds	r7, #28
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <KalmanFilter_Update>:

float KalmanFilter_Update(KalmanFilter* filter, float measurement) {
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	ed87 0a00 	vstr	s0, [r7]
    // Prediction update
    filter->P = filter->P + filter->Q;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	ed93 7a02 	vldr	s14, [r3, #8]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	edd3 7a00 	vldr	s15, [r3]
 8001dbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	edc3 7a02 	vstr	s15, [r3, #8]
    // Measurement update
    filter->K = filter->P / (filter->P + filter->R);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	edd3 6a02 	vldr	s13, [r3, #8]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	ed93 7a02 	vldr	s14, [r3, #8]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001dd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ddc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	edc3 7a03 	vstr	s15, [r3, #12]
    filter->X_hat = filter->X_hat + filter->K * (measurement - filter->X_hat);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	ed93 7a04 	vldr	s14, [r3, #16]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	edd3 6a03 	vldr	s13, [r3, #12]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001df8:	ed97 6a00 	vldr	s12, [r7]
 8001dfc:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	edc3 7a04 	vstr	s15, [r3, #16]
    filter->P = (1 - filter->K) * filter->P;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e14:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e18:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	edc3 7a02 	vstr	s15, [r3, #8]

    return filter->X_hat;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	ee07 3a90 	vmov	s15, r3
}
 8001e34:	eeb0 0a67 	vmov.f32	s0, s15
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <KalmanFilter_PreInitialize>:

void KalmanFilter_PreInitialize(KalmanFilter* filter, float (*readSensorDataFunc)(void)) {
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b084      	sub	sp, #16
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
 8001e4a:	6039      	str	r1, [r7, #0]
    float sum = 0.0;
 8001e4c:	f04f 0300 	mov.w	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < 3; i++) {
 8001e52:	2300      	movs	r3, #0
 8001e54:	60bb      	str	r3, [r7, #8]
 8001e56:	e00f      	b.n	8001e78 <KalmanFilter_PreInitialize+0x36>
        sum += readSensorDataFunc();
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	4798      	blx	r3
 8001e5c:	eeb0 7a40 	vmov.f32	s14, s0
 8001e60:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e68:	edc7 7a03 	vstr	s15, [r7, #12]
        HAL_Delay(10); // Delay
 8001e6c:	200a      	movs	r0, #10
 8001e6e:	f000 fe99 	bl	8002ba4 <HAL_Delay>
    for (int i = 0; i < 3; i++) {
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	3301      	adds	r3, #1
 8001e76:	60bb      	str	r3, [r7, #8]
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	ddec      	ble.n	8001e58 <KalmanFilter_PreInitialize+0x16>
    }
    filter->X_hat = sum / 3;
 8001e7e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e82:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8001e86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8001e90:	bf00      	nop
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
    // Ändere huart2 auf den gewünschten UART-Handle
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001ea0:	1d39      	adds	r1, r7, #4
 8001ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	4803      	ldr	r0, [pc, #12]	@ (8001eb8 <__io_putchar+0x20>)
 8001eaa:	f003 fa77 	bl	800539c <HAL_UART_Transmit>
    return ch;
 8001eae:	687b      	ldr	r3, [r7, #4]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	20000914 	.word	0x20000914

08001ebc <Start_UART_DMA.0>:
  HP20x_Init();
  SEN5X_Init();
  SHT4X_Init();
  INA3221_Init(&hi2c1);

  void Start_UART_DMA(void) {
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	f8c7 c004 	str.w	ip, [r7, #4]
      // UART1 DMA RX starten
	  HAL_UART_Receive_DMA(&huart1, lora_rx_buffer, LORA_BUFFER_SIZE);
 8001ec6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001eca:	490f      	ldr	r1, [pc, #60]	@ (8001f08 <Start_UART_DMA.0+0x4c>)
 8001ecc:	480f      	ldr	r0, [pc, #60]	@ (8001f0c <Start_UART_DMA.0+0x50>)
 8001ece:	f003 faef 	bl	80054b0 <HAL_UART_Receive_DMA>


      // UART2 DMA RX starten
      HAL_UART_Receive_DMA(&huart2, uart2_rx_buffer, UART2_RX_BUFFER_SIZE);
 8001ed2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ed6:	490e      	ldr	r1, [pc, #56]	@ (8001f10 <Start_UART_DMA.0+0x54>)
 8001ed8:	480e      	ldr	r0, [pc, #56]	@ (8001f14 <Start_UART_DMA.0+0x58>)
 8001eda:	f003 fae9 	bl	80054b0 <HAL_UART_Receive_DMA>

      // IDLE Interrupt für UART1 und UART2 aktivieren
      __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8001ede:	4b0b      	ldr	r3, [pc, #44]	@ (8001f0c <Start_UART_DMA.0+0x50>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	4b09      	ldr	r3, [pc, #36]	@ (8001f0c <Start_UART_DMA.0+0x50>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f042 0210 	orr.w	r2, r2, #16
 8001eec:	601a      	str	r2, [r3, #0]
      __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 8001eee:	4b09      	ldr	r3, [pc, #36]	@ (8001f14 <Start_UART_DMA.0+0x58>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	4b07      	ldr	r3, [pc, #28]	@ (8001f14 <Start_UART_DMA.0+0x58>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f042 0210 	orr.w	r2, r2, #16
 8001efc:	601a      	str	r2, [r3, #0]
  }
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20000230 	.word	0x20000230
 8001f0c:	2000088c 	.word	0x2000088c
 8001f10:	20000684 	.word	0x20000684
 8001f14:	20000914 	.word	0x20000914

08001f18 <main>:
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
int main(void)
 8001f1e:	f107 0310 	add.w	r3, r7, #16
 8001f22:	607b      	str	r3, [r7, #4]
  HAL_Init();
 8001f24:	f000 fdc9 	bl	8002aba <HAL_Init>
  SystemClock_Config();
 8001f28:	f000 f84e 	bl	8001fc8 <SystemClock_Config>
  MX_GPIO_Init();
 8001f2c:	f7ff fe3a 	bl	8001ba4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f30:	f7ff fe12 	bl	8001b58 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001f34:	f000 fc64 	bl	8002800 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001f38:	f7ff fe7e 	bl	8001c38 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001f3c:	f000 fc30 	bl	80027a0 <MX_USART1_UART_Init>
  HP20x_Init();
 8001f40:	f7ff f83c 	bl	8000fbc <HP20x_Init>
  SEN5X_Init();
 8001f44:	f7ff fb98 	bl	8001678 <SEN5X_Init>
  SHT4X_Init();
 8001f48:	f7ff fcfe 	bl	8001948 <SHT4X_Init>
  INA3221_Init(&hi2c1);
 8001f4c:	4819      	ldr	r0, [pc, #100]	@ (8001fb4 <main+0x9c>)
 8001f4e:	f7ff f997 	bl	8001280 <INA3221_Init>

  Start_UART_DMA();
 8001f52:	1d3b      	adds	r3, r7, #4
 8001f54:	469c      	mov	ip, r3
 8001f56:	f7ff ffb1 	bl	8001ebc <Start_UART_DMA.0>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Init();
 8001f5a:	f000 fdae 	bl	8002aba <HAL_Init>
  SystemClock_Config();
 8001f5e:	f000 f833 	bl	8001fc8 <SystemClock_Config>
  MX_GPIO_Init();
 8001f62:	f7ff fe1f 	bl	8001ba4 <MX_GPIO_Init>
  MX_USART1_UART_Init(); // UART für LoRa
 8001f66:	f000 fc1b 	bl	80027a0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init(); // UART für Debug-Konsole
 8001f6a:	f000 fc49 	bl	8002800 <MX_USART2_UART_Init>

  // DMA RX starten und IDLE-Interrupt aktivieren
  HAL_UART_Receive_DMA(&huart1, uart1_rx_buffer, UART1_RX_BUFFER_SIZE);
 8001f6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f72:	4911      	ldr	r1, [pc, #68]	@ (8001fb8 <main+0xa0>)
 8001f74:	4811      	ldr	r0, [pc, #68]	@ (8001fbc <main+0xa4>)
 8001f76:	f003 fa9b 	bl	80054b0 <HAL_UART_Receive_DMA>
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8001f7a:	4b10      	ldr	r3, [pc, #64]	@ (8001fbc <main+0xa4>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	4b0e      	ldr	r3, [pc, #56]	@ (8001fbc <main+0xa4>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f042 0210 	orr.w	r2, r2, #16
 8001f88:	601a      	str	r2, [r3, #0]

  // Kommunikationshandler initialisieren
  CommHandler_Init();
 8001f8a:	f7fe ffd5 	bl	8000f38 <CommHandler_Init>

  // Sende ein Beispielkommando an das LoRa-Modul
  LoRa_E5_SetConfiguration("868,SF12,125,12,15,14,ON,OFF,OFF");
 8001f8e:	480c      	ldr	r0, [pc, #48]	@ (8001fc0 <main+0xa8>)
 8001f90:	f7ff fb10 	bl	80015b4 <LoRa_E5_SetConfiguration>
//  printf("Fin\n");

  while (1)
  {

	  SEN5X_StartMeasurement();
 8001f94:	f7ff fb78 	bl	8001688 <SEN5X_StartMeasurement>
	  HAL_Delay(15000);
 8001f98:	f643 2098 	movw	r0, #15000	@ 0x3a98
 8001f9c:	f000 fe02 	bl	8002ba4 <HAL_Delay>
	  ReadAndSendSensorData(&hi2c1);
 8001fa0:	4804      	ldr	r0, [pc, #16]	@ (8001fb4 <main+0x9c>)
 8001fa2:	f000 f8c5 	bl	8002130 <ReadAndSendSensorData>
	  SEN5X_StopMeasurement();
 8001fa6:	f7ff fb85 	bl	80016b4 <SEN5X_StopMeasurement>
	  HAL_Delay(75000);
 8001faa:	4806      	ldr	r0, [pc, #24]	@ (8001fc4 <main+0xac>)
 8001fac:	f000 fdfa 	bl	8002ba4 <HAL_Delay>
  {
 8001fb0:	bf00      	nop
 8001fb2:	e7ef      	b.n	8001f94 <main+0x7c>
 8001fb4:	20000430 	.word	0x20000430
 8001fb8:	20000484 	.word	0x20000484
 8001fbc:	2000088c 	.word	0x2000088c
 8001fc0:	080097fc 	.word	0x080097fc
 8001fc4:	000124f8 	.word	0x000124f8

08001fc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b096      	sub	sp, #88	@ 0x58
 8001fcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fce:	f107 0314 	add.w	r3, r7, #20
 8001fd2:	2244      	movs	r2, #68	@ 0x44
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f005 fb00 	bl	80075dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fdc:	463b      	mov	r3, r7
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	605a      	str	r2, [r3, #4]
 8001fe4:	609a      	str	r2, [r3, #8]
 8001fe6:	60da      	str	r2, [r3, #12]
 8001fe8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001fea:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001fee:	f002 f915 	bl	800421c <HAL_PWREx_ControlVoltageScaling>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001ff8:	f000 fa2e 	bl	8002458 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001ffc:	f002 f8f0 	bl	80041e0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002000:	4b1b      	ldr	r3, [pc, #108]	@ (8002070 <SystemClock_Config+0xa8>)
 8002002:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002006:	4a1a      	ldr	r2, [pc, #104]	@ (8002070 <SystemClock_Config+0xa8>)
 8002008:	f023 0318 	bic.w	r3, r3, #24
 800200c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002010:	2314      	movs	r3, #20
 8002012:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002014:	2301      	movs	r3, #1
 8002016:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002018:	2301      	movs	r3, #1
 800201a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800201c:	2300      	movs	r3, #0
 800201e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8002020:	23a0      	movs	r3, #160	@ 0xa0
 8002022:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002024:	2300      	movs	r3, #0
 8002026:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002028:	f107 0314 	add.w	r3, r7, #20
 800202c:	4618      	mov	r0, r3
 800202e:	f002 f94b 	bl	80042c8 <HAL_RCC_OscConfig>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002038:	f000 fa0e 	bl	8002458 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800203c:	230f      	movs	r3, #15
 800203e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002040:	2300      	movs	r3, #0
 8002042:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002044:	2300      	movs	r3, #0
 8002046:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002048:	2300      	movs	r3, #0
 800204a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800204c:	2300      	movs	r3, #0
 800204e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002050:	463b      	mov	r3, r7
 8002052:	2101      	movs	r1, #1
 8002054:	4618      	mov	r0, r3
 8002056:	f002 fd99 	bl	8004b8c <HAL_RCC_ClockConfig>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002060:	f000 f9fa 	bl	8002458 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002064:	f003 f93c 	bl	80052e0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002068:	bf00      	nop
 800206a:	3758      	adds	r7, #88	@ 0x58
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40021000 	.word	0x40021000

08002074 <HandleUART2Data>:
          printf("UART1 received: %c\n", buffer[i]); // Ausgabe der empfangenen Daten
      }
  }

  // Verarbeitung von Daten, die über UART2 empfangen wurden
  void HandleUART2Data(uint8_t *buffer, uint16_t length) {
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	807b      	strh	r3, [r7, #2]
      static uint16_t last_position = 0;
      uint16_t current_position = UART2_RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(huart2.hdmarx);
 8002080:	4b28      	ldr	r3, [pc, #160]	@ (8002124 <HandleUART2Data+0xb0>)
 8002082:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	b29b      	uxth	r3, r3
 800208a:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800208e:	813b      	strh	r3, [r7, #8]

      if (current_position != last_position) {
 8002090:	4b25      	ldr	r3, [pc, #148]	@ (8002128 <HandleUART2Data+0xb4>)
 8002092:	881b      	ldrh	r3, [r3, #0]
 8002094:	893a      	ldrh	r2, [r7, #8]
 8002096:	429a      	cmp	r2, r3
 8002098:	d040      	beq.n	800211c <HandleUART2Data+0xa8>
          if (current_position > last_position) {
 800209a:	4b23      	ldr	r3, [pc, #140]	@ (8002128 <HandleUART2Data+0xb4>)
 800209c:	881b      	ldrh	r3, [r3, #0]
 800209e:	893a      	ldrh	r2, [r7, #8]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d913      	bls.n	80020cc <HandleUART2Data+0x58>
              // Normale Verarbeitung, wenn der Puffer nicht umschlägt
              for (uint16_t i = last_position; i < current_position; i++) {
 80020a4:	4b20      	ldr	r3, [pc, #128]	@ (8002128 <HandleUART2Data+0xb4>)
 80020a6:	881b      	ldrh	r3, [r3, #0]
 80020a8:	81fb      	strh	r3, [r7, #14]
 80020aa:	e00a      	b.n	80020c2 <HandleUART2Data+0x4e>
                  printf("UART2: %c\n", buffer[i]);
 80020ac:	89fb      	ldrh	r3, [r7, #14]
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	4413      	add	r3, r2
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	4619      	mov	r1, r3
 80020b6:	481d      	ldr	r0, [pc, #116]	@ (800212c <HandleUART2Data+0xb8>)
 80020b8:	f005 f914 	bl	80072e4 <iprintf>
              for (uint16_t i = last_position; i < current_position; i++) {
 80020bc:	89fb      	ldrh	r3, [r7, #14]
 80020be:	3301      	adds	r3, #1
 80020c0:	81fb      	strh	r3, [r7, #14]
 80020c2:	89fa      	ldrh	r2, [r7, #14]
 80020c4:	893b      	ldrh	r3, [r7, #8]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d3f0      	bcc.n	80020ac <HandleUART2Data+0x38>
 80020ca:	e024      	b.n	8002116 <HandleUART2Data+0xa2>
              }
          } else {
              // Puffer schlägt um (Wraparound)
              for (uint16_t i = last_position; i < UART2_RX_BUFFER_SIZE; i++) {
 80020cc:	4b16      	ldr	r3, [pc, #88]	@ (8002128 <HandleUART2Data+0xb4>)
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	81bb      	strh	r3, [r7, #12]
 80020d2:	e00a      	b.n	80020ea <HandleUART2Data+0x76>
                  printf("UART2: %c\n", buffer[i]);
 80020d4:	89bb      	ldrh	r3, [r7, #12]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	4413      	add	r3, r2
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	4619      	mov	r1, r3
 80020de:	4813      	ldr	r0, [pc, #76]	@ (800212c <HandleUART2Data+0xb8>)
 80020e0:	f005 f900 	bl	80072e4 <iprintf>
              for (uint16_t i = last_position; i < UART2_RX_BUFFER_SIZE; i++) {
 80020e4:	89bb      	ldrh	r3, [r7, #12]
 80020e6:	3301      	adds	r3, #1
 80020e8:	81bb      	strh	r3, [r7, #12]
 80020ea:	89bb      	ldrh	r3, [r7, #12]
 80020ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020f0:	d3f0      	bcc.n	80020d4 <HandleUART2Data+0x60>
              }
              for (uint16_t i = 0; i < current_position; i++) {
 80020f2:	2300      	movs	r3, #0
 80020f4:	817b      	strh	r3, [r7, #10]
 80020f6:	e00a      	b.n	800210e <HandleUART2Data+0x9a>
                  printf("UART2: %c\n", buffer[i]);
 80020f8:	897b      	ldrh	r3, [r7, #10]
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	4413      	add	r3, r2
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	4619      	mov	r1, r3
 8002102:	480a      	ldr	r0, [pc, #40]	@ (800212c <HandleUART2Data+0xb8>)
 8002104:	f005 f8ee 	bl	80072e4 <iprintf>
              for (uint16_t i = 0; i < current_position; i++) {
 8002108:	897b      	ldrh	r3, [r7, #10]
 800210a:	3301      	adds	r3, #1
 800210c:	817b      	strh	r3, [r7, #10]
 800210e:	897a      	ldrh	r2, [r7, #10]
 8002110:	893b      	ldrh	r3, [r7, #8]
 8002112:	429a      	cmp	r2, r3
 8002114:	d3f0      	bcc.n	80020f8 <HandleUART2Data+0x84>
              }
          }

          // Aktualisiere die letzte Position
          last_position = current_position;
 8002116:	4a04      	ldr	r2, [pc, #16]	@ (8002128 <HandleUART2Data+0xb4>)
 8002118:	893b      	ldrh	r3, [r7, #8]
 800211a:	8013      	strh	r3, [r2, #0]
      }
  }
 800211c:	bf00      	nop
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	20000914 	.word	0x20000914
 8002128:	20000884 	.word	0x20000884
 800212c:	0800982c 	.word	0x0800982c

08002130 <ReadAndSendSensorData>:



  void ReadAndSendSensorData(I2C_HandleTypeDef *hi2c) {
 8002130:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002134:	f5ad 7d5a 	sub.w	sp, sp, #872	@ 0x368
 8002138:	af26      	add	r7, sp, #152	@ 0x98
 800213a:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 800213e:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8002142:	6018      	str	r0, [r3, #0]
      // Sensorwerte
      float hp20x_temp = 0, hp20x_press = 0, hp20x_alt = 0;
 8002144:	f04f 0300 	mov.w	r3, #0
 8002148:	f8c7 32c8 	str.w	r3, [r7, #712]	@ 0x2c8
 800214c:	f04f 0300 	mov.w	r3, #0
 8002150:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
 8002154:	f04f 0300 	mov.w	r3, #0
 8002158:	f8c7 32c0 	str.w	r3, [r7, #704]	@ 0x2c0
      float sen5X_pm1p0 = 0, sen5X_pm2p5 = 0, sen5X_pm4p0 = 0, sen5X_pm10 = 0;
 800215c:	f04f 0300 	mov.w	r3, #0
 8002160:	f8c7 32bc 	str.w	r3, [r7, #700]	@ 0x2bc
 8002164:	f04f 0300 	mov.w	r3, #0
 8002168:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 800216c:	f04f 0300 	mov.w	r3, #0
 8002170:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8002174:	f04f 0300 	mov.w	r3, #0
 8002178:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
      float sen5X_humidity = 0, sen5X_temp = 0, sen5X_voc = 0, sen5X_nox = 0;
 800217c:	f04f 0300 	mov.w	r3, #0
 8002180:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8002184:	f04f 0300 	mov.w	r3, #0
 8002188:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 800218c:	f04f 0300 	mov.w	r3, #0
 8002190:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 8002194:	f04f 0300 	mov.w	r3, #0
 8002198:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
      float sht4X_temp = 0, sht4X_humidity = 0;
 800219c:	f04f 0300 	mov.w	r3, #0
 80021a0:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 80021a4:	f04f 0300 	mov.w	r3, #0
 80021a8:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
      float bus_voltages[3] = {0}, currents[3] = {0};
 80021ac:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	609a      	str	r2, [r3, #8]

      // Sensoren auslesen
      HP20x_ReadAllMeasuredValues(&hp20x_temp, &hp20x_press, &hp20x_alt);
 80021c4:	f507 7230 	add.w	r2, r7, #704	@ 0x2c0
 80021c8:	f507 7131 	add.w	r1, r7, #708	@ 0x2c4
 80021cc:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe ffd3 	bl	800117c <HP20x_ReadAllMeasuredValues>
      SEN5X_ReadAllMeasuredValues(&sen5X_pm1p0, &sen5X_pm2p5, &sen5X_pm4p0, &sen5X_pm10,
 80021d6:	f507 742c 	add.w	r4, r7, #688	@ 0x2b0
 80021da:	f507 722d 	add.w	r2, r7, #692	@ 0x2b4
 80021de:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 80021e2:	f507 702f 	add.w	r0, r7, #700	@ 0x2bc
 80021e6:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 80021ea:	9303      	str	r3, [sp, #12]
 80021ec:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 80021f0:	9302      	str	r3, [sp, #8]
 80021f2:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 80021f6:	9301      	str	r3, [sp, #4]
 80021f8:	f507 732b 	add.w	r3, r7, #684	@ 0x2ac
 80021fc:	9300      	str	r3, [sp, #0]
 80021fe:	4623      	mov	r3, r4
 8002200:	f7ff fa6e 	bl	80016e0 <SEN5X_ReadAllMeasuredValues>
                                  &sen5X_humidity, &sen5X_temp, &sen5X_voc, &sen5X_nox);
      SHT4X_MeasureHighPrecision(&sht4X_temp, &sht4X_humidity);
 8002204:	f507 7226 	add.w	r2, r7, #664	@ 0x298
 8002208:	f507 7327 	add.w	r3, r7, #668	@ 0x29c
 800220c:	4611      	mov	r1, r2
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff fc5e 	bl	8001ad0 <SHT4X_MeasureHighPrecision>

      // INA3221 auslesen
      if (INA3221_ReadAll(&hi2c1, shunt_resistance, bus_voltages, currents) != HAL_OK) {
 8002214:	4b8b      	ldr	r3, [pc, #556]	@ (8002444 <ReadAndSendSensorData+0x314>)
 8002216:	edd3 7a00 	vldr	s15, [r3]
 800221a:	f507 7220 	add.w	r2, r7, #640	@ 0x280
 800221e:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8002222:	4619      	mov	r1, r3
 8002224:	eeb0 0a67 	vmov.f32	s0, s15
 8002228:	4887      	ldr	r0, [pc, #540]	@ (8002448 <ReadAndSendSensorData+0x318>)
 800222a:	f7ff f8b5 	bl	8001398 <INA3221_ReadAll>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d022      	beq.n	800227a <ReadAndSendSensorData+0x14a>
          // Fehler beim Auslesen der INA3221-Daten
          for (int i = 0; i < 3; i++) {
 8002234:	2300      	movs	r3, #0
 8002236:	f8c7 32cc 	str.w	r3, [r7, #716]	@ 0x2cc
 800223a:	e01a      	b.n	8002272 <ReadAndSendSensorData+0x142>
              bus_voltages[i] = -1.0; // Fehlerwert
 800223c:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002246:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800224a:	4413      	add	r3, r2
 800224c:	3b44      	subs	r3, #68	@ 0x44
 800224e:	4a7f      	ldr	r2, [pc, #508]	@ (800244c <ReadAndSendSensorData+0x31c>)
 8002250:	601a      	str	r2, [r3, #0]
              currents[i] = -1.0;
 8002252:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800225c:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8002260:	4413      	add	r3, r2
 8002262:	3b50      	subs	r3, #80	@ 0x50
 8002264:	4a79      	ldr	r2, [pc, #484]	@ (800244c <ReadAndSendSensorData+0x31c>)
 8002266:	601a      	str	r2, [r3, #0]
          for (int i = 0; i < 3; i++) {
 8002268:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 800226c:	3301      	adds	r3, #1
 800226e:	f8c7 32cc 	str.w	r3, [r7, #716]	@ 0x2cc
 8002272:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 8002276:	2b02      	cmp	r3, #2
 8002278:	dde0      	ble.n	800223c <ReadAndSendSensorData+0x10c>
          }
      }

      HP20x_IIC_WriteCmd(HP20X_CMD_SOFT_RST); // Reset command can be used to power off HP206C
 800227a:	2006      	movs	r0, #6
 800227c:	f7fe fe62 	bl	8000f44 <HP20x_IIC_WriteCmd>

      // Nachricht formatieren
      char short_msg[SHORT_MSG_SIZE];
      snprintf(short_msg, sizeof(short_msg),
 8002280:	f8d7 32c8 	ldr.w	r3, [r7, #712]	@ 0x2c8
 8002284:	4618      	mov	r0, r3
 8002286:	f7fe f95f 	bl	8000548 <__aeabi_f2d>
 800228a:	e9c7 011c 	strd	r0, r1, [r7, #112]	@ 0x70
 800228e:	f8d7 32c4 	ldr.w	r3, [r7, #708]	@ 0x2c4
 8002292:	4618      	mov	r0, r3
 8002294:	f7fe f958 	bl	8000548 <__aeabi_f2d>
 8002298:	e9c7 011a 	strd	r0, r1, [r7, #104]	@ 0x68
 800229c:	f8d7 32c0 	ldr.w	r3, [r7, #704]	@ 0x2c0
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7fe f951 	bl	8000548 <__aeabi_f2d>
 80022a6:	e9c7 0118 	strd	r0, r1, [r7, #96]	@ 0x60
 80022aa:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7fe f94a 	bl	8000548 <__aeabi_f2d>
 80022b4:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58
 80022b8:	f8d7 32b8 	ldr.w	r3, [r7, #696]	@ 0x2b8
 80022bc:	4618      	mov	r0, r3
 80022be:	f7fe f943 	bl	8000548 <__aeabi_f2d>
 80022c2:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
 80022c6:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7fe f93c 	bl	8000548 <__aeabi_f2d>
 80022d0:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
 80022d4:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 80022d8:	4618      	mov	r0, r3
 80022da:	f7fe f935 	bl	8000548 <__aeabi_f2d>
 80022de:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
 80022e2:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe f92e 	bl	8000548 <__aeabi_f2d>
 80022ec:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 80022f0:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7fe f927 	bl	8000548 <__aeabi_f2d>
 80022fa:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
 80022fe:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8002302:	4618      	mov	r0, r3
 8002304:	f7fe f920 	bl	8000548 <__aeabi_f2d>
 8002308:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 800230c:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8002310:	4618      	mov	r0, r3
 8002312:	f7fe f919 	bl	8000548 <__aeabi_f2d>
 8002316:	e9c7 0108 	strd	r0, r1, [r7, #32]
 800231a:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 800231e:	4618      	mov	r0, r3
 8002320:	f7fe f912 	bl	8000548 <__aeabi_f2d>
 8002324:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002328:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 800232c:	4618      	mov	r0, r3
 800232e:	f7fe f90b 	bl	8000548 <__aeabi_f2d>
 8002332:	e9c7 0104 	strd	r0, r1, [r7, #16]
               "HP20x:%.2f,%.2f,%.2f;SEN55:%.1f,%.1f,%.1f,%.1f,%.2f,%.2f,%.1f,%.1f;SHT45:%.2f,%.2f;INA3221:%.3f,%.3f,%.3f,%.3f,%.3f,%.3f;\r\n",
               hp20x_temp, hp20x_press, hp20x_alt,
               sen5X_pm1p0, sen5X_pm2p5, sen5X_pm4p0, sen5X_pm10,
               sen5X_humidity, sen5X_temp, sen5X_voc, sen5X_nox,
               sht4X_temp, sht4X_humidity,
               bus_voltages[0], currents[0],
 8002336:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
      snprintf(short_msg, sizeof(short_msg),
 800233a:	4618      	mov	r0, r3
 800233c:	f7fe f904 	bl	8000548 <__aeabi_f2d>
 8002340:	e9c7 0102 	strd	r0, r1, [r7, #8]
               bus_voltages[0], currents[0],
 8002344:	f8d7 3280 	ldr.w	r3, [r7, #640]	@ 0x280
      snprintf(short_msg, sizeof(short_msg),
 8002348:	4618      	mov	r0, r3
 800234a:	f7fe f8fd 	bl	8000548 <__aeabi_f2d>
 800234e:	e9c7 0100 	strd	r0, r1, [r7]
               bus_voltages[1], currents[1],
 8002352:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
      snprintf(short_msg, sizeof(short_msg),
 8002356:	4618      	mov	r0, r3
 8002358:	f7fe f8f6 	bl	8000548 <__aeabi_f2d>
 800235c:	4682      	mov	sl, r0
 800235e:	468b      	mov	fp, r1
               bus_voltages[1], currents[1],
 8002360:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
      snprintf(short_msg, sizeof(short_msg),
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe f8ef 	bl	8000548 <__aeabi_f2d>
 800236a:	4680      	mov	r8, r0
 800236c:	4689      	mov	r9, r1
               bus_voltages[2], currents[2]);
 800236e:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
      snprintf(short_msg, sizeof(short_msg),
 8002372:	4618      	mov	r0, r3
 8002374:	f7fe f8e8 	bl	8000548 <__aeabi_f2d>
 8002378:	4604      	mov	r4, r0
 800237a:	460d      	mov	r5, r1
               bus_voltages[2], currents[2]);
 800237c:	f8d7 3288 	ldr.w	r3, [r7, #648]	@ 0x288
      snprintf(short_msg, sizeof(short_msg),
 8002380:	4618      	mov	r0, r3
 8002382:	f7fe f8e1 	bl	8000548 <__aeabi_f2d>
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 800238e:	e9cd 2324 	strd	r2, r3, [sp, #144]	@ 0x90
 8002392:	e9cd 4522 	strd	r4, r5, [sp, #136]	@ 0x88
 8002396:	e9cd 8920 	strd	r8, r9, [sp, #128]	@ 0x80
 800239a:	e9cd ab1e 	strd	sl, fp, [sp, #120]	@ 0x78
 800239e:	ed97 7b00 	vldr	d7, [r7]
 80023a2:	ed8d 7b1c 	vstr	d7, [sp, #112]	@ 0x70
 80023a6:	ed97 7b02 	vldr	d7, [r7, #8]
 80023aa:	ed8d 7b1a 	vstr	d7, [sp, #104]	@ 0x68
 80023ae:	ed97 7b04 	vldr	d7, [r7, #16]
 80023b2:	ed8d 7b18 	vstr	d7, [sp, #96]	@ 0x60
 80023b6:	ed97 7b06 	vldr	d7, [r7, #24]
 80023ba:	ed8d 7b16 	vstr	d7, [sp, #88]	@ 0x58
 80023be:	ed97 7b08 	vldr	d7, [r7, #32]
 80023c2:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 80023c6:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 80023ca:	ed8d 7b12 	vstr	d7, [sp, #72]	@ 0x48
 80023ce:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80023d2:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
 80023d6:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 80023da:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80023de:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 80023e2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80023e6:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 80023ea:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80023ee:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 80023f2:	ed8d 7b08 	vstr	d7, [sp, #32]
 80023f6:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 80023fa:	ed8d 7b06 	vstr	d7, [sp, #24]
 80023fe:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8002402:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002406:	ed97 7b1a 	vldr	d7, [r7, #104]	@ 0x68
 800240a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800240e:	ed97 7b1c 	vldr	d7, [r7, #112]	@ 0x70
 8002412:	ed8d 7b00 	vstr	d7, [sp]
 8002416:	4a0e      	ldr	r2, [pc, #56]	@ (8002450 <ReadAndSendSensorData+0x320>)
 8002418:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800241c:	f004 ffd2 	bl	80073c4 <sniprintf>


      // Nachricht über LoRa senden
      LoRa_E5_SendMessage(short_msg);
 8002420:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff f8db 	bl	80015e0 <LoRa_E5_SendMessage>

      // Debug-Ausgabe
      printf("Original Message: %s\n", short_msg);
 800242a:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800242e:	4619      	mov	r1, r3
 8002430:	4808      	ldr	r0, [pc, #32]	@ (8002454 <ReadAndSendSensorData+0x324>)
 8002432:	f004 ff57 	bl	80072e4 <iprintf>

  }
 8002436:	bf00      	nop
 8002438:	f507 7734 	add.w	r7, r7, #720	@ 0x2d0
 800243c:	46bd      	mov	sp, r7
 800243e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002442:	bf00      	nop
 8002444:	20000000 	.word	0x20000000
 8002448:	20000430 	.word	0x20000430
 800244c:	bf800000 	.word	0xbf800000
 8002450:	0800984c 	.word	0x0800984c
 8002454:	080098c8 	.word	0x080098c8

08002458 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800245c:	b672      	cpsid	i
}
 800245e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002460:	bf00      	nop
 8002462:	e7fd      	b.n	8002460 <Error_Handler+0x8>

08002464 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800246a:	4b0f      	ldr	r3, [pc, #60]	@ (80024a8 <HAL_MspInit+0x44>)
 800246c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800246e:	4a0e      	ldr	r2, [pc, #56]	@ (80024a8 <HAL_MspInit+0x44>)
 8002470:	f043 0301 	orr.w	r3, r3, #1
 8002474:	6613      	str	r3, [r2, #96]	@ 0x60
 8002476:	4b0c      	ldr	r3, [pc, #48]	@ (80024a8 <HAL_MspInit+0x44>)
 8002478:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	607b      	str	r3, [r7, #4]
 8002480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002482:	4b09      	ldr	r3, [pc, #36]	@ (80024a8 <HAL_MspInit+0x44>)
 8002484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002486:	4a08      	ldr	r2, [pc, #32]	@ (80024a8 <HAL_MspInit+0x44>)
 8002488:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800248c:	6593      	str	r3, [r2, #88]	@ 0x58
 800248e:	4b06      	ldr	r3, [pc, #24]	@ (80024a8 <HAL_MspInit+0x44>)
 8002490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002496:	603b      	str	r3, [r7, #0]
 8002498:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	40021000 	.word	0x40021000

080024ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024b0:	bf00      	nop
 80024b2:	e7fd      	b.n	80024b0 <NMI_Handler+0x4>

080024b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024b8:	bf00      	nop
 80024ba:	e7fd      	b.n	80024b8 <HardFault_Handler+0x4>

080024bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024c0:	bf00      	nop
 80024c2:	e7fd      	b.n	80024c0 <MemManage_Handler+0x4>

080024c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024c8:	bf00      	nop
 80024ca:	e7fd      	b.n	80024c8 <BusFault_Handler+0x4>

080024cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024d0:	bf00      	nop
 80024d2:	e7fd      	b.n	80024d0 <UsageFault_Handler+0x4>

080024d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024d8:	bf00      	nop
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024e2:	b480      	push	{r7}
 80024e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024e6:	bf00      	nop
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024f4:	bf00      	nop
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002502:	f000 fb2f 	bl	8002b64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
	...

0800250c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002510:	4802      	ldr	r0, [pc, #8]	@ (800251c <DMA1_Channel5_IRQHandler+0x10>)
 8002512:	f000 fe14 	bl	800313e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	2000099c 	.word	0x2000099c

08002520 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002524:	4802      	ldr	r0, [pc, #8]	@ (8002530 <DMA1_Channel6_IRQHandler+0x10>)
 8002526:	f000 fe0a 	bl	800313e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	200009e4 	.word	0x200009e4

08002534 <USART1_IRQHandler>:

/* USER CODE BEGIN 1 */
void USART1_IRQHandler(void) {
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
    if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)) {
 800253a:	4b14      	ldr	r3, [pc, #80]	@ (800258c <USART1_IRQHandler+0x58>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	f003 0310 	and.w	r3, r3, #16
 8002544:	2b10      	cmp	r3, #16
 8002546:	d11a      	bne.n	800257e <USART1_IRQHandler+0x4a>
        __HAL_UART_CLEAR_IDLEFLAG(&huart1); // Lösche das IDLE-Flag
 8002548:	4b10      	ldr	r3, [pc, #64]	@ (800258c <USART1_IRQHandler+0x58>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2210      	movs	r2, #16
 800254e:	621a      	str	r2, [r3, #32]

        // Berechne die empfangene Datenlänge
        uint16_t received_length = LORA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(huart1.hdmarx);
 8002550:	4b0e      	ldr	r3, [pc, #56]	@ (800258c <USART1_IRQHandler+0x58>)
 8002552:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	b29b      	uxth	r3, r3
 800255a:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800255e:	80fb      	strh	r3, [r7, #6]

        // Verarbeite die empfangenen Daten
        if (received_length > 0) {
 8002560:	88fb      	ldrh	r3, [r7, #6]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d005      	beq.n	8002572 <USART1_IRQHandler+0x3e>
            printf("LoRa E5: DMA RX Complete: %.*s\n", received_length, lora_rx_buffer);
 8002566:	88fb      	ldrh	r3, [r7, #6]
 8002568:	4a09      	ldr	r2, [pc, #36]	@ (8002590 <USART1_IRQHandler+0x5c>)
 800256a:	4619      	mov	r1, r3
 800256c:	4809      	ldr	r0, [pc, #36]	@ (8002594 <USART1_IRQHandler+0x60>)
 800256e:	f004 feb9 	bl	80072e4 <iprintf>
            // Optional: Verarbeite die Daten weiter
            // LoRa_E5_ProcessResponse(lora_rx_buffer, received_length);
        }

        // Optional: Puffer zurücksetzen
        memset(lora_rx_buffer, 0, LORA_BUFFER_SIZE);
 8002572:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002576:	2100      	movs	r1, #0
 8002578:	4805      	ldr	r0, [pc, #20]	@ (8002590 <USART1_IRQHandler+0x5c>)
 800257a:	f005 f82f 	bl	80075dc <memset>
    }

    HAL_UART_IRQHandler(&huart1);
 800257e:	4803      	ldr	r0, [pc, #12]	@ (800258c <USART1_IRQHandler+0x58>)
 8002580:	f002 ffe2 	bl	8005548 <HAL_UART_IRQHandler>
}
 8002584:	bf00      	nop
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	2000088c 	.word	0x2000088c
 8002590:	20000230 	.word	0x20000230
 8002594:	080098e0 	.word	0x080098e0

08002598 <USART2_IRQHandler>:


void USART2_IRQHandler(void) {
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
    if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE)) {
 800259e:	4b12      	ldr	r3, [pc, #72]	@ (80025e8 <USART2_IRQHandler+0x50>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	69db      	ldr	r3, [r3, #28]
 80025a4:	f003 0310 	and.w	r3, r3, #16
 80025a8:	2b10      	cmp	r3, #16
 80025aa:	d115      	bne.n	80025d8 <USART2_IRQHandler+0x40>
        __HAL_UART_CLEAR_IDLEFLAG(&huart2);
 80025ac:	4b0e      	ldr	r3, [pc, #56]	@ (80025e8 <USART2_IRQHandler+0x50>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2210      	movs	r2, #16
 80025b2:	621a      	str	r2, [r3, #32]

        uint16_t received_length = UART2_RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(huart2.hdmarx);
 80025b4:	4b0c      	ldr	r3, [pc, #48]	@ (80025e8 <USART2_IRQHandler+0x50>)
 80025b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	b29b      	uxth	r3, r3
 80025be:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80025c2:	80fb      	strh	r3, [r7, #6]

        // Daten verarbeiten
        HandleUART2Data(uart2_rx_buffer, received_length);
 80025c4:	88fb      	ldrh	r3, [r7, #6]
 80025c6:	4619      	mov	r1, r3
 80025c8:	4808      	ldr	r0, [pc, #32]	@ (80025ec <USART2_IRQHandler+0x54>)
 80025ca:	f7ff fd53 	bl	8002074 <HandleUART2Data>

        // Optional: Puffer zurücksetzen
        memset(uart2_rx_buffer, 0, UART2_RX_BUFFER_SIZE);
 80025ce:	2280      	movs	r2, #128	@ 0x80
 80025d0:	2100      	movs	r1, #0
 80025d2:	4806      	ldr	r0, [pc, #24]	@ (80025ec <USART2_IRQHandler+0x54>)
 80025d4:	f005 f802 	bl	80075dc <memset>
    }
    HAL_UART_IRQHandler(&huart2);
 80025d8:	4803      	ldr	r0, [pc, #12]	@ (80025e8 <USART2_IRQHandler+0x50>)
 80025da:	f002 ffb5 	bl	8005548 <HAL_UART_IRQHandler>
}
 80025de:	bf00      	nop
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000914 	.word	0x20000914
 80025ec:	20000684 	.word	0x20000684

080025f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  return 1;
 80025f4:	2301      	movs	r3, #1
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <_kill>:

int _kill(int pid, int sig)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800260a:	f005 f839 	bl	8007680 <__errno>
 800260e:	4603      	mov	r3, r0
 8002610:	2216      	movs	r2, #22
 8002612:	601a      	str	r2, [r3, #0]
  return -1;
 8002614:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002618:	4618      	mov	r0, r3
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <_exit>:

void _exit (int status)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002628:	f04f 31ff 	mov.w	r1, #4294967295
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f7ff ffe7 	bl	8002600 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002632:	bf00      	nop
 8002634:	e7fd      	b.n	8002632 <_exit+0x12>

08002636 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b086      	sub	sp, #24
 800263a:	af00      	add	r7, sp, #0
 800263c:	60f8      	str	r0, [r7, #12]
 800263e:	60b9      	str	r1, [r7, #8]
 8002640:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002642:	2300      	movs	r3, #0
 8002644:	617b      	str	r3, [r7, #20]
 8002646:	e00a      	b.n	800265e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002648:	f3af 8000 	nop.w
 800264c:	4601      	mov	r1, r0
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	1c5a      	adds	r2, r3, #1
 8002652:	60ba      	str	r2, [r7, #8]
 8002654:	b2ca      	uxtb	r2, r1
 8002656:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	3301      	adds	r3, #1
 800265c:	617b      	str	r3, [r7, #20]
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	429a      	cmp	r2, r3
 8002664:	dbf0      	blt.n	8002648 <_read+0x12>
  }

  return len;
 8002666:	687b      	ldr	r3, [r7, #4]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	e009      	b.n	8002696 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	60ba      	str	r2, [r7, #8]
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff fc04 	bl	8001e98 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	3301      	adds	r3, #1
 8002694:	617b      	str	r3, [r7, #20]
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	429a      	cmp	r2, r3
 800269c:	dbf1      	blt.n	8002682 <_write+0x12>
  }
  return len;
 800269e:	687b      	ldr	r3, [r7, #4]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3718      	adds	r7, #24
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <_close>:

int _close(int file)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026d0:	605a      	str	r2, [r3, #4]
  return 0;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <_isatty>:

int _isatty(int file)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026e8:	2301      	movs	r3, #1
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026f6:	b480      	push	{r7}
 80026f8:	b085      	sub	sp, #20
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	60f8      	str	r0, [r7, #12]
 80026fe:	60b9      	str	r1, [r7, #8]
 8002700:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002718:	4a14      	ldr	r2, [pc, #80]	@ (800276c <_sbrk+0x5c>)
 800271a:	4b15      	ldr	r3, [pc, #84]	@ (8002770 <_sbrk+0x60>)
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002724:	4b13      	ldr	r3, [pc, #76]	@ (8002774 <_sbrk+0x64>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d102      	bne.n	8002732 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800272c:	4b11      	ldr	r3, [pc, #68]	@ (8002774 <_sbrk+0x64>)
 800272e:	4a12      	ldr	r2, [pc, #72]	@ (8002778 <_sbrk+0x68>)
 8002730:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002732:	4b10      	ldr	r3, [pc, #64]	@ (8002774 <_sbrk+0x64>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4413      	add	r3, r2
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	429a      	cmp	r2, r3
 800273e:	d207      	bcs.n	8002750 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002740:	f004 ff9e 	bl	8007680 <__errno>
 8002744:	4603      	mov	r3, r0
 8002746:	220c      	movs	r2, #12
 8002748:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800274a:	f04f 33ff 	mov.w	r3, #4294967295
 800274e:	e009      	b.n	8002764 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002750:	4b08      	ldr	r3, [pc, #32]	@ (8002774 <_sbrk+0x64>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002756:	4b07      	ldr	r3, [pc, #28]	@ (8002774 <_sbrk+0x64>)
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4413      	add	r3, r2
 800275e:	4a05      	ldr	r2, [pc, #20]	@ (8002774 <_sbrk+0x64>)
 8002760:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002762:	68fb      	ldr	r3, [r7, #12]
}
 8002764:	4618      	mov	r0, r3
 8002766:	3718      	adds	r7, #24
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	20008000 	.word	0x20008000
 8002770:	00000400 	.word	0x00000400
 8002774:	20000888 	.word	0x20000888
 8002778:	20000b80 	.word	0x20000b80

0800277c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002780:	4b06      	ldr	r3, [pc, #24]	@ (800279c <SystemInit+0x20>)
 8002782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002786:	4a05      	ldr	r2, [pc, #20]	@ (800279c <SystemInit+0x20>)
 8002788:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800278c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002790:	bf00      	nop
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	e000ed00 	.word	0xe000ed00

080027a0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027a4:	4b14      	ldr	r3, [pc, #80]	@ (80027f8 <MX_USART1_UART_Init+0x58>)
 80027a6:	4a15      	ldr	r2, [pc, #84]	@ (80027fc <MX_USART1_UART_Init+0x5c>)
 80027a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80027aa:	4b13      	ldr	r3, [pc, #76]	@ (80027f8 <MX_USART1_UART_Init+0x58>)
 80027ac:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80027b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027b2:	4b11      	ldr	r3, [pc, #68]	@ (80027f8 <MX_USART1_UART_Init+0x58>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027b8:	4b0f      	ldr	r3, [pc, #60]	@ (80027f8 <MX_USART1_UART_Init+0x58>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027be:	4b0e      	ldr	r3, [pc, #56]	@ (80027f8 <MX_USART1_UART_Init+0x58>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027c4:	4b0c      	ldr	r3, [pc, #48]	@ (80027f8 <MX_USART1_UART_Init+0x58>)
 80027c6:	220c      	movs	r2, #12
 80027c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ca:	4b0b      	ldr	r3, [pc, #44]	@ (80027f8 <MX_USART1_UART_Init+0x58>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027d0:	4b09      	ldr	r3, [pc, #36]	@ (80027f8 <MX_USART1_UART_Init+0x58>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027d6:	4b08      	ldr	r3, [pc, #32]	@ (80027f8 <MX_USART1_UART_Init+0x58>)
 80027d8:	2200      	movs	r2, #0
 80027da:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027dc:	4b06      	ldr	r3, [pc, #24]	@ (80027f8 <MX_USART1_UART_Init+0x58>)
 80027de:	2200      	movs	r2, #0
 80027e0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027e2:	4805      	ldr	r0, [pc, #20]	@ (80027f8 <MX_USART1_UART_Init+0x58>)
 80027e4:	f002 fd8c 	bl	8005300 <HAL_UART_Init>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80027ee:	f7ff fe33 	bl	8002458 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027f2:	bf00      	nop
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	2000088c 	.word	0x2000088c
 80027fc:	40013800 	.word	0x40013800

08002800 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002804:	4b14      	ldr	r3, [pc, #80]	@ (8002858 <MX_USART2_UART_Init+0x58>)
 8002806:	4a15      	ldr	r2, [pc, #84]	@ (800285c <MX_USART2_UART_Init+0x5c>)
 8002808:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800280a:	4b13      	ldr	r3, [pc, #76]	@ (8002858 <MX_USART2_UART_Init+0x58>)
 800280c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002810:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002812:	4b11      	ldr	r3, [pc, #68]	@ (8002858 <MX_USART2_UART_Init+0x58>)
 8002814:	2200      	movs	r2, #0
 8002816:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002818:	4b0f      	ldr	r3, [pc, #60]	@ (8002858 <MX_USART2_UART_Init+0x58>)
 800281a:	2200      	movs	r2, #0
 800281c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800281e:	4b0e      	ldr	r3, [pc, #56]	@ (8002858 <MX_USART2_UART_Init+0x58>)
 8002820:	2200      	movs	r2, #0
 8002822:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002824:	4b0c      	ldr	r3, [pc, #48]	@ (8002858 <MX_USART2_UART_Init+0x58>)
 8002826:	220c      	movs	r2, #12
 8002828:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800282a:	4b0b      	ldr	r3, [pc, #44]	@ (8002858 <MX_USART2_UART_Init+0x58>)
 800282c:	2200      	movs	r2, #0
 800282e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002830:	4b09      	ldr	r3, [pc, #36]	@ (8002858 <MX_USART2_UART_Init+0x58>)
 8002832:	2200      	movs	r2, #0
 8002834:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002836:	4b08      	ldr	r3, [pc, #32]	@ (8002858 <MX_USART2_UART_Init+0x58>)
 8002838:	2200      	movs	r2, #0
 800283a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800283c:	4b06      	ldr	r3, [pc, #24]	@ (8002858 <MX_USART2_UART_Init+0x58>)
 800283e:	2200      	movs	r2, #0
 8002840:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002842:	4805      	ldr	r0, [pc, #20]	@ (8002858 <MX_USART2_UART_Init+0x58>)
 8002844:	f002 fd5c 	bl	8005300 <HAL_UART_Init>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800284e:	f7ff fe03 	bl	8002458 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002852:	bf00      	nop
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	20000914 	.word	0x20000914
 800285c:	40004400 	.word	0x40004400

08002860 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b098      	sub	sp, #96	@ 0x60
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002868:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	605a      	str	r2, [r3, #4]
 8002872:	609a      	str	r2, [r3, #8]
 8002874:	60da      	str	r2, [r3, #12]
 8002876:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002878:	f107 0318 	add.w	r3, r7, #24
 800287c:	2234      	movs	r2, #52	@ 0x34
 800287e:	2100      	movs	r1, #0
 8002880:	4618      	mov	r0, r3
 8002882:	f004 feab 	bl	80075dc <memset>
  if(uartHandle->Instance==USART1)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a6f      	ldr	r2, [pc, #444]	@ (8002a48 <HAL_UART_MspInit+0x1e8>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d15f      	bne.n	8002950 <HAL_UART_MspInit+0xf0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002890:	2301      	movs	r3, #1
 8002892:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002894:	2300      	movs	r3, #0
 8002896:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002898:	f107 0318 	add.w	r3, r7, #24
 800289c:	4618      	mov	r0, r3
 800289e:	f002 fb99 	bl	8004fd4 <HAL_RCCEx_PeriphCLKConfig>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80028a8:	f7ff fdd6 	bl	8002458 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028ac:	4b67      	ldr	r3, [pc, #412]	@ (8002a4c <HAL_UART_MspInit+0x1ec>)
 80028ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028b0:	4a66      	ldr	r2, [pc, #408]	@ (8002a4c <HAL_UART_MspInit+0x1ec>)
 80028b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028b6:	6613      	str	r3, [r2, #96]	@ 0x60
 80028b8:	4b64      	ldr	r3, [pc, #400]	@ (8002a4c <HAL_UART_MspInit+0x1ec>)
 80028ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028c0:	617b      	str	r3, [r7, #20]
 80028c2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028c4:	4b61      	ldr	r3, [pc, #388]	@ (8002a4c <HAL_UART_MspInit+0x1ec>)
 80028c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028c8:	4a60      	ldr	r2, [pc, #384]	@ (8002a4c <HAL_UART_MspInit+0x1ec>)
 80028ca:	f043 0302 	orr.w	r3, r3, #2
 80028ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028d0:	4b5e      	ldr	r3, [pc, #376]	@ (8002a4c <HAL_UART_MspInit+0x1ec>)
 80028d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	613b      	str	r3, [r7, #16]
 80028da:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028dc:	23c0      	movs	r3, #192	@ 0xc0
 80028de:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e0:	2302      	movs	r3, #2
 80028e2:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e4:	2300      	movs	r3, #0
 80028e6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028e8:	2303      	movs	r3, #3
 80028ea:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028ec:	2307      	movs	r3, #7
 80028ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028f0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80028f4:	4619      	mov	r1, r3
 80028f6:	4856      	ldr	r0, [pc, #344]	@ (8002a50 <HAL_UART_MspInit+0x1f0>)
 80028f8:	f000 fd00 	bl	80032fc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80028fc:	4b55      	ldr	r3, [pc, #340]	@ (8002a54 <HAL_UART_MspInit+0x1f4>)
 80028fe:	4a56      	ldr	r2, [pc, #344]	@ (8002a58 <HAL_UART_MspInit+0x1f8>)
 8002900:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8002902:	4b54      	ldr	r3, [pc, #336]	@ (8002a54 <HAL_UART_MspInit+0x1f4>)
 8002904:	2202      	movs	r2, #2
 8002906:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002908:	4b52      	ldr	r3, [pc, #328]	@ (8002a54 <HAL_UART_MspInit+0x1f4>)
 800290a:	2200      	movs	r2, #0
 800290c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800290e:	4b51      	ldr	r3, [pc, #324]	@ (8002a54 <HAL_UART_MspInit+0x1f4>)
 8002910:	2200      	movs	r2, #0
 8002912:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002914:	4b4f      	ldr	r3, [pc, #316]	@ (8002a54 <HAL_UART_MspInit+0x1f4>)
 8002916:	2280      	movs	r2, #128	@ 0x80
 8002918:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800291a:	4b4e      	ldr	r3, [pc, #312]	@ (8002a54 <HAL_UART_MspInit+0x1f4>)
 800291c:	2200      	movs	r2, #0
 800291e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002920:	4b4c      	ldr	r3, [pc, #304]	@ (8002a54 <HAL_UART_MspInit+0x1f4>)
 8002922:	2200      	movs	r2, #0
 8002924:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002926:	4b4b      	ldr	r3, [pc, #300]	@ (8002a54 <HAL_UART_MspInit+0x1f4>)
 8002928:	2220      	movs	r2, #32
 800292a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800292c:	4b49      	ldr	r3, [pc, #292]	@ (8002a54 <HAL_UART_MspInit+0x1f4>)
 800292e:	2200      	movs	r2, #0
 8002930:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002932:	4848      	ldr	r0, [pc, #288]	@ (8002a54 <HAL_UART_MspInit+0x1f4>)
 8002934:	f000 fa6c 	bl	8002e10 <HAL_DMA_Init>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 800293e:	f7ff fd8b 	bl	8002458 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a43      	ldr	r2, [pc, #268]	@ (8002a54 <HAL_UART_MspInit+0x1f4>)
 8002946:	675a      	str	r2, [r3, #116]	@ 0x74
 8002948:	4a42      	ldr	r2, [pc, #264]	@ (8002a54 <HAL_UART_MspInit+0x1f4>)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800294e:	e076      	b.n	8002a3e <HAL_UART_MspInit+0x1de>
  else if(uartHandle->Instance==USART2)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a41      	ldr	r2, [pc, #260]	@ (8002a5c <HAL_UART_MspInit+0x1fc>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d171      	bne.n	8002a3e <HAL_UART_MspInit+0x1de>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800295a:	2302      	movs	r3, #2
 800295c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800295e:	2300      	movs	r3, #0
 8002960:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002962:	f107 0318 	add.w	r3, r7, #24
 8002966:	4618      	mov	r0, r3
 8002968:	f002 fb34 	bl	8004fd4 <HAL_RCCEx_PeriphCLKConfig>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <HAL_UART_MspInit+0x116>
      Error_Handler();
 8002972:	f7ff fd71 	bl	8002458 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002976:	4b35      	ldr	r3, [pc, #212]	@ (8002a4c <HAL_UART_MspInit+0x1ec>)
 8002978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800297a:	4a34      	ldr	r2, [pc, #208]	@ (8002a4c <HAL_UART_MspInit+0x1ec>)
 800297c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002980:	6593      	str	r3, [r2, #88]	@ 0x58
 8002982:	4b32      	ldr	r3, [pc, #200]	@ (8002a4c <HAL_UART_MspInit+0x1ec>)
 8002984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800298e:	4b2f      	ldr	r3, [pc, #188]	@ (8002a4c <HAL_UART_MspInit+0x1ec>)
 8002990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002992:	4a2e      	ldr	r2, [pc, #184]	@ (8002a4c <HAL_UART_MspInit+0x1ec>)
 8002994:	f043 0301 	orr.w	r3, r3, #1
 8002998:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800299a:	4b2c      	ldr	r3, [pc, #176]	@ (8002a4c <HAL_UART_MspInit+0x1ec>)
 800299c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	60bb      	str	r3, [r7, #8]
 80029a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80029a6:	2304      	movs	r3, #4
 80029a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029aa:	2302      	movs	r3, #2
 80029ac:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ae:	2300      	movs	r3, #0
 80029b0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029b2:	2303      	movs	r3, #3
 80029b4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029b6:	2307      	movs	r3, #7
 80029b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80029ba:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80029be:	4619      	mov	r1, r3
 80029c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029c4:	f000 fc9a 	bl	80032fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80029c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80029cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ce:	2302      	movs	r3, #2
 80029d0:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d2:	2300      	movs	r3, #0
 80029d4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029d6:	2303      	movs	r3, #3
 80029d8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80029da:	2303      	movs	r3, #3
 80029dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80029de:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80029e2:	4619      	mov	r1, r3
 80029e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029e8:	f000 fc88 	bl	80032fc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80029ec:	4b1c      	ldr	r3, [pc, #112]	@ (8002a60 <HAL_UART_MspInit+0x200>)
 80029ee:	4a1d      	ldr	r2, [pc, #116]	@ (8002a64 <HAL_UART_MspInit+0x204>)
 80029f0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 80029f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002a60 <HAL_UART_MspInit+0x200>)
 80029f4:	2202      	movs	r2, #2
 80029f6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029f8:	4b19      	ldr	r3, [pc, #100]	@ (8002a60 <HAL_UART_MspInit+0x200>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029fe:	4b18      	ldr	r3, [pc, #96]	@ (8002a60 <HAL_UART_MspInit+0x200>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a04:	4b16      	ldr	r3, [pc, #88]	@ (8002a60 <HAL_UART_MspInit+0x200>)
 8002a06:	2280      	movs	r2, #128	@ 0x80
 8002a08:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a0a:	4b15      	ldr	r3, [pc, #84]	@ (8002a60 <HAL_UART_MspInit+0x200>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a10:	4b13      	ldr	r3, [pc, #76]	@ (8002a60 <HAL_UART_MspInit+0x200>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002a16:	4b12      	ldr	r3, [pc, #72]	@ (8002a60 <HAL_UART_MspInit+0x200>)
 8002a18:	2220      	movs	r2, #32
 8002a1a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a1c:	4b10      	ldr	r3, [pc, #64]	@ (8002a60 <HAL_UART_MspInit+0x200>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002a22:	480f      	ldr	r0, [pc, #60]	@ (8002a60 <HAL_UART_MspInit+0x200>)
 8002a24:	f000 f9f4 	bl	8002e10 <HAL_DMA_Init>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <HAL_UART_MspInit+0x1d2>
      Error_Handler();
 8002a2e:	f7ff fd13 	bl	8002458 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a0a      	ldr	r2, [pc, #40]	@ (8002a60 <HAL_UART_MspInit+0x200>)
 8002a36:	675a      	str	r2, [r3, #116]	@ 0x74
 8002a38:	4a09      	ldr	r2, [pc, #36]	@ (8002a60 <HAL_UART_MspInit+0x200>)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8002a3e:	bf00      	nop
 8002a40:	3760      	adds	r7, #96	@ 0x60
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40013800 	.word	0x40013800
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	48000400 	.word	0x48000400
 8002a54:	2000099c 	.word	0x2000099c
 8002a58:	40020058 	.word	0x40020058
 8002a5c:	40004400 	.word	0x40004400
 8002a60:	200009e4 	.word	0x200009e4
 8002a64:	4002006c 	.word	0x4002006c

08002a68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002a68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002aa0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a6c:	f7ff fe86 	bl	800277c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a70:	480c      	ldr	r0, [pc, #48]	@ (8002aa4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a72:	490d      	ldr	r1, [pc, #52]	@ (8002aa8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a74:	4a0d      	ldr	r2, [pc, #52]	@ (8002aac <LoopForever+0xe>)
  movs r3, #0
 8002a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a78:	e002      	b.n	8002a80 <LoopCopyDataInit>

08002a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a7e:	3304      	adds	r3, #4

08002a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a84:	d3f9      	bcc.n	8002a7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a86:	4a0a      	ldr	r2, [pc, #40]	@ (8002ab0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a88:	4c0a      	ldr	r4, [pc, #40]	@ (8002ab4 <LoopForever+0x16>)
  movs r3, #0
 8002a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a8c:	e001      	b.n	8002a92 <LoopFillZerobss>

08002a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a90:	3204      	adds	r2, #4

08002a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a94:	d3fb      	bcc.n	8002a8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a96:	f004 fdf9 	bl	800768c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a9a:	f7ff fa3d 	bl	8001f18 <main>

08002a9e <LoopForever>:

LoopForever:
    b LoopForever
 8002a9e:	e7fe      	b.n	8002a9e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002aa0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002aa8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002aac:	08009cc8 	.word	0x08009cc8
  ldr r2, =_sbss
 8002ab0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002ab4:	20000b7c 	.word	0x20000b7c

08002ab8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ab8:	e7fe      	b.n	8002ab8 <ADC1_2_IRQHandler>

08002aba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b082      	sub	sp, #8
 8002abe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ac4:	2003      	movs	r0, #3
 8002ac6:	f000 f961 	bl	8002d8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002aca:	2000      	movs	r0, #0
 8002acc:	f000 f80e 	bl	8002aec <HAL_InitTick>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d002      	beq.n	8002adc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	71fb      	strb	r3, [r7, #7]
 8002ada:	e001      	b.n	8002ae0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002adc:	f7ff fcc2 	bl	8002464 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ae0:	79fb      	ldrb	r3, [r7, #7]
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
	...

08002aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002af4:	2300      	movs	r3, #0
 8002af6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002af8:	4b17      	ldr	r3, [pc, #92]	@ (8002b58 <HAL_InitTick+0x6c>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d023      	beq.n	8002b48 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002b00:	4b16      	ldr	r3, [pc, #88]	@ (8002b5c <HAL_InitTick+0x70>)
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	4b14      	ldr	r3, [pc, #80]	@ (8002b58 <HAL_InitTick+0x6c>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	4619      	mov	r1, r3
 8002b0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 f96d 	bl	8002df6 <HAL_SYSTICK_Config>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10f      	bne.n	8002b42 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b0f      	cmp	r3, #15
 8002b26:	d809      	bhi.n	8002b3c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b28:	2200      	movs	r2, #0
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b30:	f000 f937 	bl	8002da2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b34:	4a0a      	ldr	r2, [pc, #40]	@ (8002b60 <HAL_InitTick+0x74>)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	e007      	b.n	8002b4c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	73fb      	strb	r3, [r7, #15]
 8002b40:	e004      	b.n	8002b4c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	73fb      	strb	r3, [r7, #15]
 8002b46:	e001      	b.n	8002b4c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	2000000c 	.word	0x2000000c
 8002b5c:	20000004 	.word	0x20000004
 8002b60:	20000008 	.word	0x20000008

08002b64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b68:	4b06      	ldr	r3, [pc, #24]	@ (8002b84 <HAL_IncTick+0x20>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	4b06      	ldr	r3, [pc, #24]	@ (8002b88 <HAL_IncTick+0x24>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4413      	add	r3, r2
 8002b74:	4a04      	ldr	r2, [pc, #16]	@ (8002b88 <HAL_IncTick+0x24>)
 8002b76:	6013      	str	r3, [r2, #0]
}
 8002b78:	bf00      	nop
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	2000000c 	.word	0x2000000c
 8002b88:	20000a2c 	.word	0x20000a2c

08002b8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b90:	4b03      	ldr	r3, [pc, #12]	@ (8002ba0 <HAL_GetTick+0x14>)
 8002b92:	681b      	ldr	r3, [r3, #0]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	20000a2c 	.word	0x20000a2c

08002ba4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bac:	f7ff ffee 	bl	8002b8c <HAL_GetTick>
 8002bb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bbc:	d005      	beq.n	8002bca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8002be8 <HAL_Delay+0x44>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bca:	bf00      	nop
 8002bcc:	f7ff ffde 	bl	8002b8c <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d8f7      	bhi.n	8002bcc <HAL_Delay+0x28>
  {
  }
}
 8002bdc:	bf00      	nop
 8002bde:	bf00      	nop
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	2000000c 	.word	0x2000000c

08002bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8002c30 <__NVIC_SetPriorityGrouping+0x44>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c08:	4013      	ands	r3, r2
 8002c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c1e:	4a04      	ldr	r2, [pc, #16]	@ (8002c30 <__NVIC_SetPriorityGrouping+0x44>)
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	60d3      	str	r3, [r2, #12]
}
 8002c24:	bf00      	nop
 8002c26:	3714      	adds	r7, #20
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	e000ed00 	.word	0xe000ed00

08002c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c38:	4b04      	ldr	r3, [pc, #16]	@ (8002c4c <__NVIC_GetPriorityGrouping+0x18>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	0a1b      	lsrs	r3, r3, #8
 8002c3e:	f003 0307 	and.w	r3, r3, #7
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	e000ed00 	.word	0xe000ed00

08002c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	db0b      	blt.n	8002c7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c62:	79fb      	ldrb	r3, [r7, #7]
 8002c64:	f003 021f 	and.w	r2, r3, #31
 8002c68:	4907      	ldr	r1, [pc, #28]	@ (8002c88 <__NVIC_EnableIRQ+0x38>)
 8002c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6e:	095b      	lsrs	r3, r3, #5
 8002c70:	2001      	movs	r0, #1
 8002c72:	fa00 f202 	lsl.w	r2, r0, r2
 8002c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	e000e100 	.word	0xe000e100

08002c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	6039      	str	r1, [r7, #0]
 8002c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	db0a      	blt.n	8002cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	b2da      	uxtb	r2, r3
 8002ca4:	490c      	ldr	r1, [pc, #48]	@ (8002cd8 <__NVIC_SetPriority+0x4c>)
 8002ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002caa:	0112      	lsls	r2, r2, #4
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	440b      	add	r3, r1
 8002cb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cb4:	e00a      	b.n	8002ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	4908      	ldr	r1, [pc, #32]	@ (8002cdc <__NVIC_SetPriority+0x50>)
 8002cbc:	79fb      	ldrb	r3, [r7, #7]
 8002cbe:	f003 030f 	and.w	r3, r3, #15
 8002cc2:	3b04      	subs	r3, #4
 8002cc4:	0112      	lsls	r2, r2, #4
 8002cc6:	b2d2      	uxtb	r2, r2
 8002cc8:	440b      	add	r3, r1
 8002cca:	761a      	strb	r2, [r3, #24]
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	e000e100 	.word	0xe000e100
 8002cdc:	e000ed00 	.word	0xe000ed00

08002ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b089      	sub	sp, #36	@ 0x24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	f1c3 0307 	rsb	r3, r3, #7
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	bf28      	it	cs
 8002cfe:	2304      	movcs	r3, #4
 8002d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	3304      	adds	r3, #4
 8002d06:	2b06      	cmp	r3, #6
 8002d08:	d902      	bls.n	8002d10 <NVIC_EncodePriority+0x30>
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	3b03      	subs	r3, #3
 8002d0e:	e000      	b.n	8002d12 <NVIC_EncodePriority+0x32>
 8002d10:	2300      	movs	r3, #0
 8002d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d14:	f04f 32ff 	mov.w	r2, #4294967295
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	43da      	mvns	r2, r3
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	401a      	ands	r2, r3
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d28:	f04f 31ff 	mov.w	r1, #4294967295
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d32:	43d9      	mvns	r1, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d38:	4313      	orrs	r3, r2
         );
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3724      	adds	r7, #36	@ 0x24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
	...

08002d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d58:	d301      	bcc.n	8002d5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e00f      	b.n	8002d7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d88 <SysTick_Config+0x40>)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	3b01      	subs	r3, #1
 8002d64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d66:	210f      	movs	r1, #15
 8002d68:	f04f 30ff 	mov.w	r0, #4294967295
 8002d6c:	f7ff ff8e 	bl	8002c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d70:	4b05      	ldr	r3, [pc, #20]	@ (8002d88 <SysTick_Config+0x40>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d76:	4b04      	ldr	r3, [pc, #16]	@ (8002d88 <SysTick_Config+0x40>)
 8002d78:	2207      	movs	r2, #7
 8002d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	e000e010 	.word	0xe000e010

08002d8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f7ff ff29 	bl	8002bec <__NVIC_SetPriorityGrouping>
}
 8002d9a:	bf00      	nop
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b086      	sub	sp, #24
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	4603      	mov	r3, r0
 8002daa:	60b9      	str	r1, [r7, #8]
 8002dac:	607a      	str	r2, [r7, #4]
 8002dae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002db0:	2300      	movs	r3, #0
 8002db2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002db4:	f7ff ff3e 	bl	8002c34 <__NVIC_GetPriorityGrouping>
 8002db8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	68b9      	ldr	r1, [r7, #8]
 8002dbe:	6978      	ldr	r0, [r7, #20]
 8002dc0:	f7ff ff8e 	bl	8002ce0 <NVIC_EncodePriority>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dca:	4611      	mov	r1, r2
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff ff5d 	bl	8002c8c <__NVIC_SetPriority>
}
 8002dd2:	bf00      	nop
 8002dd4:	3718      	adds	r7, #24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b082      	sub	sp, #8
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	4603      	mov	r3, r0
 8002de2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff ff31 	bl	8002c50 <__NVIC_EnableIRQ>
}
 8002dee:	bf00      	nop
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b082      	sub	sp, #8
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7ff ffa2 	bl	8002d48 <SysTick_Config>
 8002e04:	4603      	mov	r3, r0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
	...

08002e10 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e098      	b.n	8002f54 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	461a      	mov	r2, r3
 8002e28:	4b4d      	ldr	r3, [pc, #308]	@ (8002f60 <HAL_DMA_Init+0x150>)
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d80f      	bhi.n	8002e4e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	461a      	mov	r2, r3
 8002e34:	4b4b      	ldr	r3, [pc, #300]	@ (8002f64 <HAL_DMA_Init+0x154>)
 8002e36:	4413      	add	r3, r2
 8002e38:	4a4b      	ldr	r2, [pc, #300]	@ (8002f68 <HAL_DMA_Init+0x158>)
 8002e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3e:	091b      	lsrs	r3, r3, #4
 8002e40:	009a      	lsls	r2, r3, #2
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a48      	ldr	r2, [pc, #288]	@ (8002f6c <HAL_DMA_Init+0x15c>)
 8002e4a:	641a      	str	r2, [r3, #64]	@ 0x40
 8002e4c:	e00e      	b.n	8002e6c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	461a      	mov	r2, r3
 8002e54:	4b46      	ldr	r3, [pc, #280]	@ (8002f70 <HAL_DMA_Init+0x160>)
 8002e56:	4413      	add	r3, r2
 8002e58:	4a43      	ldr	r2, [pc, #268]	@ (8002f68 <HAL_DMA_Init+0x158>)
 8002e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5e:	091b      	lsrs	r3, r3, #4
 8002e60:	009a      	lsls	r2, r3, #2
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a42      	ldr	r2, [pc, #264]	@ (8002f74 <HAL_DMA_Init+0x164>)
 8002e6a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002e82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e86:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002e90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ea8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ec6:	d039      	beq.n	8002f3c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ecc:	4a27      	ldr	r2, [pc, #156]	@ (8002f6c <HAL_DMA_Init+0x15c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d11a      	bne.n	8002f08 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002ed2:	4b29      	ldr	r3, [pc, #164]	@ (8002f78 <HAL_DMA_Init+0x168>)
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eda:	f003 031c 	and.w	r3, r3, #28
 8002ede:	210f      	movs	r1, #15
 8002ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	4924      	ldr	r1, [pc, #144]	@ (8002f78 <HAL_DMA_Init+0x168>)
 8002ee8:	4013      	ands	r3, r2
 8002eea:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002eec:	4b22      	ldr	r3, [pc, #136]	@ (8002f78 <HAL_DMA_Init+0x168>)
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6859      	ldr	r1, [r3, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ef8:	f003 031c 	and.w	r3, r3, #28
 8002efc:	fa01 f303 	lsl.w	r3, r1, r3
 8002f00:	491d      	ldr	r1, [pc, #116]	@ (8002f78 <HAL_DMA_Init+0x168>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	600b      	str	r3, [r1, #0]
 8002f06:	e019      	b.n	8002f3c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002f08:	4b1c      	ldr	r3, [pc, #112]	@ (8002f7c <HAL_DMA_Init+0x16c>)
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f10:	f003 031c 	and.w	r3, r3, #28
 8002f14:	210f      	movs	r1, #15
 8002f16:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1a:	43db      	mvns	r3, r3
 8002f1c:	4917      	ldr	r1, [pc, #92]	@ (8002f7c <HAL_DMA_Init+0x16c>)
 8002f1e:	4013      	ands	r3, r2
 8002f20:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002f22:	4b16      	ldr	r3, [pc, #88]	@ (8002f7c <HAL_DMA_Init+0x16c>)
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6859      	ldr	r1, [r3, #4]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f2e:	f003 031c 	and.w	r3, r3, #28
 8002f32:	fa01 f303 	lsl.w	r3, r1, r3
 8002f36:	4911      	ldr	r1, [pc, #68]	@ (8002f7c <HAL_DMA_Init+0x16c>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3714      	adds	r7, #20
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	40020407 	.word	0x40020407
 8002f64:	bffdfff8 	.word	0xbffdfff8
 8002f68:	cccccccd 	.word	0xcccccccd
 8002f6c:	40020000 	.word	0x40020000
 8002f70:	bffdfbf8 	.word	0xbffdfbf8
 8002f74:	40020400 	.word	0x40020400
 8002f78:	400200a8 	.word	0x400200a8
 8002f7c:	400204a8 	.word	0x400204a8

08002f80 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
 8002f8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d101      	bne.n	8002fa0 <HAL_DMA_Start_IT+0x20>
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	e04b      	b.n	8003038 <HAL_DMA_Start_IT+0xb8>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d13a      	bne.n	800302a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 0201 	bic.w	r2, r2, #1
 8002fd0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	68b9      	ldr	r1, [r7, #8]
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 f95f 	bl	800329c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d008      	beq.n	8002ff8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f042 020e 	orr.w	r2, r2, #14
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	e00f      	b.n	8003018 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 0204 	bic.w	r2, r2, #4
 8003006:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 020a 	orr.w	r2, r2, #10
 8003016:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 0201 	orr.w	r2, r2, #1
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	e005      	b.n	8003036 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003032:	2302      	movs	r3, #2
 8003034:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003036:	7dfb      	ldrb	r3, [r7, #23]
}
 8003038:	4618      	mov	r0, r3
 800303a:	3718      	adds	r7, #24
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003048:	2300      	movs	r3, #0
 800304a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d008      	beq.n	800306a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2204      	movs	r2, #4
 800305c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e022      	b.n	80030b0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 020e 	bic.w	r2, r2, #14
 8003078:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 0201 	bic.w	r2, r2, #1
 8003088:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800308e:	f003 021c 	and.w	r2, r3, #28
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003096:	2101      	movs	r1, #1
 8003098:	fa01 f202 	lsl.w	r2, r1, r2
 800309c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80030ae:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3714      	adds	r7, #20
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030c4:	2300      	movs	r3, #0
 80030c6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d005      	beq.n	80030e0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2204      	movs	r2, #4
 80030d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	73fb      	strb	r3, [r7, #15]
 80030de:	e029      	b.n	8003134 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 020e 	bic.w	r2, r2, #14
 80030ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0201 	bic.w	r2, r2, #1
 80030fe:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003104:	f003 021c 	and.w	r2, r3, #28
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310c:	2101      	movs	r1, #1
 800310e:	fa01 f202 	lsl.w	r2, r1, r2
 8003112:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003128:	2b00      	cmp	r3, #0
 800312a:	d003      	beq.n	8003134 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	4798      	blx	r3
    }
  }
  return status;
 8003134:	7bfb      	ldrb	r3, [r7, #15]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b084      	sub	sp, #16
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800315a:	f003 031c 	and.w	r3, r3, #28
 800315e:	2204      	movs	r2, #4
 8003160:	409a      	lsls	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	4013      	ands	r3, r2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d026      	beq.n	80031b8 <HAL_DMA_IRQHandler+0x7a>
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	2b00      	cmp	r3, #0
 8003172:	d021      	beq.n	80031b8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0320 	and.w	r3, r3, #32
 800317e:	2b00      	cmp	r3, #0
 8003180:	d107      	bne.n	8003192 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0204 	bic.w	r2, r2, #4
 8003190:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003196:	f003 021c 	and.w	r2, r3, #28
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319e:	2104      	movs	r1, #4
 80031a0:	fa01 f202 	lsl.w	r2, r1, r2
 80031a4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d071      	beq.n	8003292 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80031b6:	e06c      	b.n	8003292 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031bc:	f003 031c 	and.w	r3, r3, #28
 80031c0:	2202      	movs	r2, #2
 80031c2:	409a      	lsls	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	4013      	ands	r3, r2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d02e      	beq.n	800322a <HAL_DMA_IRQHandler+0xec>
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d029      	beq.n	800322a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0320 	and.w	r3, r3, #32
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10b      	bne.n	80031fc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 020a 	bic.w	r2, r2, #10
 80031f2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003200:	f003 021c 	and.w	r2, r3, #28
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003208:	2102      	movs	r1, #2
 800320a:	fa01 f202 	lsl.w	r2, r1, r2
 800320e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800321c:	2b00      	cmp	r3, #0
 800321e:	d038      	beq.n	8003292 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003228:	e033      	b.n	8003292 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800322e:	f003 031c 	and.w	r3, r3, #28
 8003232:	2208      	movs	r2, #8
 8003234:	409a      	lsls	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	4013      	ands	r3, r2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d02a      	beq.n	8003294 <HAL_DMA_IRQHandler+0x156>
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	f003 0308 	and.w	r3, r3, #8
 8003244:	2b00      	cmp	r3, #0
 8003246:	d025      	beq.n	8003294 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 020e 	bic.w	r2, r2, #14
 8003256:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800325c:	f003 021c 	and.w	r2, r3, #28
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003264:	2101      	movs	r1, #1
 8003266:	fa01 f202 	lsl.w	r2, r1, r2
 800326a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003286:	2b00      	cmp	r3, #0
 8003288:	d004      	beq.n	8003294 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003292:	bf00      	nop
 8003294:	bf00      	nop
}
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
 80032a8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ae:	f003 021c 	and.w	r2, r3, #28
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b6:	2101      	movs	r1, #1
 80032b8:	fa01 f202 	lsl.w	r2, r1, r2
 80032bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	2b10      	cmp	r3, #16
 80032cc:	d108      	bne.n	80032e0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80032de:	e007      	b.n	80032f0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	60da      	str	r2, [r3, #12]
}
 80032f0:	bf00      	nop
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b087      	sub	sp, #28
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003306:	2300      	movs	r3, #0
 8003308:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800330a:	e14e      	b.n	80035aa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	2101      	movs	r1, #1
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	fa01 f303 	lsl.w	r3, r1, r3
 8003318:	4013      	ands	r3, r2
 800331a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2b00      	cmp	r3, #0
 8003320:	f000 8140 	beq.w	80035a4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f003 0303 	and.w	r3, r3, #3
 800332c:	2b01      	cmp	r3, #1
 800332e:	d005      	beq.n	800333c <HAL_GPIO_Init+0x40>
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f003 0303 	and.w	r3, r3, #3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d130      	bne.n	800339e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	2203      	movs	r2, #3
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	43db      	mvns	r3, r3
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	4013      	ands	r3, r2
 8003352:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	4313      	orrs	r3, r2
 8003364:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003372:	2201      	movs	r2, #1
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	43db      	mvns	r3, r3
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	4013      	ands	r3, r2
 8003380:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	091b      	lsrs	r3, r3, #4
 8003388:	f003 0201 	and.w	r2, r3, #1
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	4313      	orrs	r3, r2
 8003396:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f003 0303 	and.w	r3, r3, #3
 80033a6:	2b03      	cmp	r3, #3
 80033a8:	d017      	beq.n	80033da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	2203      	movs	r2, #3
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	43db      	mvns	r3, r3
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	4013      	ands	r3, r2
 80033c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f003 0303 	and.w	r3, r3, #3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d123      	bne.n	800342e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	08da      	lsrs	r2, r3, #3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	3208      	adds	r2, #8
 80033ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f003 0307 	and.w	r3, r3, #7
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	220f      	movs	r2, #15
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	43db      	mvns	r3, r3
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	4013      	ands	r3, r2
 8003408:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	691a      	ldr	r2, [r3, #16]
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	4313      	orrs	r3, r2
 800341e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	08da      	lsrs	r2, r3, #3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3208      	adds	r2, #8
 8003428:	6939      	ldr	r1, [r7, #16]
 800342a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	2203      	movs	r2, #3
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	43db      	mvns	r3, r3
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	4013      	ands	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f003 0203 	and.w	r2, r3, #3
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	4313      	orrs	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 809a 	beq.w	80035a4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003470:	4b55      	ldr	r3, [pc, #340]	@ (80035c8 <HAL_GPIO_Init+0x2cc>)
 8003472:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003474:	4a54      	ldr	r2, [pc, #336]	@ (80035c8 <HAL_GPIO_Init+0x2cc>)
 8003476:	f043 0301 	orr.w	r3, r3, #1
 800347a:	6613      	str	r3, [r2, #96]	@ 0x60
 800347c:	4b52      	ldr	r3, [pc, #328]	@ (80035c8 <HAL_GPIO_Init+0x2cc>)
 800347e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	60bb      	str	r3, [r7, #8]
 8003486:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003488:	4a50      	ldr	r2, [pc, #320]	@ (80035cc <HAL_GPIO_Init+0x2d0>)
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	089b      	lsrs	r3, r3, #2
 800348e:	3302      	adds	r3, #2
 8003490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003494:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f003 0303 	and.w	r3, r3, #3
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	220f      	movs	r2, #15
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	43db      	mvns	r3, r3
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	4013      	ands	r3, r2
 80034aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80034b2:	d013      	beq.n	80034dc <HAL_GPIO_Init+0x1e0>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a46      	ldr	r2, [pc, #280]	@ (80035d0 <HAL_GPIO_Init+0x2d4>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d00d      	beq.n	80034d8 <HAL_GPIO_Init+0x1dc>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a45      	ldr	r2, [pc, #276]	@ (80035d4 <HAL_GPIO_Init+0x2d8>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d007      	beq.n	80034d4 <HAL_GPIO_Init+0x1d8>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a44      	ldr	r2, [pc, #272]	@ (80035d8 <HAL_GPIO_Init+0x2dc>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d101      	bne.n	80034d0 <HAL_GPIO_Init+0x1d4>
 80034cc:	2303      	movs	r3, #3
 80034ce:	e006      	b.n	80034de <HAL_GPIO_Init+0x1e2>
 80034d0:	2307      	movs	r3, #7
 80034d2:	e004      	b.n	80034de <HAL_GPIO_Init+0x1e2>
 80034d4:	2302      	movs	r3, #2
 80034d6:	e002      	b.n	80034de <HAL_GPIO_Init+0x1e2>
 80034d8:	2301      	movs	r3, #1
 80034da:	e000      	b.n	80034de <HAL_GPIO_Init+0x1e2>
 80034dc:	2300      	movs	r3, #0
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	f002 0203 	and.w	r2, r2, #3
 80034e4:	0092      	lsls	r2, r2, #2
 80034e6:	4093      	lsls	r3, r2
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034ee:	4937      	ldr	r1, [pc, #220]	@ (80035cc <HAL_GPIO_Init+0x2d0>)
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	089b      	lsrs	r3, r3, #2
 80034f4:	3302      	adds	r3, #2
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034fc:	4b37      	ldr	r3, [pc, #220]	@ (80035dc <HAL_GPIO_Init+0x2e0>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	43db      	mvns	r3, r3
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	4013      	ands	r3, r2
 800350a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d003      	beq.n	8003520 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	4313      	orrs	r3, r2
 800351e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003520:	4a2e      	ldr	r2, [pc, #184]	@ (80035dc <HAL_GPIO_Init+0x2e0>)
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003526:	4b2d      	ldr	r3, [pc, #180]	@ (80035dc <HAL_GPIO_Init+0x2e0>)
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	43db      	mvns	r3, r3
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	4013      	ands	r3, r2
 8003534:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4313      	orrs	r3, r2
 8003548:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800354a:	4a24      	ldr	r2, [pc, #144]	@ (80035dc <HAL_GPIO_Init+0x2e0>)
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003550:	4b22      	ldr	r3, [pc, #136]	@ (80035dc <HAL_GPIO_Init+0x2e0>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	43db      	mvns	r3, r3
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4013      	ands	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d003      	beq.n	8003574 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	4313      	orrs	r3, r2
 8003572:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003574:	4a19      	ldr	r2, [pc, #100]	@ (80035dc <HAL_GPIO_Init+0x2e0>)
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800357a:	4b18      	ldr	r3, [pc, #96]	@ (80035dc <HAL_GPIO_Init+0x2e0>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	43db      	mvns	r3, r3
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	4013      	ands	r3, r2
 8003588:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4313      	orrs	r3, r2
 800359c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800359e:	4a0f      	ldr	r2, [pc, #60]	@ (80035dc <HAL_GPIO_Init+0x2e0>)
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	3301      	adds	r3, #1
 80035a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	fa22 f303 	lsr.w	r3, r2, r3
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f47f aea9 	bne.w	800330c <HAL_GPIO_Init+0x10>
  }
}
 80035ba:	bf00      	nop
 80035bc:	bf00      	nop
 80035be:	371c      	adds	r7, #28
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	40021000 	.word	0x40021000
 80035cc:	40010000 	.word	0x40010000
 80035d0:	48000400 	.word	0x48000400
 80035d4:	48000800 	.word	0x48000800
 80035d8:	48000c00 	.word	0x48000c00
 80035dc:	40010400 	.word	0x40010400

080035e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	460b      	mov	r3, r1
 80035ea:	807b      	strh	r3, [r7, #2]
 80035ec:	4613      	mov	r3, r2
 80035ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035f0:	787b      	ldrb	r3, [r7, #1]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035f6:	887a      	ldrh	r2, [r7, #2]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035fc:	e002      	b.n	8003604 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035fe:	887a      	ldrh	r2, [r7, #2]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e08d      	b.n	800373e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d106      	bne.n	800363c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7fe fb3e 	bl	8001cb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2224      	movs	r2, #36	@ 0x24
 8003640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 0201 	bic.w	r2, r2, #1
 8003652:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003660:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003670:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d107      	bne.n	800368a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	689a      	ldr	r2, [r3, #8]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003686:	609a      	str	r2, [r3, #8]
 8003688:	e006      	b.n	8003698 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	689a      	ldr	r2, [r3, #8]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003696:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	2b02      	cmp	r3, #2
 800369e:	d108      	bne.n	80036b2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036ae:	605a      	str	r2, [r3, #4]
 80036b0:	e007      	b.n	80036c2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	6812      	ldr	r2, [r2, #0]
 80036cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80036d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68da      	ldr	r2, [r3, #12]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	691a      	ldr	r2, [r3, #16]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	69d9      	ldr	r1, [r3, #28]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a1a      	ldr	r2, [r3, #32]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f042 0201 	orr.w	r2, r2, #1
 800371e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2220      	movs	r2, #32
 800372a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
	...

08003748 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b088      	sub	sp, #32
 800374c:	af02      	add	r7, sp, #8
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	607a      	str	r2, [r7, #4]
 8003752:	461a      	mov	r2, r3
 8003754:	460b      	mov	r3, r1
 8003756:	817b      	strh	r3, [r7, #10]
 8003758:	4613      	mov	r3, r2
 800375a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b20      	cmp	r3, #32
 8003766:	f040 80fd 	bne.w	8003964 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003770:	2b01      	cmp	r3, #1
 8003772:	d101      	bne.n	8003778 <HAL_I2C_Master_Transmit+0x30>
 8003774:	2302      	movs	r3, #2
 8003776:	e0f6      	b.n	8003966 <HAL_I2C_Master_Transmit+0x21e>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003780:	f7ff fa04 	bl	8002b8c <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	2319      	movs	r3, #25
 800378c:	2201      	movs	r2, #1
 800378e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f000 fa0a 	bl	8003bac <I2C_WaitOnFlagUntilTimeout>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e0e1      	b.n	8003966 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2221      	movs	r2, #33	@ 0x21
 80037a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2210      	movs	r2, #16
 80037ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	893a      	ldrh	r2, [r7, #8]
 80037c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	2bff      	cmp	r3, #255	@ 0xff
 80037d2:	d906      	bls.n	80037e2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	22ff      	movs	r2, #255	@ 0xff
 80037d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80037da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80037de:	617b      	str	r3, [r7, #20]
 80037e0:	e007      	b.n	80037f2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80037ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037f0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d024      	beq.n	8003844 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fe:	781a      	ldrb	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380a:	1c5a      	adds	r2, r3, #1
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003814:	b29b      	uxth	r3, r3
 8003816:	3b01      	subs	r3, #1
 8003818:	b29a      	uxth	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003822:	3b01      	subs	r3, #1
 8003824:	b29a      	uxth	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800382e:	b2db      	uxtb	r3, r3
 8003830:	3301      	adds	r3, #1
 8003832:	b2da      	uxtb	r2, r3
 8003834:	8979      	ldrh	r1, [r7, #10]
 8003836:	4b4e      	ldr	r3, [pc, #312]	@ (8003970 <HAL_I2C_Master_Transmit+0x228>)
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f000 fc05 	bl	800404c <I2C_TransferConfig>
 8003842:	e066      	b.n	8003912 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003848:	b2da      	uxtb	r2, r3
 800384a:	8979      	ldrh	r1, [r7, #10]
 800384c:	4b48      	ldr	r3, [pc, #288]	@ (8003970 <HAL_I2C_Master_Transmit+0x228>)
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 fbfa 	bl	800404c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003858:	e05b      	b.n	8003912 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	6a39      	ldr	r1, [r7, #32]
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f000 f9fd 	bl	8003c5e <I2C_WaitOnTXISFlagUntilTimeout>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e07b      	b.n	8003966 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003872:	781a      	ldrb	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387e:	1c5a      	adds	r2, r3, #1
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003888:	b29b      	uxth	r3, r3
 800388a:	3b01      	subs	r3, #1
 800388c:	b29a      	uxth	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003896:	3b01      	subs	r3, #1
 8003898:	b29a      	uxth	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d034      	beq.n	8003912 <HAL_I2C_Master_Transmit+0x1ca>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d130      	bne.n	8003912 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	9300      	str	r3, [sp, #0]
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	2200      	movs	r2, #0
 80038b8:	2180      	movs	r1, #128	@ 0x80
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f000 f976 	bl	8003bac <I2C_WaitOnFlagUntilTimeout>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e04d      	b.n	8003966 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	2bff      	cmp	r3, #255	@ 0xff
 80038d2:	d90e      	bls.n	80038f2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	22ff      	movs	r2, #255	@ 0xff
 80038d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	8979      	ldrh	r1, [r7, #10]
 80038e2:	2300      	movs	r3, #0
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f000 fbae 	bl	800404c <I2C_TransferConfig>
 80038f0:	e00f      	b.n	8003912 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003900:	b2da      	uxtb	r2, r3
 8003902:	8979      	ldrh	r1, [r7, #10]
 8003904:	2300      	movs	r3, #0
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800390c:	68f8      	ldr	r0, [r7, #12]
 800390e:	f000 fb9d 	bl	800404c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003916:	b29b      	uxth	r3, r3
 8003918:	2b00      	cmp	r3, #0
 800391a:	d19e      	bne.n	800385a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	6a39      	ldr	r1, [r7, #32]
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 f9e3 	bl	8003cec <I2C_WaitOnSTOPFlagUntilTimeout>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e01a      	b.n	8003966 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2220      	movs	r2, #32
 8003936:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6859      	ldr	r1, [r3, #4]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	4b0c      	ldr	r3, [pc, #48]	@ (8003974 <HAL_I2C_Master_Transmit+0x22c>)
 8003944:	400b      	ands	r3, r1
 8003946:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2220      	movs	r2, #32
 800394c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003960:	2300      	movs	r3, #0
 8003962:	e000      	b.n	8003966 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003964:	2302      	movs	r3, #2
  }
}
 8003966:	4618      	mov	r0, r3
 8003968:	3718      	adds	r7, #24
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	80002000 	.word	0x80002000
 8003974:	fe00e800 	.word	0xfe00e800

08003978 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b088      	sub	sp, #32
 800397c:	af02      	add	r7, sp, #8
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	607a      	str	r2, [r7, #4]
 8003982:	461a      	mov	r2, r3
 8003984:	460b      	mov	r3, r1
 8003986:	817b      	strh	r3, [r7, #10]
 8003988:	4613      	mov	r3, r2
 800398a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b20      	cmp	r3, #32
 8003996:	f040 80db 	bne.w	8003b50 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d101      	bne.n	80039a8 <HAL_I2C_Master_Receive+0x30>
 80039a4:	2302      	movs	r3, #2
 80039a6:	e0d4      	b.n	8003b52 <HAL_I2C_Master_Receive+0x1da>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80039b0:	f7ff f8ec 	bl	8002b8c <HAL_GetTick>
 80039b4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	2319      	movs	r3, #25
 80039bc:	2201      	movs	r2, #1
 80039be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 f8f2 	bl	8003bac <I2C_WaitOnFlagUntilTimeout>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e0bf      	b.n	8003b52 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2222      	movs	r2, #34	@ 0x22
 80039d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2210      	movs	r2, #16
 80039de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	893a      	ldrh	r2, [r7, #8]
 80039f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	2bff      	cmp	r3, #255	@ 0xff
 8003a02:	d90e      	bls.n	8003a22 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2201      	movs	r2, #1
 8003a08:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a0e:	b2da      	uxtb	r2, r3
 8003a10:	8979      	ldrh	r1, [r7, #10]
 8003a12:	4b52      	ldr	r3, [pc, #328]	@ (8003b5c <HAL_I2C_Master_Receive+0x1e4>)
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f000 fb16 	bl	800404c <I2C_TransferConfig>
 8003a20:	e06d      	b.n	8003afe <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	8979      	ldrh	r1, [r7, #10]
 8003a34:	4b49      	ldr	r3, [pc, #292]	@ (8003b5c <HAL_I2C_Master_Receive+0x1e4>)
 8003a36:	9300      	str	r3, [sp, #0]
 8003a38:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 fb05 	bl	800404c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003a42:	e05c      	b.n	8003afe <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	6a39      	ldr	r1, [r7, #32]
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f000 f993 	bl	8003d74 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e07c      	b.n	8003b52 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a62:	b2d2      	uxtb	r2, r2
 8003a64:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6a:	1c5a      	adds	r2, r3, #1
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	3b01      	subs	r3, #1
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d034      	beq.n	8003afe <HAL_I2C_Master_Receive+0x186>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d130      	bne.n	8003afe <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	6a3b      	ldr	r3, [r7, #32]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	2180      	movs	r1, #128	@ 0x80
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 f880 	bl	8003bac <I2C_WaitOnFlagUntilTimeout>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e04d      	b.n	8003b52 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	2bff      	cmp	r3, #255	@ 0xff
 8003abe:	d90e      	bls.n	8003ade <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	22ff      	movs	r2, #255	@ 0xff
 8003ac4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	8979      	ldrh	r1, [r7, #10]
 8003ace:	2300      	movs	r3, #0
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f000 fab8 	bl	800404c <I2C_TransferConfig>
 8003adc:	e00f      	b.n	8003afe <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	8979      	ldrh	r1, [r7, #10]
 8003af0:	2300      	movs	r3, #0
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 faa7 	bl	800404c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d19d      	bne.n	8003a44 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	6a39      	ldr	r1, [r7, #32]
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f000 f8ed 	bl	8003cec <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e01a      	b.n	8003b52 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2220      	movs	r2, #32
 8003b22:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6859      	ldr	r1, [r3, #4]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8003b60 <HAL_I2C_Master_Receive+0x1e8>)
 8003b30:	400b      	ands	r3, r1
 8003b32:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2220      	movs	r2, #32
 8003b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	e000      	b.n	8003b52 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003b50:	2302      	movs	r3, #2
  }
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3718      	adds	r7, #24
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	80002400 	.word	0x80002400
 8003b60:	fe00e800 	.word	0xfe00e800

08003b64 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d103      	bne.n	8003b82 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d007      	beq.n	8003ba0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	699a      	ldr	r2, [r3, #24]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f042 0201 	orr.w	r2, r2, #1
 8003b9e:	619a      	str	r2, [r3, #24]
  }
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	603b      	str	r3, [r7, #0]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bbc:	e03b      	b.n	8003c36 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	6839      	ldr	r1, [r7, #0]
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f000 f962 	bl	8003e8c <I2C_IsErrorOccurred>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e041      	b.n	8003c56 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd8:	d02d      	beq.n	8003c36 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bda:	f7fe ffd7 	bl	8002b8c <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d302      	bcc.n	8003bf0 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d122      	bne.n	8003c36 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	699a      	ldr	r2, [r3, #24]
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	bf0c      	ite	eq
 8003c00:	2301      	moveq	r3, #1
 8003c02:	2300      	movne	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	461a      	mov	r2, r3
 8003c08:	79fb      	ldrb	r3, [r7, #7]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d113      	bne.n	8003c36 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c12:	f043 0220 	orr.w	r2, r3, #32
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e00f      	b.n	8003c56 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	699a      	ldr	r2, [r3, #24]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	bf0c      	ite	eq
 8003c46:	2301      	moveq	r3, #1
 8003c48:	2300      	movne	r3, #0
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	79fb      	ldrb	r3, [r7, #7]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d0b4      	beq.n	8003bbe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b084      	sub	sp, #16
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	60f8      	str	r0, [r7, #12]
 8003c66:	60b9      	str	r1, [r7, #8]
 8003c68:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c6a:	e033      	b.n	8003cd4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	68b9      	ldr	r1, [r7, #8]
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f000 f90b 	bl	8003e8c <I2C_IsErrorOccurred>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d001      	beq.n	8003c80 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e031      	b.n	8003ce4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c86:	d025      	beq.n	8003cd4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c88:	f7fe ff80 	bl	8002b8c <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d302      	bcc.n	8003c9e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d11a      	bne.n	8003cd4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d013      	beq.n	8003cd4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb0:	f043 0220 	orr.w	r2, r3, #32
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2220      	movs	r2, #32
 8003cbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e007      	b.n	8003ce4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d1c4      	bne.n	8003c6c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3710      	adds	r7, #16
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cf8:	e02f      	b.n	8003d5a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	68b9      	ldr	r1, [r7, #8]
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 f8c4 	bl	8003e8c <I2C_IsErrorOccurred>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e02d      	b.n	8003d6a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d0e:	f7fe ff3d 	bl	8002b8c <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d302      	bcc.n	8003d24 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d11a      	bne.n	8003d5a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	f003 0320 	and.w	r3, r3, #32
 8003d2e:	2b20      	cmp	r3, #32
 8003d30:	d013      	beq.n	8003d5a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d36:	f043 0220 	orr.w	r2, r3, #32
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2220      	movs	r2, #32
 8003d42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e007      	b.n	8003d6a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	f003 0320 	and.w	r3, r3, #32
 8003d64:	2b20      	cmp	r3, #32
 8003d66:	d1c8      	bne.n	8003cfa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
	...

08003d74 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d80:	2300      	movs	r3, #0
 8003d82:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003d84:	e071      	b.n	8003e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	68b9      	ldr	r1, [r7, #8]
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f000 f87e 	bl	8003e8c <I2C_IsErrorOccurred>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	f003 0320 	and.w	r3, r3, #32
 8003da4:	2b20      	cmp	r3, #32
 8003da6:	d13b      	bne.n	8003e20 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003da8:	7dfb      	ldrb	r3, [r7, #23]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d138      	bne.n	8003e20 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b04      	cmp	r3, #4
 8003dba:	d105      	bne.n	8003dc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	f003 0310 	and.w	r3, r3, #16
 8003dd2:	2b10      	cmp	r3, #16
 8003dd4:	d121      	bne.n	8003e1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2210      	movs	r2, #16
 8003ddc:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2204      	movs	r2, #4
 8003de2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2220      	movs	r2, #32
 8003dea:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6859      	ldr	r1, [r3, #4]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	4b24      	ldr	r3, [pc, #144]	@ (8003e88 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003df8:	400b      	ands	r3, r1
 8003dfa:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	75fb      	strb	r3, [r7, #23]
 8003e18:	e002      	b.n	8003e20 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003e20:	f7fe feb4 	bl	8002b8c <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	68ba      	ldr	r2, [r7, #8]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d302      	bcc.n	8003e36 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d119      	bne.n	8003e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003e36:	7dfb      	ldrb	r3, [r7, #23]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d116      	bne.n	8003e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	f003 0304 	and.w	r3, r3, #4
 8003e46:	2b04      	cmp	r3, #4
 8003e48:	d00f      	beq.n	8003e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e4e:	f043 0220 	orr.w	r2, r3, #32
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2220      	movs	r2, #32
 8003e5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	2b04      	cmp	r3, #4
 8003e76:	d002      	beq.n	8003e7e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003e78:	7dfb      	ldrb	r3, [r7, #23]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d083      	beq.n	8003d86 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3718      	adds	r7, #24
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	fe00e800 	.word	0xfe00e800

08003e8c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b08a      	sub	sp, #40	@ 0x28
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	f003 0310 	and.w	r3, r3, #16
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d068      	beq.n	8003f8a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2210      	movs	r2, #16
 8003ebe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ec0:	e049      	b.n	8003f56 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec8:	d045      	beq.n	8003f56 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003eca:	f7fe fe5f 	bl	8002b8c <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	68ba      	ldr	r2, [r7, #8]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d302      	bcc.n	8003ee0 <I2C_IsErrorOccurred+0x54>
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d13a      	bne.n	8003f56 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003eea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ef2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003efe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f02:	d121      	bne.n	8003f48 <I2C_IsErrorOccurred+0xbc>
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f0a:	d01d      	beq.n	8003f48 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003f0c:	7cfb      	ldrb	r3, [r7, #19]
 8003f0e:	2b20      	cmp	r3, #32
 8003f10:	d01a      	beq.n	8003f48 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f20:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003f22:	f7fe fe33 	bl	8002b8c <HAL_GetTick>
 8003f26:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f28:	e00e      	b.n	8003f48 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003f2a:	f7fe fe2f 	bl	8002b8c <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	2b19      	cmp	r3, #25
 8003f36:	d907      	bls.n	8003f48 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003f38:	6a3b      	ldr	r3, [r7, #32]
 8003f3a:	f043 0320 	orr.w	r3, r3, #32
 8003f3e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003f46:	e006      	b.n	8003f56 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	f003 0320 	and.w	r3, r3, #32
 8003f52:	2b20      	cmp	r3, #32
 8003f54:	d1e9      	bne.n	8003f2a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	f003 0320 	and.w	r3, r3, #32
 8003f60:	2b20      	cmp	r3, #32
 8003f62:	d003      	beq.n	8003f6c <I2C_IsErrorOccurred+0xe0>
 8003f64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0aa      	beq.n	8003ec2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003f6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d103      	bne.n	8003f7c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003f7c:	6a3b      	ldr	r3, [r7, #32]
 8003f7e:	f043 0304 	orr.w	r3, r3, #4
 8003f82:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00b      	beq.n	8003fb4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
 8003f9e:	f043 0301 	orr.w	r3, r3, #1
 8003fa2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003fac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00b      	beq.n	8003fd6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003fbe:	6a3b      	ldr	r3, [r7, #32]
 8003fc0:	f043 0308 	orr.w	r3, r3, #8
 8003fc4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003fce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00b      	beq.n	8003ff8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
 8003fe2:	f043 0302 	orr.w	r3, r3, #2
 8003fe6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ff0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003ff8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d01c      	beq.n	800403a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f7ff fdaf 	bl	8003b64 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	6859      	ldr	r1, [r3, #4]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	4b0d      	ldr	r3, [pc, #52]	@ (8004048 <I2C_IsErrorOccurred+0x1bc>)
 8004012:	400b      	ands	r3, r1
 8004014:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800401a:	6a3b      	ldr	r3, [r7, #32]
 800401c:	431a      	orrs	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2220      	movs	r2, #32
 8004026:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800403a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800403e:	4618      	mov	r0, r3
 8004040:	3728      	adds	r7, #40	@ 0x28
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	fe00e800 	.word	0xfe00e800

0800404c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800404c:	b480      	push	{r7}
 800404e:	b087      	sub	sp, #28
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	607b      	str	r3, [r7, #4]
 8004056:	460b      	mov	r3, r1
 8004058:	817b      	strh	r3, [r7, #10]
 800405a:	4613      	mov	r3, r2
 800405c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800405e:	897b      	ldrh	r3, [r7, #10]
 8004060:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004064:	7a7b      	ldrb	r3, [r7, #9]
 8004066:	041b      	lsls	r3, r3, #16
 8004068:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800406c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004072:	6a3b      	ldr	r3, [r7, #32]
 8004074:	4313      	orrs	r3, r2
 8004076:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800407a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	6a3b      	ldr	r3, [r7, #32]
 8004084:	0d5b      	lsrs	r3, r3, #21
 8004086:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800408a:	4b08      	ldr	r3, [pc, #32]	@ (80040ac <I2C_TransferConfig+0x60>)
 800408c:	430b      	orrs	r3, r1
 800408e:	43db      	mvns	r3, r3
 8004090:	ea02 0103 	and.w	r1, r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	430a      	orrs	r2, r1
 800409c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800409e:	bf00      	nop
 80040a0:	371c      	adds	r7, #28
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	03ff63ff 	.word	0x03ff63ff

080040b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b20      	cmp	r3, #32
 80040c4:	d138      	bne.n	8004138 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d101      	bne.n	80040d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80040d0:	2302      	movs	r3, #2
 80040d2:	e032      	b.n	800413a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2224      	movs	r2, #36	@ 0x24
 80040e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0201 	bic.w	r2, r2, #1
 80040f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004102:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6819      	ldr	r1, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f042 0201 	orr.w	r2, r2, #1
 8004122:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2220      	movs	r2, #32
 8004128:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004134:	2300      	movs	r3, #0
 8004136:	e000      	b.n	800413a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004138:	2302      	movs	r3, #2
  }
}
 800413a:	4618      	mov	r0, r3
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr

08004146 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004146:	b480      	push	{r7}
 8004148:	b085      	sub	sp, #20
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
 800414e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b20      	cmp	r3, #32
 800415a:	d139      	bne.n	80041d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004162:	2b01      	cmp	r3, #1
 8004164:	d101      	bne.n	800416a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004166:	2302      	movs	r3, #2
 8004168:	e033      	b.n	80041d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2224      	movs	r2, #36	@ 0x24
 8004176:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0201 	bic.w	r2, r2, #1
 8004188:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004198:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	021b      	lsls	r3, r3, #8
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 0201 	orr.w	r2, r2, #1
 80041ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2220      	movs	r2, #32
 80041c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80041cc:	2300      	movs	r3, #0
 80041ce:	e000      	b.n	80041d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80041d0:	2302      	movs	r3, #2
  }
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3714      	adds	r7, #20
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
	...

080041e0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80041e0:	b480      	push	{r7}
 80041e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041e4:	4b05      	ldr	r3, [pc, #20]	@ (80041fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a04      	ldr	r2, [pc, #16]	@ (80041fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80041ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041ee:	6013      	str	r3, [r2, #0]
}
 80041f0:	bf00      	nop
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	40007000 	.word	0x40007000

08004200 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004204:	4b04      	ldr	r3, [pc, #16]	@ (8004218 <HAL_PWREx_GetVoltageRange+0x18>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800420c:	4618      	mov	r0, r3
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	40007000 	.word	0x40007000

0800421c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800422a:	d130      	bne.n	800428e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800422c:	4b23      	ldr	r3, [pc, #140]	@ (80042bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004234:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004238:	d038      	beq.n	80042ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800423a:	4b20      	ldr	r3, [pc, #128]	@ (80042bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004242:	4a1e      	ldr	r2, [pc, #120]	@ (80042bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004244:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004248:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800424a:	4b1d      	ldr	r3, [pc, #116]	@ (80042c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2232      	movs	r2, #50	@ 0x32
 8004250:	fb02 f303 	mul.w	r3, r2, r3
 8004254:	4a1b      	ldr	r2, [pc, #108]	@ (80042c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004256:	fba2 2303 	umull	r2, r3, r2, r3
 800425a:	0c9b      	lsrs	r3, r3, #18
 800425c:	3301      	adds	r3, #1
 800425e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004260:	e002      	b.n	8004268 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	3b01      	subs	r3, #1
 8004266:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004268:	4b14      	ldr	r3, [pc, #80]	@ (80042bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004270:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004274:	d102      	bne.n	800427c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1f2      	bne.n	8004262 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800427c:	4b0f      	ldr	r3, [pc, #60]	@ (80042bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004284:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004288:	d110      	bne.n	80042ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e00f      	b.n	80042ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800428e:	4b0b      	ldr	r3, [pc, #44]	@ (80042bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004296:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800429a:	d007      	beq.n	80042ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800429c:	4b07      	ldr	r3, [pc, #28]	@ (80042bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80042a4:	4a05      	ldr	r2, [pc, #20]	@ (80042bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80042aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3714      	adds	r7, #20
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	40007000 	.word	0x40007000
 80042c0:	20000004 	.word	0x20000004
 80042c4:	431bde83 	.word	0x431bde83

080042c8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b08a      	sub	sp, #40	@ 0x28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d102      	bne.n	80042dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	f000 bc4f 	b.w	8004b7a <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042dc:	4b97      	ldr	r3, [pc, #604]	@ (800453c <HAL_RCC_OscConfig+0x274>)
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f003 030c 	and.w	r3, r3, #12
 80042e4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042e6:	4b95      	ldr	r3, [pc, #596]	@ (800453c <HAL_RCC_OscConfig+0x274>)
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	f003 0303 	and.w	r3, r3, #3
 80042ee:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0310 	and.w	r3, r3, #16
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 80e6 	beq.w	80044ca <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042fe:	6a3b      	ldr	r3, [r7, #32]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d007      	beq.n	8004314 <HAL_RCC_OscConfig+0x4c>
 8004304:	6a3b      	ldr	r3, [r7, #32]
 8004306:	2b0c      	cmp	r3, #12
 8004308:	f040 808d 	bne.w	8004426 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	2b01      	cmp	r3, #1
 8004310:	f040 8089 	bne.w	8004426 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004314:	4b89      	ldr	r3, [pc, #548]	@ (800453c <HAL_RCC_OscConfig+0x274>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d006      	beq.n	800432e <HAL_RCC_OscConfig+0x66>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	69db      	ldr	r3, [r3, #28]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d102      	bne.n	800432e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	f000 bc26 	b.w	8004b7a <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004332:	4b82      	ldr	r3, [pc, #520]	@ (800453c <HAL_RCC_OscConfig+0x274>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0308 	and.w	r3, r3, #8
 800433a:	2b00      	cmp	r3, #0
 800433c:	d004      	beq.n	8004348 <HAL_RCC_OscConfig+0x80>
 800433e:	4b7f      	ldr	r3, [pc, #508]	@ (800453c <HAL_RCC_OscConfig+0x274>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004346:	e005      	b.n	8004354 <HAL_RCC_OscConfig+0x8c>
 8004348:	4b7c      	ldr	r3, [pc, #496]	@ (800453c <HAL_RCC_OscConfig+0x274>)
 800434a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800434e:	091b      	lsrs	r3, r3, #4
 8004350:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004354:	4293      	cmp	r3, r2
 8004356:	d224      	bcs.n	80043a2 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435c:	4618      	mov	r0, r3
 800435e:	f000 fdd9 	bl	8004f14 <RCC_SetFlashLatencyFromMSIRange>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d002      	beq.n	800436e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	f000 bc06 	b.w	8004b7a <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800436e:	4b73      	ldr	r3, [pc, #460]	@ (800453c <HAL_RCC_OscConfig+0x274>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a72      	ldr	r2, [pc, #456]	@ (800453c <HAL_RCC_OscConfig+0x274>)
 8004374:	f043 0308 	orr.w	r3, r3, #8
 8004378:	6013      	str	r3, [r2, #0]
 800437a:	4b70      	ldr	r3, [pc, #448]	@ (800453c <HAL_RCC_OscConfig+0x274>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004386:	496d      	ldr	r1, [pc, #436]	@ (800453c <HAL_RCC_OscConfig+0x274>)
 8004388:	4313      	orrs	r3, r2
 800438a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800438c:	4b6b      	ldr	r3, [pc, #428]	@ (800453c <HAL_RCC_OscConfig+0x274>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a1b      	ldr	r3, [r3, #32]
 8004398:	021b      	lsls	r3, r3, #8
 800439a:	4968      	ldr	r1, [pc, #416]	@ (800453c <HAL_RCC_OscConfig+0x274>)
 800439c:	4313      	orrs	r3, r2
 800439e:	604b      	str	r3, [r1, #4]
 80043a0:	e025      	b.n	80043ee <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043a2:	4b66      	ldr	r3, [pc, #408]	@ (800453c <HAL_RCC_OscConfig+0x274>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a65      	ldr	r2, [pc, #404]	@ (800453c <HAL_RCC_OscConfig+0x274>)
 80043a8:	f043 0308 	orr.w	r3, r3, #8
 80043ac:	6013      	str	r3, [r2, #0]
 80043ae:	4b63      	ldr	r3, [pc, #396]	@ (800453c <HAL_RCC_OscConfig+0x274>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ba:	4960      	ldr	r1, [pc, #384]	@ (800453c <HAL_RCC_OscConfig+0x274>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043c0:	4b5e      	ldr	r3, [pc, #376]	@ (800453c <HAL_RCC_OscConfig+0x274>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a1b      	ldr	r3, [r3, #32]
 80043cc:	021b      	lsls	r3, r3, #8
 80043ce:	495b      	ldr	r1, [pc, #364]	@ (800453c <HAL_RCC_OscConfig+0x274>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043d4:	6a3b      	ldr	r3, [r7, #32]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d109      	bne.n	80043ee <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 fd98 	bl	8004f14 <RCC_SetFlashLatencyFromMSIRange>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e3c5      	b.n	8004b7a <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043ee:	f000 fccd 	bl	8004d8c <HAL_RCC_GetSysClockFreq>
 80043f2:	4602      	mov	r2, r0
 80043f4:	4b51      	ldr	r3, [pc, #324]	@ (800453c <HAL_RCC_OscConfig+0x274>)
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	091b      	lsrs	r3, r3, #4
 80043fa:	f003 030f 	and.w	r3, r3, #15
 80043fe:	4950      	ldr	r1, [pc, #320]	@ (8004540 <HAL_RCC_OscConfig+0x278>)
 8004400:	5ccb      	ldrb	r3, [r1, r3]
 8004402:	f003 031f 	and.w	r3, r3, #31
 8004406:	fa22 f303 	lsr.w	r3, r2, r3
 800440a:	4a4e      	ldr	r2, [pc, #312]	@ (8004544 <HAL_RCC_OscConfig+0x27c>)
 800440c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800440e:	4b4e      	ldr	r3, [pc, #312]	@ (8004548 <HAL_RCC_OscConfig+0x280>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4618      	mov	r0, r3
 8004414:	f7fe fb6a 	bl	8002aec <HAL_InitTick>
 8004418:	4603      	mov	r3, r0
 800441a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 800441c:	7dfb      	ldrb	r3, [r7, #23]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d052      	beq.n	80044c8 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8004422:	7dfb      	ldrb	r3, [r7, #23]
 8004424:	e3a9      	b.n	8004b7a <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d032      	beq.n	8004494 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800442e:	4b43      	ldr	r3, [pc, #268]	@ (800453c <HAL_RCC_OscConfig+0x274>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a42      	ldr	r2, [pc, #264]	@ (800453c <HAL_RCC_OscConfig+0x274>)
 8004434:	f043 0301 	orr.w	r3, r3, #1
 8004438:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800443a:	f7fe fba7 	bl	8002b8c <HAL_GetTick>
 800443e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004440:	e008      	b.n	8004454 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004442:	f7fe fba3 	bl	8002b8c <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e392      	b.n	8004b7a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004454:	4b39      	ldr	r3, [pc, #228]	@ (800453c <HAL_RCC_OscConfig+0x274>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d0f0      	beq.n	8004442 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004460:	4b36      	ldr	r3, [pc, #216]	@ (800453c <HAL_RCC_OscConfig+0x274>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a35      	ldr	r2, [pc, #212]	@ (800453c <HAL_RCC_OscConfig+0x274>)
 8004466:	f043 0308 	orr.w	r3, r3, #8
 800446a:	6013      	str	r3, [r2, #0]
 800446c:	4b33      	ldr	r3, [pc, #204]	@ (800453c <HAL_RCC_OscConfig+0x274>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004478:	4930      	ldr	r1, [pc, #192]	@ (800453c <HAL_RCC_OscConfig+0x274>)
 800447a:	4313      	orrs	r3, r2
 800447c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800447e:	4b2f      	ldr	r3, [pc, #188]	@ (800453c <HAL_RCC_OscConfig+0x274>)
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	021b      	lsls	r3, r3, #8
 800448c:	492b      	ldr	r1, [pc, #172]	@ (800453c <HAL_RCC_OscConfig+0x274>)
 800448e:	4313      	orrs	r3, r2
 8004490:	604b      	str	r3, [r1, #4]
 8004492:	e01a      	b.n	80044ca <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004494:	4b29      	ldr	r3, [pc, #164]	@ (800453c <HAL_RCC_OscConfig+0x274>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a28      	ldr	r2, [pc, #160]	@ (800453c <HAL_RCC_OscConfig+0x274>)
 800449a:	f023 0301 	bic.w	r3, r3, #1
 800449e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044a0:	f7fe fb74 	bl	8002b8c <HAL_GetTick>
 80044a4:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044a6:	e008      	b.n	80044ba <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044a8:	f7fe fb70 	bl	8002b8c <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e35f      	b.n	8004b7a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044ba:	4b20      	ldr	r3, [pc, #128]	@ (800453c <HAL_RCC_OscConfig+0x274>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1f0      	bne.n	80044a8 <HAL_RCC_OscConfig+0x1e0>
 80044c6:	e000      	b.n	80044ca <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d073      	beq.n	80045be <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80044d6:	6a3b      	ldr	r3, [r7, #32]
 80044d8:	2b08      	cmp	r3, #8
 80044da:	d005      	beq.n	80044e8 <HAL_RCC_OscConfig+0x220>
 80044dc:	6a3b      	ldr	r3, [r7, #32]
 80044de:	2b0c      	cmp	r3, #12
 80044e0:	d10e      	bne.n	8004500 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	2b03      	cmp	r3, #3
 80044e6:	d10b      	bne.n	8004500 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044e8:	4b14      	ldr	r3, [pc, #80]	@ (800453c <HAL_RCC_OscConfig+0x274>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d063      	beq.n	80045bc <HAL_RCC_OscConfig+0x2f4>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d15f      	bne.n	80045bc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e33c      	b.n	8004b7a <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004508:	d106      	bne.n	8004518 <HAL_RCC_OscConfig+0x250>
 800450a:	4b0c      	ldr	r3, [pc, #48]	@ (800453c <HAL_RCC_OscConfig+0x274>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a0b      	ldr	r2, [pc, #44]	@ (800453c <HAL_RCC_OscConfig+0x274>)
 8004510:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004514:	6013      	str	r3, [r2, #0]
 8004516:	e025      	b.n	8004564 <HAL_RCC_OscConfig+0x29c>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004520:	d114      	bne.n	800454c <HAL_RCC_OscConfig+0x284>
 8004522:	4b06      	ldr	r3, [pc, #24]	@ (800453c <HAL_RCC_OscConfig+0x274>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a05      	ldr	r2, [pc, #20]	@ (800453c <HAL_RCC_OscConfig+0x274>)
 8004528:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800452c:	6013      	str	r3, [r2, #0]
 800452e:	4b03      	ldr	r3, [pc, #12]	@ (800453c <HAL_RCC_OscConfig+0x274>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a02      	ldr	r2, [pc, #8]	@ (800453c <HAL_RCC_OscConfig+0x274>)
 8004534:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004538:	6013      	str	r3, [r2, #0]
 800453a:	e013      	b.n	8004564 <HAL_RCC_OscConfig+0x29c>
 800453c:	40021000 	.word	0x40021000
 8004540:	08009900 	.word	0x08009900
 8004544:	20000004 	.word	0x20000004
 8004548:	20000008 	.word	0x20000008
 800454c:	4b8f      	ldr	r3, [pc, #572]	@ (800478c <HAL_RCC_OscConfig+0x4c4>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a8e      	ldr	r2, [pc, #568]	@ (800478c <HAL_RCC_OscConfig+0x4c4>)
 8004552:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004556:	6013      	str	r3, [r2, #0]
 8004558:	4b8c      	ldr	r3, [pc, #560]	@ (800478c <HAL_RCC_OscConfig+0x4c4>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a8b      	ldr	r2, [pc, #556]	@ (800478c <HAL_RCC_OscConfig+0x4c4>)
 800455e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004562:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d013      	beq.n	8004594 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800456c:	f7fe fb0e 	bl	8002b8c <HAL_GetTick>
 8004570:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004572:	e008      	b.n	8004586 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004574:	f7fe fb0a 	bl	8002b8c <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b64      	cmp	r3, #100	@ 0x64
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e2f9      	b.n	8004b7a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004586:	4b81      	ldr	r3, [pc, #516]	@ (800478c <HAL_RCC_OscConfig+0x4c4>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0f0      	beq.n	8004574 <HAL_RCC_OscConfig+0x2ac>
 8004592:	e014      	b.n	80045be <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004594:	f7fe fafa 	bl	8002b8c <HAL_GetTick>
 8004598:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800459a:	e008      	b.n	80045ae <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800459c:	f7fe faf6 	bl	8002b8c <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b64      	cmp	r3, #100	@ 0x64
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e2e5      	b.n	8004b7a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045ae:	4b77      	ldr	r3, [pc, #476]	@ (800478c <HAL_RCC_OscConfig+0x4c4>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1f0      	bne.n	800459c <HAL_RCC_OscConfig+0x2d4>
 80045ba:	e000      	b.n	80045be <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d060      	beq.n	800468c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80045ca:	6a3b      	ldr	r3, [r7, #32]
 80045cc:	2b04      	cmp	r3, #4
 80045ce:	d005      	beq.n	80045dc <HAL_RCC_OscConfig+0x314>
 80045d0:	6a3b      	ldr	r3, [r7, #32]
 80045d2:	2b0c      	cmp	r3, #12
 80045d4:	d119      	bne.n	800460a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d116      	bne.n	800460a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045dc:	4b6b      	ldr	r3, [pc, #428]	@ (800478c <HAL_RCC_OscConfig+0x4c4>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d005      	beq.n	80045f4 <HAL_RCC_OscConfig+0x32c>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d101      	bne.n	80045f4 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e2c2      	b.n	8004b7a <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045f4:	4b65      	ldr	r3, [pc, #404]	@ (800478c <HAL_RCC_OscConfig+0x4c4>)
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	061b      	lsls	r3, r3, #24
 8004602:	4962      	ldr	r1, [pc, #392]	@ (800478c <HAL_RCC_OscConfig+0x4c4>)
 8004604:	4313      	orrs	r3, r2
 8004606:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004608:	e040      	b.n	800468c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d023      	beq.n	800465a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004612:	4b5e      	ldr	r3, [pc, #376]	@ (800478c <HAL_RCC_OscConfig+0x4c4>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a5d      	ldr	r2, [pc, #372]	@ (800478c <HAL_RCC_OscConfig+0x4c4>)
 8004618:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800461c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461e:	f7fe fab5 	bl	8002b8c <HAL_GetTick>
 8004622:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004624:	e008      	b.n	8004638 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004626:	f7fe fab1 	bl	8002b8c <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	2b02      	cmp	r3, #2
 8004632:	d901      	bls.n	8004638 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e2a0      	b.n	8004b7a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004638:	4b54      	ldr	r3, [pc, #336]	@ (800478c <HAL_RCC_OscConfig+0x4c4>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004640:	2b00      	cmp	r3, #0
 8004642:	d0f0      	beq.n	8004626 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004644:	4b51      	ldr	r3, [pc, #324]	@ (800478c <HAL_RCC_OscConfig+0x4c4>)
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	061b      	lsls	r3, r3, #24
 8004652:	494e      	ldr	r1, [pc, #312]	@ (800478c <HAL_RCC_OscConfig+0x4c4>)
 8004654:	4313      	orrs	r3, r2
 8004656:	604b      	str	r3, [r1, #4]
 8004658:	e018      	b.n	800468c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800465a:	4b4c      	ldr	r3, [pc, #304]	@ (800478c <HAL_RCC_OscConfig+0x4c4>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a4b      	ldr	r2, [pc, #300]	@ (800478c <HAL_RCC_OscConfig+0x4c4>)
 8004660:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004664:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004666:	f7fe fa91 	bl	8002b8c <HAL_GetTick>
 800466a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800466c:	e008      	b.n	8004680 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800466e:	f7fe fa8d 	bl	8002b8c <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e27c      	b.n	8004b7a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004680:	4b42      	ldr	r3, [pc, #264]	@ (800478c <HAL_RCC_OscConfig+0x4c4>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1f0      	bne.n	800466e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0308 	and.w	r3, r3, #8
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 8082 	beq.w	800479e <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d05f      	beq.n	8004762 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80046a2:	4b3a      	ldr	r3, [pc, #232]	@ (800478c <HAL_RCC_OscConfig+0x4c4>)
 80046a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046a8:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699a      	ldr	r2, [r3, #24]
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	f003 0310 	and.w	r3, r3, #16
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d037      	beq.n	8004728 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d006      	beq.n	80046d0 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e254      	b.n	8004b7a <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d01b      	beq.n	8004712 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 80046da:	4b2c      	ldr	r3, [pc, #176]	@ (800478c <HAL_RCC_OscConfig+0x4c4>)
 80046dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046e0:	4a2a      	ldr	r2, [pc, #168]	@ (800478c <HAL_RCC_OscConfig+0x4c4>)
 80046e2:	f023 0301 	bic.w	r3, r3, #1
 80046e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80046ea:	f7fe fa4f 	bl	8002b8c <HAL_GetTick>
 80046ee:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046f0:	e008      	b.n	8004704 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046f2:	f7fe fa4b 	bl	8002b8c <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b11      	cmp	r3, #17
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e23a      	b.n	8004b7a <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004704:	4b21      	ldr	r3, [pc, #132]	@ (800478c <HAL_RCC_OscConfig+0x4c4>)
 8004706:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1ef      	bne.n	80046f2 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8004712:	4b1e      	ldr	r3, [pc, #120]	@ (800478c <HAL_RCC_OscConfig+0x4c4>)
 8004714:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004718:	f023 0210 	bic.w	r2, r3, #16
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	491a      	ldr	r1, [pc, #104]	@ (800478c <HAL_RCC_OscConfig+0x4c4>)
 8004722:	4313      	orrs	r3, r2
 8004724:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004728:	4b18      	ldr	r3, [pc, #96]	@ (800478c <HAL_RCC_OscConfig+0x4c4>)
 800472a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800472e:	4a17      	ldr	r2, [pc, #92]	@ (800478c <HAL_RCC_OscConfig+0x4c4>)
 8004730:	f043 0301 	orr.w	r3, r3, #1
 8004734:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004738:	f7fe fa28 	bl	8002b8c <HAL_GetTick>
 800473c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800473e:	e008      	b.n	8004752 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004740:	f7fe fa24 	bl	8002b8c <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b11      	cmp	r3, #17
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e213      	b.n	8004b7a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004752:	4b0e      	ldr	r3, [pc, #56]	@ (800478c <HAL_RCC_OscConfig+0x4c4>)
 8004754:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d0ef      	beq.n	8004740 <HAL_RCC_OscConfig+0x478>
 8004760:	e01d      	b.n	800479e <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004762:	4b0a      	ldr	r3, [pc, #40]	@ (800478c <HAL_RCC_OscConfig+0x4c4>)
 8004764:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004768:	4a08      	ldr	r2, [pc, #32]	@ (800478c <HAL_RCC_OscConfig+0x4c4>)
 800476a:	f023 0301 	bic.w	r3, r3, #1
 800476e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004772:	f7fe fa0b 	bl	8002b8c <HAL_GetTick>
 8004776:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004778:	e00a      	b.n	8004790 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800477a:	f7fe fa07 	bl	8002b8c <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b11      	cmp	r3, #17
 8004786:	d903      	bls.n	8004790 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e1f6      	b.n	8004b7a <HAL_RCC_OscConfig+0x8b2>
 800478c:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004790:	4ba9      	ldr	r3, [pc, #676]	@ (8004a38 <HAL_RCC_OscConfig+0x770>)
 8004792:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1ed      	bne.n	800477a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0304 	and.w	r3, r3, #4
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f000 80bd 	beq.w	8004926 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047ac:	2300      	movs	r3, #0
 80047ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80047b2:	4ba1      	ldr	r3, [pc, #644]	@ (8004a38 <HAL_RCC_OscConfig+0x770>)
 80047b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d10e      	bne.n	80047dc <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047be:	4b9e      	ldr	r3, [pc, #632]	@ (8004a38 <HAL_RCC_OscConfig+0x770>)
 80047c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047c2:	4a9d      	ldr	r2, [pc, #628]	@ (8004a38 <HAL_RCC_OscConfig+0x770>)
 80047c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80047ca:	4b9b      	ldr	r3, [pc, #620]	@ (8004a38 <HAL_RCC_OscConfig+0x770>)
 80047cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047d2:	60fb      	str	r3, [r7, #12]
 80047d4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80047d6:	2301      	movs	r3, #1
 80047d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047dc:	4b97      	ldr	r3, [pc, #604]	@ (8004a3c <HAL_RCC_OscConfig+0x774>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d118      	bne.n	800481a <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047e8:	4b94      	ldr	r3, [pc, #592]	@ (8004a3c <HAL_RCC_OscConfig+0x774>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a93      	ldr	r2, [pc, #588]	@ (8004a3c <HAL_RCC_OscConfig+0x774>)
 80047ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047f4:	f7fe f9ca 	bl	8002b8c <HAL_GetTick>
 80047f8:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047fa:	e008      	b.n	800480e <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047fc:	f7fe f9c6 	bl	8002b8c <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b02      	cmp	r3, #2
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e1b5      	b.n	8004b7a <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800480e:	4b8b      	ldr	r3, [pc, #556]	@ (8004a3c <HAL_RCC_OscConfig+0x774>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004816:	2b00      	cmp	r3, #0
 8004818:	d0f0      	beq.n	80047fc <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b00      	cmp	r3, #0
 8004824:	d02c      	beq.n	8004880 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8004826:	4b84      	ldr	r3, [pc, #528]	@ (8004a38 <HAL_RCC_OscConfig+0x770>)
 8004828:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800482c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004838:	497f      	ldr	r1, [pc, #508]	@ (8004a38 <HAL_RCC_OscConfig+0x770>)
 800483a:	4313      	orrs	r3, r2
 800483c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f003 0304 	and.w	r3, r3, #4
 8004848:	2b00      	cmp	r3, #0
 800484a:	d010      	beq.n	800486e <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800484c:	4b7a      	ldr	r3, [pc, #488]	@ (8004a38 <HAL_RCC_OscConfig+0x770>)
 800484e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004852:	4a79      	ldr	r2, [pc, #484]	@ (8004a38 <HAL_RCC_OscConfig+0x770>)
 8004854:	f043 0304 	orr.w	r3, r3, #4
 8004858:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800485c:	4b76      	ldr	r3, [pc, #472]	@ (8004a38 <HAL_RCC_OscConfig+0x770>)
 800485e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004862:	4a75      	ldr	r2, [pc, #468]	@ (8004a38 <HAL_RCC_OscConfig+0x770>)
 8004864:	f043 0301 	orr.w	r3, r3, #1
 8004868:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800486c:	e018      	b.n	80048a0 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800486e:	4b72      	ldr	r3, [pc, #456]	@ (8004a38 <HAL_RCC_OscConfig+0x770>)
 8004870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004874:	4a70      	ldr	r2, [pc, #448]	@ (8004a38 <HAL_RCC_OscConfig+0x770>)
 8004876:	f043 0301 	orr.w	r3, r3, #1
 800487a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800487e:	e00f      	b.n	80048a0 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004880:	4b6d      	ldr	r3, [pc, #436]	@ (8004a38 <HAL_RCC_OscConfig+0x770>)
 8004882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004886:	4a6c      	ldr	r2, [pc, #432]	@ (8004a38 <HAL_RCC_OscConfig+0x770>)
 8004888:	f023 0301 	bic.w	r3, r3, #1
 800488c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004890:	4b69      	ldr	r3, [pc, #420]	@ (8004a38 <HAL_RCC_OscConfig+0x770>)
 8004892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004896:	4a68      	ldr	r2, [pc, #416]	@ (8004a38 <HAL_RCC_OscConfig+0x770>)
 8004898:	f023 0304 	bic.w	r3, r3, #4
 800489c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d016      	beq.n	80048d6 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a8:	f7fe f970 	bl	8002b8c <HAL_GetTick>
 80048ac:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048ae:	e00a      	b.n	80048c6 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048b0:	f7fe f96c 	bl	8002b8c <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048be:	4293      	cmp	r3, r2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e159      	b.n	8004b7a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048c6:	4b5c      	ldr	r3, [pc, #368]	@ (8004a38 <HAL_RCC_OscConfig+0x770>)
 80048c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048cc:	f003 0302 	and.w	r3, r3, #2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d0ed      	beq.n	80048b0 <HAL_RCC_OscConfig+0x5e8>
 80048d4:	e01d      	b.n	8004912 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d6:	f7fe f959 	bl	8002b8c <HAL_GetTick>
 80048da:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048dc:	e00a      	b.n	80048f4 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048de:	f7fe f955 	bl	8002b8c <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d901      	bls.n	80048f4 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e142      	b.n	8004b7a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048f4:	4b50      	ldr	r3, [pc, #320]	@ (8004a38 <HAL_RCC_OscConfig+0x770>)
 80048f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1ed      	bne.n	80048de <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8004902:	4b4d      	ldr	r3, [pc, #308]	@ (8004a38 <HAL_RCC_OscConfig+0x770>)
 8004904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004908:	4a4b      	ldr	r2, [pc, #300]	@ (8004a38 <HAL_RCC_OscConfig+0x770>)
 800490a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800490e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004912:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004916:	2b01      	cmp	r3, #1
 8004918:	d105      	bne.n	8004926 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800491a:	4b47      	ldr	r3, [pc, #284]	@ (8004a38 <HAL_RCC_OscConfig+0x770>)
 800491c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800491e:	4a46      	ldr	r2, [pc, #280]	@ (8004a38 <HAL_RCC_OscConfig+0x770>)
 8004920:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004924:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0320 	and.w	r3, r3, #32
 800492e:	2b00      	cmp	r3, #0
 8004930:	d03c      	beq.n	80049ac <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004936:	2b00      	cmp	r3, #0
 8004938:	d01c      	beq.n	8004974 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800493a:	4b3f      	ldr	r3, [pc, #252]	@ (8004a38 <HAL_RCC_OscConfig+0x770>)
 800493c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004940:	4a3d      	ldr	r2, [pc, #244]	@ (8004a38 <HAL_RCC_OscConfig+0x770>)
 8004942:	f043 0301 	orr.w	r3, r3, #1
 8004946:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800494a:	f7fe f91f 	bl	8002b8c <HAL_GetTick>
 800494e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004950:	e008      	b.n	8004964 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004952:	f7fe f91b 	bl	8002b8c <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b02      	cmp	r3, #2
 800495e:	d901      	bls.n	8004964 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e10a      	b.n	8004b7a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004964:	4b34      	ldr	r3, [pc, #208]	@ (8004a38 <HAL_RCC_OscConfig+0x770>)
 8004966:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0ef      	beq.n	8004952 <HAL_RCC_OscConfig+0x68a>
 8004972:	e01b      	b.n	80049ac <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004974:	4b30      	ldr	r3, [pc, #192]	@ (8004a38 <HAL_RCC_OscConfig+0x770>)
 8004976:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800497a:	4a2f      	ldr	r2, [pc, #188]	@ (8004a38 <HAL_RCC_OscConfig+0x770>)
 800497c:	f023 0301 	bic.w	r3, r3, #1
 8004980:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004984:	f7fe f902 	bl	8002b8c <HAL_GetTick>
 8004988:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800498a:	e008      	b.n	800499e <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800498c:	f7fe f8fe 	bl	8002b8c <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	2b02      	cmp	r3, #2
 8004998:	d901      	bls.n	800499e <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e0ed      	b.n	8004b7a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800499e:	4b26      	ldr	r3, [pc, #152]	@ (8004a38 <HAL_RCC_OscConfig+0x770>)
 80049a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1ef      	bne.n	800498c <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f000 80e1 	beq.w	8004b78 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	f040 80b5 	bne.w	8004b2a <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80049c0:	4b1d      	ldr	r3, [pc, #116]	@ (8004a38 <HAL_RCC_OscConfig+0x770>)
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	f003 0203 	and.w	r2, r3, #3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d124      	bne.n	8004a1e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049de:	3b01      	subs	r3, #1
 80049e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d11b      	bne.n	8004a1e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d113      	bne.n	8004a1e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a00:	085b      	lsrs	r3, r3, #1
 8004a02:	3b01      	subs	r3, #1
 8004a04:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d109      	bne.n	8004a1e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a14:	085b      	lsrs	r3, r3, #1
 8004a16:	3b01      	subs	r3, #1
 8004a18:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d05f      	beq.n	8004ade <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a1e:	6a3b      	ldr	r3, [r7, #32]
 8004a20:	2b0c      	cmp	r3, #12
 8004a22:	d05a      	beq.n	8004ada <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004a24:	4b04      	ldr	r3, [pc, #16]	@ (8004a38 <HAL_RCC_OscConfig+0x770>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a03      	ldr	r2, [pc, #12]	@ (8004a38 <HAL_RCC_OscConfig+0x770>)
 8004a2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a2e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a30:	f7fe f8ac 	bl	8002b8c <HAL_GetTick>
 8004a34:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a36:	e00c      	b.n	8004a52 <HAL_RCC_OscConfig+0x78a>
 8004a38:	40021000 	.word	0x40021000
 8004a3c:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a40:	f7fe f8a4 	bl	8002b8c <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e093      	b.n	8004b7a <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a52:	4b4c      	ldr	r3, [pc, #304]	@ (8004b84 <HAL_RCC_OscConfig+0x8bc>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1f0      	bne.n	8004a40 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a5e:	4b49      	ldr	r3, [pc, #292]	@ (8004b84 <HAL_RCC_OscConfig+0x8bc>)
 8004a60:	68da      	ldr	r2, [r3, #12]
 8004a62:	4b49      	ldr	r3, [pc, #292]	@ (8004b88 <HAL_RCC_OscConfig+0x8c0>)
 8004a64:	4013      	ands	r3, r2
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004a6e:	3a01      	subs	r2, #1
 8004a70:	0112      	lsls	r2, r2, #4
 8004a72:	4311      	orrs	r1, r2
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004a78:	0212      	lsls	r2, r2, #8
 8004a7a:	4311      	orrs	r1, r2
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004a80:	0852      	lsrs	r2, r2, #1
 8004a82:	3a01      	subs	r2, #1
 8004a84:	0552      	lsls	r2, r2, #21
 8004a86:	4311      	orrs	r1, r2
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004a8c:	0852      	lsrs	r2, r2, #1
 8004a8e:	3a01      	subs	r2, #1
 8004a90:	0652      	lsls	r2, r2, #25
 8004a92:	430a      	orrs	r2, r1
 8004a94:	493b      	ldr	r1, [pc, #236]	@ (8004b84 <HAL_RCC_OscConfig+0x8bc>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004a9a:	4b3a      	ldr	r3, [pc, #232]	@ (8004b84 <HAL_RCC_OscConfig+0x8bc>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a39      	ldr	r2, [pc, #228]	@ (8004b84 <HAL_RCC_OscConfig+0x8bc>)
 8004aa0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004aa4:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004aa6:	4b37      	ldr	r3, [pc, #220]	@ (8004b84 <HAL_RCC_OscConfig+0x8bc>)
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	4a36      	ldr	r2, [pc, #216]	@ (8004b84 <HAL_RCC_OscConfig+0x8bc>)
 8004aac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ab0:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ab2:	f7fe f86b 	bl	8002b8c <HAL_GetTick>
 8004ab6:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ab8:	e008      	b.n	8004acc <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aba:	f7fe f867 	bl	8002b8c <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d901      	bls.n	8004acc <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e056      	b.n	8004b7a <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004acc:	4b2d      	ldr	r3, [pc, #180]	@ (8004b84 <HAL_RCC_OscConfig+0x8bc>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d0f0      	beq.n	8004aba <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ad8:	e04e      	b.n	8004b78 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e04d      	b.n	8004b7a <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ade:	4b29      	ldr	r3, [pc, #164]	@ (8004b84 <HAL_RCC_OscConfig+0x8bc>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d146      	bne.n	8004b78 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004aea:	4b26      	ldr	r3, [pc, #152]	@ (8004b84 <HAL_RCC_OscConfig+0x8bc>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a25      	ldr	r2, [pc, #148]	@ (8004b84 <HAL_RCC_OscConfig+0x8bc>)
 8004af0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004af4:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004af6:	4b23      	ldr	r3, [pc, #140]	@ (8004b84 <HAL_RCC_OscConfig+0x8bc>)
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	4a22      	ldr	r2, [pc, #136]	@ (8004b84 <HAL_RCC_OscConfig+0x8bc>)
 8004afc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b00:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b02:	f7fe f843 	bl	8002b8c <HAL_GetTick>
 8004b06:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b08:	e008      	b.n	8004b1c <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b0a:	f7fe f83f 	bl	8002b8c <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d901      	bls.n	8004b1c <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e02e      	b.n	8004b7a <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b1c:	4b19      	ldr	r3, [pc, #100]	@ (8004b84 <HAL_RCC_OscConfig+0x8bc>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d0f0      	beq.n	8004b0a <HAL_RCC_OscConfig+0x842>
 8004b28:	e026      	b.n	8004b78 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b2a:	6a3b      	ldr	r3, [r7, #32]
 8004b2c:	2b0c      	cmp	r3, #12
 8004b2e:	d021      	beq.n	8004b74 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b30:	4b14      	ldr	r3, [pc, #80]	@ (8004b84 <HAL_RCC_OscConfig+0x8bc>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a13      	ldr	r2, [pc, #76]	@ (8004b84 <HAL_RCC_OscConfig+0x8bc>)
 8004b36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3c:	f7fe f826 	bl	8002b8c <HAL_GetTick>
 8004b40:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b42:	e008      	b.n	8004b56 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b44:	f7fe f822 	bl	8002b8c <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e011      	b.n	8004b7a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b56:	4b0b      	ldr	r3, [pc, #44]	@ (8004b84 <HAL_RCC_OscConfig+0x8bc>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1f0      	bne.n	8004b44 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8004b62:	4b08      	ldr	r3, [pc, #32]	@ (8004b84 <HAL_RCC_OscConfig+0x8bc>)
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	4a07      	ldr	r2, [pc, #28]	@ (8004b84 <HAL_RCC_OscConfig+0x8bc>)
 8004b68:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8004b6c:	f023 0303 	bic.w	r3, r3, #3
 8004b70:	60d3      	str	r3, [r2, #12]
 8004b72:	e001      	b.n	8004b78 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e000      	b.n	8004b7a <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3728      	adds	r7, #40	@ 0x28
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	40021000 	.word	0x40021000
 8004b88:	f99f808c 	.word	0xf99f808c

08004b8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d101      	bne.n	8004ba0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e0e7      	b.n	8004d70 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ba0:	4b75      	ldr	r3, [pc, #468]	@ (8004d78 <HAL_RCC_ClockConfig+0x1ec>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0307 	and.w	r3, r3, #7
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d910      	bls.n	8004bd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bae:	4b72      	ldr	r3, [pc, #456]	@ (8004d78 <HAL_RCC_ClockConfig+0x1ec>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f023 0207 	bic.w	r2, r3, #7
 8004bb6:	4970      	ldr	r1, [pc, #448]	@ (8004d78 <HAL_RCC_ClockConfig+0x1ec>)
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bbe:	4b6e      	ldr	r3, [pc, #440]	@ (8004d78 <HAL_RCC_ClockConfig+0x1ec>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0307 	and.w	r3, r3, #7
 8004bc6:	683a      	ldr	r2, [r7, #0]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d001      	beq.n	8004bd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e0cf      	b.n	8004d70 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0302 	and.w	r3, r3, #2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d010      	beq.n	8004bfe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689a      	ldr	r2, [r3, #8]
 8004be0:	4b66      	ldr	r3, [pc, #408]	@ (8004d7c <HAL_RCC_ClockConfig+0x1f0>)
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d908      	bls.n	8004bfe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bec:	4b63      	ldr	r3, [pc, #396]	@ (8004d7c <HAL_RCC_ClockConfig+0x1f0>)
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	4960      	ldr	r1, [pc, #384]	@ (8004d7c <HAL_RCC_ClockConfig+0x1f0>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d04c      	beq.n	8004ca4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	2b03      	cmp	r3, #3
 8004c10:	d107      	bne.n	8004c22 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c12:	4b5a      	ldr	r3, [pc, #360]	@ (8004d7c <HAL_RCC_ClockConfig+0x1f0>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d121      	bne.n	8004c62 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e0a6      	b.n	8004d70 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d107      	bne.n	8004c3a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c2a:	4b54      	ldr	r3, [pc, #336]	@ (8004d7c <HAL_RCC_ClockConfig+0x1f0>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d115      	bne.n	8004c62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e09a      	b.n	8004d70 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d107      	bne.n	8004c52 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c42:	4b4e      	ldr	r3, [pc, #312]	@ (8004d7c <HAL_RCC_ClockConfig+0x1f0>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d109      	bne.n	8004c62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e08e      	b.n	8004d70 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c52:	4b4a      	ldr	r3, [pc, #296]	@ (8004d7c <HAL_RCC_ClockConfig+0x1f0>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e086      	b.n	8004d70 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c62:	4b46      	ldr	r3, [pc, #280]	@ (8004d7c <HAL_RCC_ClockConfig+0x1f0>)
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f023 0203 	bic.w	r2, r3, #3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	4943      	ldr	r1, [pc, #268]	@ (8004d7c <HAL_RCC_ClockConfig+0x1f0>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c74:	f7fd ff8a 	bl	8002b8c <HAL_GetTick>
 8004c78:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c7a:	e00a      	b.n	8004c92 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c7c:	f7fd ff86 	bl	8002b8c <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e06e      	b.n	8004d70 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c92:	4b3a      	ldr	r3, [pc, #232]	@ (8004d7c <HAL_RCC_ClockConfig+0x1f0>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f003 020c 	and.w	r2, r3, #12
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d1eb      	bne.n	8004c7c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d010      	beq.n	8004cd2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689a      	ldr	r2, [r3, #8]
 8004cb4:	4b31      	ldr	r3, [pc, #196]	@ (8004d7c <HAL_RCC_ClockConfig+0x1f0>)
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d208      	bcs.n	8004cd2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cc0:	4b2e      	ldr	r3, [pc, #184]	@ (8004d7c <HAL_RCC_ClockConfig+0x1f0>)
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	492b      	ldr	r1, [pc, #172]	@ (8004d7c <HAL_RCC_ClockConfig+0x1f0>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cd2:	4b29      	ldr	r3, [pc, #164]	@ (8004d78 <HAL_RCC_ClockConfig+0x1ec>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0307 	and.w	r3, r3, #7
 8004cda:	683a      	ldr	r2, [r7, #0]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d210      	bcs.n	8004d02 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ce0:	4b25      	ldr	r3, [pc, #148]	@ (8004d78 <HAL_RCC_ClockConfig+0x1ec>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f023 0207 	bic.w	r2, r3, #7
 8004ce8:	4923      	ldr	r1, [pc, #140]	@ (8004d78 <HAL_RCC_ClockConfig+0x1ec>)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cf0:	4b21      	ldr	r3, [pc, #132]	@ (8004d78 <HAL_RCC_ClockConfig+0x1ec>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0307 	and.w	r3, r3, #7
 8004cf8:	683a      	ldr	r2, [r7, #0]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d001      	beq.n	8004d02 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e036      	b.n	8004d70 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0304 	and.w	r3, r3, #4
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d008      	beq.n	8004d20 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d0e:	4b1b      	ldr	r3, [pc, #108]	@ (8004d7c <HAL_RCC_ClockConfig+0x1f0>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	4918      	ldr	r1, [pc, #96]	@ (8004d7c <HAL_RCC_ClockConfig+0x1f0>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0308 	and.w	r3, r3, #8
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d009      	beq.n	8004d40 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d2c:	4b13      	ldr	r3, [pc, #76]	@ (8004d7c <HAL_RCC_ClockConfig+0x1f0>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	00db      	lsls	r3, r3, #3
 8004d3a:	4910      	ldr	r1, [pc, #64]	@ (8004d7c <HAL_RCC_ClockConfig+0x1f0>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d40:	f000 f824 	bl	8004d8c <HAL_RCC_GetSysClockFreq>
 8004d44:	4602      	mov	r2, r0
 8004d46:	4b0d      	ldr	r3, [pc, #52]	@ (8004d7c <HAL_RCC_ClockConfig+0x1f0>)
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	091b      	lsrs	r3, r3, #4
 8004d4c:	f003 030f 	and.w	r3, r3, #15
 8004d50:	490b      	ldr	r1, [pc, #44]	@ (8004d80 <HAL_RCC_ClockConfig+0x1f4>)
 8004d52:	5ccb      	ldrb	r3, [r1, r3]
 8004d54:	f003 031f 	and.w	r3, r3, #31
 8004d58:	fa22 f303 	lsr.w	r3, r2, r3
 8004d5c:	4a09      	ldr	r2, [pc, #36]	@ (8004d84 <HAL_RCC_ClockConfig+0x1f8>)
 8004d5e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d60:	4b09      	ldr	r3, [pc, #36]	@ (8004d88 <HAL_RCC_ClockConfig+0x1fc>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7fd fec1 	bl	8002aec <HAL_InitTick>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	72fb      	strb	r3, [r7, #11]

  return status;
 8004d6e:	7afb      	ldrb	r3, [r7, #11]
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	40022000 	.word	0x40022000
 8004d7c:	40021000 	.word	0x40021000
 8004d80:	08009900 	.word	0x08009900
 8004d84:	20000004 	.word	0x20000004
 8004d88:	20000008 	.word	0x20000008

08004d8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b089      	sub	sp, #36	@ 0x24
 8004d90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004d92:	2300      	movs	r3, #0
 8004d94:	61fb      	str	r3, [r7, #28]
 8004d96:	2300      	movs	r3, #0
 8004d98:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d9a:	4b3e      	ldr	r3, [pc, #248]	@ (8004e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f003 030c 	and.w	r3, r3, #12
 8004da2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004da4:	4b3b      	ldr	r3, [pc, #236]	@ (8004e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f003 0303 	and.w	r3, r3, #3
 8004dac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d005      	beq.n	8004dc0 <HAL_RCC_GetSysClockFreq+0x34>
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	2b0c      	cmp	r3, #12
 8004db8:	d121      	bne.n	8004dfe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d11e      	bne.n	8004dfe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004dc0:	4b34      	ldr	r3, [pc, #208]	@ (8004e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0308 	and.w	r3, r3, #8
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d107      	bne.n	8004ddc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004dcc:	4b31      	ldr	r3, [pc, #196]	@ (8004e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dd2:	0a1b      	lsrs	r3, r3, #8
 8004dd4:	f003 030f 	and.w	r3, r3, #15
 8004dd8:	61fb      	str	r3, [r7, #28]
 8004dda:	e005      	b.n	8004de8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ddc:	4b2d      	ldr	r3, [pc, #180]	@ (8004e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	091b      	lsrs	r3, r3, #4
 8004de2:	f003 030f 	and.w	r3, r3, #15
 8004de6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004de8:	4a2b      	ldr	r2, [pc, #172]	@ (8004e98 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004df0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10d      	bne.n	8004e14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004dfc:	e00a      	b.n	8004e14 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	2b04      	cmp	r3, #4
 8004e02:	d102      	bne.n	8004e0a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e04:	4b25      	ldr	r3, [pc, #148]	@ (8004e9c <HAL_RCC_GetSysClockFreq+0x110>)
 8004e06:	61bb      	str	r3, [r7, #24]
 8004e08:	e004      	b.n	8004e14 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	2b08      	cmp	r3, #8
 8004e0e:	d101      	bne.n	8004e14 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e10:	4b23      	ldr	r3, [pc, #140]	@ (8004ea0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004e12:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	2b0c      	cmp	r3, #12
 8004e18:	d134      	bne.n	8004e84 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e1a:	4b1e      	ldr	r3, [pc, #120]	@ (8004e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	f003 0303 	and.w	r3, r3, #3
 8004e22:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d003      	beq.n	8004e32 <HAL_RCC_GetSysClockFreq+0xa6>
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	2b03      	cmp	r3, #3
 8004e2e:	d003      	beq.n	8004e38 <HAL_RCC_GetSysClockFreq+0xac>
 8004e30:	e005      	b.n	8004e3e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004e32:	4b1a      	ldr	r3, [pc, #104]	@ (8004e9c <HAL_RCC_GetSysClockFreq+0x110>)
 8004e34:	617b      	str	r3, [r7, #20]
      break;
 8004e36:	e005      	b.n	8004e44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004e38:	4b19      	ldr	r3, [pc, #100]	@ (8004ea0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004e3a:	617b      	str	r3, [r7, #20]
      break;
 8004e3c:	e002      	b.n	8004e44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	617b      	str	r3, [r7, #20]
      break;
 8004e42:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e44:	4b13      	ldr	r3, [pc, #76]	@ (8004e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	091b      	lsrs	r3, r3, #4
 8004e4a:	f003 0307 	and.w	r3, r3, #7
 8004e4e:	3301      	adds	r3, #1
 8004e50:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e52:	4b10      	ldr	r3, [pc, #64]	@ (8004e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	0a1b      	lsrs	r3, r3, #8
 8004e58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e5c:	697a      	ldr	r2, [r7, #20]
 8004e5e:	fb03 f202 	mul.w	r2, r3, r2
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e68:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8004e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	0e5b      	lsrs	r3, r3, #25
 8004e70:	f003 0303 	and.w	r3, r3, #3
 8004e74:	3301      	adds	r3, #1
 8004e76:	005b      	lsls	r3, r3, #1
 8004e78:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e82:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004e84:	69bb      	ldr	r3, [r7, #24]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3724      	adds	r7, #36	@ 0x24
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	40021000 	.word	0x40021000
 8004e98:	08009918 	.word	0x08009918
 8004e9c:	00f42400 	.word	0x00f42400
 8004ea0:	007a1200 	.word	0x007a1200

08004ea4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ea8:	4b03      	ldr	r3, [pc, #12]	@ (8004eb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	20000004 	.word	0x20000004

08004ebc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ec0:	f7ff fff0 	bl	8004ea4 <HAL_RCC_GetHCLKFreq>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	4b06      	ldr	r3, [pc, #24]	@ (8004ee0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	0a1b      	lsrs	r3, r3, #8
 8004ecc:	f003 0307 	and.w	r3, r3, #7
 8004ed0:	4904      	ldr	r1, [pc, #16]	@ (8004ee4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ed2:	5ccb      	ldrb	r3, [r1, r3]
 8004ed4:	f003 031f 	and.w	r3, r3, #31
 8004ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	40021000 	.word	0x40021000
 8004ee4:	08009910 	.word	0x08009910

08004ee8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004eec:	f7ff ffda 	bl	8004ea4 <HAL_RCC_GetHCLKFreq>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	4b06      	ldr	r3, [pc, #24]	@ (8004f0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	0adb      	lsrs	r3, r3, #11
 8004ef8:	f003 0307 	and.w	r3, r3, #7
 8004efc:	4904      	ldr	r1, [pc, #16]	@ (8004f10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004efe:	5ccb      	ldrb	r3, [r1, r3]
 8004f00:	f003 031f 	and.w	r3, r3, #31
 8004f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	40021000 	.word	0x40021000
 8004f10:	08009910 	.word	0x08009910

08004f14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004f20:	4b2a      	ldr	r3, [pc, #168]	@ (8004fcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d003      	beq.n	8004f34 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004f2c:	f7ff f968 	bl	8004200 <HAL_PWREx_GetVoltageRange>
 8004f30:	6178      	str	r0, [r7, #20]
 8004f32:	e014      	b.n	8004f5e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f34:	4b25      	ldr	r3, [pc, #148]	@ (8004fcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f38:	4a24      	ldr	r2, [pc, #144]	@ (8004fcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f40:	4b22      	ldr	r3, [pc, #136]	@ (8004fcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f48:	60fb      	str	r3, [r7, #12]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004f4c:	f7ff f958 	bl	8004200 <HAL_PWREx_GetVoltageRange>
 8004f50:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004f52:	4b1e      	ldr	r3, [pc, #120]	@ (8004fcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f56:	4a1d      	ldr	r2, [pc, #116]	@ (8004fcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f5c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f64:	d10b      	bne.n	8004f7e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b80      	cmp	r3, #128	@ 0x80
 8004f6a:	d919      	bls.n	8004fa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004f70:	d902      	bls.n	8004f78 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f72:	2302      	movs	r3, #2
 8004f74:	613b      	str	r3, [r7, #16]
 8004f76:	e013      	b.n	8004fa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f78:	2301      	movs	r3, #1
 8004f7a:	613b      	str	r3, [r7, #16]
 8004f7c:	e010      	b.n	8004fa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b80      	cmp	r3, #128	@ 0x80
 8004f82:	d902      	bls.n	8004f8a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004f84:	2303      	movs	r3, #3
 8004f86:	613b      	str	r3, [r7, #16]
 8004f88:	e00a      	b.n	8004fa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2b80      	cmp	r3, #128	@ 0x80
 8004f8e:	d102      	bne.n	8004f96 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f90:	2302      	movs	r3, #2
 8004f92:	613b      	str	r3, [r7, #16]
 8004f94:	e004      	b.n	8004fa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2b70      	cmp	r3, #112	@ 0x70
 8004f9a:	d101      	bne.n	8004fa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8004fd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f023 0207 	bic.w	r2, r3, #7
 8004fa8:	4909      	ldr	r1, [pc, #36]	@ (8004fd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004fb0:	4b07      	ldr	r3, [pc, #28]	@ (8004fd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0307 	and.w	r3, r3, #7
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d001      	beq.n	8004fc2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e000      	b.n	8004fc4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3718      	adds	r7, #24
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	40021000 	.word	0x40021000
 8004fd0:	40022000 	.word	0x40022000

08004fd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b086      	sub	sp, #24
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004fdc:	2300      	movs	r3, #0
 8004fde:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	f000 809e 	beq.w	800512e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ff6:	4b46      	ldr	r3, [pc, #280]	@ (8005110 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ffa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005002:	2301      	movs	r3, #1
 8005004:	e000      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8005006:	2300      	movs	r3, #0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00d      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800500c:	4b40      	ldr	r3, [pc, #256]	@ (8005110 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800500e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005010:	4a3f      	ldr	r2, [pc, #252]	@ (8005110 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005012:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005016:	6593      	str	r3, [r2, #88]	@ 0x58
 8005018:	4b3d      	ldr	r3, [pc, #244]	@ (8005110 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800501a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800501c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005020:	60bb      	str	r3, [r7, #8]
 8005022:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005024:	2301      	movs	r3, #1
 8005026:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005028:	4b3a      	ldr	r3, [pc, #232]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a39      	ldr	r2, [pc, #228]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800502e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005032:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005034:	f7fd fdaa 	bl	8002b8c <HAL_GetTick>
 8005038:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800503a:	e009      	b.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800503c:	f7fd fda6 	bl	8002b8c <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b02      	cmp	r3, #2
 8005048:	d902      	bls.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	74fb      	strb	r3, [r7, #19]
        break;
 800504e:	e005      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005050:	4b30      	ldr	r3, [pc, #192]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005058:	2b00      	cmp	r3, #0
 800505a:	d0ef      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 800505c:	7cfb      	ldrb	r3, [r7, #19]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d15a      	bne.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005062:	4b2b      	ldr	r3, [pc, #172]	@ (8005110 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005064:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005068:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800506c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d01e      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	429a      	cmp	r2, r3
 800507c:	d019      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800507e:	4b24      	ldr	r3, [pc, #144]	@ (8005110 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005084:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005088:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800508a:	4b21      	ldr	r3, [pc, #132]	@ (8005110 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800508c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005090:	4a1f      	ldr	r2, [pc, #124]	@ (8005110 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005092:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005096:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800509a:	4b1d      	ldr	r3, [pc, #116]	@ (8005110 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800509c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050a0:	4a1b      	ldr	r2, [pc, #108]	@ (8005110 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80050a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80050aa:	4a19      	ldr	r2, [pc, #100]	@ (8005110 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f003 0301 	and.w	r3, r3, #1
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d016      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050bc:	f7fd fd66 	bl	8002b8c <HAL_GetTick>
 80050c0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050c2:	e00b      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050c4:	f7fd fd62 	bl	8002b8c <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d902      	bls.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	74fb      	strb	r3, [r7, #19]
            break;
 80050da:	e006      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005110 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80050de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d0ec      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 80050ea:	7cfb      	ldrb	r3, [r7, #19]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10b      	bne.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050f0:	4b07      	ldr	r3, [pc, #28]	@ (8005110 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80050f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050f6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050fe:	4904      	ldr	r1, [pc, #16]	@ (8005110 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005100:	4313      	orrs	r3, r2
 8005102:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005106:	e009      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005108:	7cfb      	ldrb	r3, [r7, #19]
 800510a:	74bb      	strb	r3, [r7, #18]
 800510c:	e006      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x148>
 800510e:	bf00      	nop
 8005110:	40021000 	.word	0x40021000
 8005114:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005118:	7cfb      	ldrb	r3, [r7, #19]
 800511a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800511c:	7c7b      	ldrb	r3, [r7, #17]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d105      	bne.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005122:	4b6e      	ldr	r3, [pc, #440]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005126:	4a6d      	ldr	r2, [pc, #436]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005128:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800512c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0301 	and.w	r3, r3, #1
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00a      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800513a:	4b68      	ldr	r3, [pc, #416]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800513c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005140:	f023 0203 	bic.w	r2, r3, #3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	4964      	ldr	r1, [pc, #400]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800514a:	4313      	orrs	r3, r2
 800514c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0302 	and.w	r3, r3, #2
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00a      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800515c:	4b5f      	ldr	r3, [pc, #380]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800515e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005162:	f023 020c 	bic.w	r2, r3, #12
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	495c      	ldr	r1, [pc, #368]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800516c:	4313      	orrs	r3, r2
 800516e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0304 	and.w	r3, r3, #4
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00a      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800517e:	4b57      	ldr	r3, [pc, #348]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005184:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	4953      	ldr	r1, [pc, #332]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800518e:	4313      	orrs	r3, r2
 8005190:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0320 	and.w	r3, r3, #32
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00a      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051a0:	4b4e      	ldr	r3, [pc, #312]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80051a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051a6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	494b      	ldr	r1, [pc, #300]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00a      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051c2:	4b46      	ldr	r3, [pc, #280]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80051c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051c8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a1b      	ldr	r3, [r3, #32]
 80051d0:	4942      	ldr	r1, [pc, #264]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00a      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051e4:	4b3d      	ldr	r3, [pc, #244]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80051e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f2:	493a      	ldr	r1, [pc, #232]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00a      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005206:	4b35      	ldr	r3, [pc, #212]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005208:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800520c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	4931      	ldr	r1, [pc, #196]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005216:	4313      	orrs	r3, r2
 8005218:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00a      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005228:	4b2c      	ldr	r3, [pc, #176]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800522a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800522e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	4929      	ldr	r1, [pc, #164]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005238:	4313      	orrs	r3, r2
 800523a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00a      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800524a:	4b24      	ldr	r3, [pc, #144]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800524c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005250:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	69db      	ldr	r3, [r3, #28]
 8005258:	4920      	ldr	r1, [pc, #128]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800525a:	4313      	orrs	r3, r2
 800525c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d015      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800526c:	4b1b      	ldr	r3, [pc, #108]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800526e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005272:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800527a:	4918      	ldr	r1, [pc, #96]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800527c:	4313      	orrs	r3, r2
 800527e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005286:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800528a:	d105      	bne.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800528c:	4b13      	ldr	r3, [pc, #76]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	4a12      	ldr	r2, [pc, #72]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005292:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005296:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d015      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052a4:	4b0d      	ldr	r3, [pc, #52]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80052a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b2:	490a      	ldr	r1, [pc, #40]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052c2:	d105      	bne.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052c4:	4b05      	ldr	r3, [pc, #20]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	4a04      	ldr	r2, [pc, #16]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80052ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052ce:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80052d0:	7cbb      	ldrb	r3, [r7, #18]
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3718      	adds	r7, #24
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	40021000 	.word	0x40021000

080052e0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80052e0:	b480      	push	{r7}
 80052e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80052e4:	4b05      	ldr	r3, [pc, #20]	@ (80052fc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a04      	ldr	r2, [pc, #16]	@ (80052fc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80052ea:	f043 0304 	orr.w	r3, r3, #4
 80052ee:	6013      	str	r3, [r2, #0]
}
 80052f0:	bf00      	nop
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	40021000 	.word	0x40021000

08005300 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e040      	b.n	8005394 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005316:	2b00      	cmp	r3, #0
 8005318:	d106      	bne.n	8005328 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f7fd fa9c 	bl	8002860 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2224      	movs	r2, #36	@ 0x24
 800532c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f022 0201 	bic.w	r2, r2, #1
 800533c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005342:	2b00      	cmp	r3, #0
 8005344:	d002      	beq.n	800534c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 fe92 	bl	8006070 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 fc35 	bl	8005bbc <UART_SetConfig>
 8005352:	4603      	mov	r3, r0
 8005354:	2b01      	cmp	r3, #1
 8005356:	d101      	bne.n	800535c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e01b      	b.n	8005394 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	685a      	ldr	r2, [r3, #4]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800536a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	689a      	ldr	r2, [r3, #8]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800537a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f042 0201 	orr.w	r2, r2, #1
 800538a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 ff11 	bl	80061b4 <UART_CheckIdleState>
 8005392:	4603      	mov	r3, r0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3708      	adds	r7, #8
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b08a      	sub	sp, #40	@ 0x28
 80053a0:	af02      	add	r7, sp, #8
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	603b      	str	r3, [r7, #0]
 80053a8:	4613      	mov	r3, r2
 80053aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80053b0:	2b20      	cmp	r3, #32
 80053b2:	d177      	bne.n	80054a4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d002      	beq.n	80053c0 <HAL_UART_Transmit+0x24>
 80053ba:	88fb      	ldrh	r3, [r7, #6]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d101      	bne.n	80053c4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e070      	b.n	80054a6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2221      	movs	r2, #33	@ 0x21
 80053d0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053d2:	f7fd fbdb 	bl	8002b8c <HAL_GetTick>
 80053d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	88fa      	ldrh	r2, [r7, #6]
 80053dc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	88fa      	ldrh	r2, [r7, #6]
 80053e4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053f0:	d108      	bne.n	8005404 <HAL_UART_Transmit+0x68>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d104      	bne.n	8005404 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80053fa:	2300      	movs	r3, #0
 80053fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	61bb      	str	r3, [r7, #24]
 8005402:	e003      	b.n	800540c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005408:	2300      	movs	r3, #0
 800540a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800540c:	e02f      	b.n	800546e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	9300      	str	r3, [sp, #0]
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	2200      	movs	r2, #0
 8005416:	2180      	movs	r1, #128	@ 0x80
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f000 ff73 	bl	8006304 <UART_WaitOnFlagUntilTimeout>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d004      	beq.n	800542e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2220      	movs	r2, #32
 8005428:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e03b      	b.n	80054a6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d10b      	bne.n	800544c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	881a      	ldrh	r2, [r3, #0]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005440:	b292      	uxth	r2, r2
 8005442:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	3302      	adds	r3, #2
 8005448:	61bb      	str	r3, [r7, #24]
 800544a:	e007      	b.n	800545c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	781a      	ldrb	r2, [r3, #0]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	3301      	adds	r3, #1
 800545a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005462:	b29b      	uxth	r3, r3
 8005464:	3b01      	subs	r3, #1
 8005466:	b29a      	uxth	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005474:	b29b      	uxth	r3, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1c9      	bne.n	800540e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	9300      	str	r3, [sp, #0]
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	2200      	movs	r2, #0
 8005482:	2140      	movs	r1, #64	@ 0x40
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f000 ff3d 	bl	8006304 <UART_WaitOnFlagUntilTimeout>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d004      	beq.n	800549a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2220      	movs	r2, #32
 8005494:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e005      	b.n	80054a6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2220      	movs	r2, #32
 800549e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80054a0:	2300      	movs	r3, #0
 80054a2:	e000      	b.n	80054a6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80054a4:	2302      	movs	r3, #2
  }
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3720      	adds	r7, #32
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
	...

080054b0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b08a      	sub	sp, #40	@ 0x28
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	4613      	mov	r3, r2
 80054bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054c4:	2b20      	cmp	r3, #32
 80054c6:	d137      	bne.n	8005538 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d002      	beq.n	80054d4 <HAL_UART_Receive_DMA+0x24>
 80054ce:	88fb      	ldrh	r3, [r7, #6]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d101      	bne.n	80054d8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e030      	b.n	800553a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a18      	ldr	r2, [pc, #96]	@ (8005544 <HAL_UART_Receive_DMA+0x94>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d01f      	beq.n	8005528 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d018      	beq.n	8005528 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	e853 3f00 	ldrex	r3, [r3]
 8005502:	613b      	str	r3, [r7, #16]
   return(result);
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800550a:	627b      	str	r3, [r7, #36]	@ 0x24
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	461a      	mov	r2, r3
 8005512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005514:	623b      	str	r3, [r7, #32]
 8005516:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005518:	69f9      	ldr	r1, [r7, #28]
 800551a:	6a3a      	ldr	r2, [r7, #32]
 800551c:	e841 2300 	strex	r3, r2, [r1]
 8005520:	61bb      	str	r3, [r7, #24]
   return(result);
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d1e6      	bne.n	80054f6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005528:	88fb      	ldrh	r3, [r7, #6]
 800552a:	461a      	mov	r2, r3
 800552c:	68b9      	ldr	r1, [r7, #8]
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f000 ff56 	bl	80063e0 <UART_Start_Receive_DMA>
 8005534:	4603      	mov	r3, r0
 8005536:	e000      	b.n	800553a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005538:	2302      	movs	r3, #2
  }
}
 800553a:	4618      	mov	r0, r3
 800553c:	3728      	adds	r7, #40	@ 0x28
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	40008000 	.word	0x40008000

08005548 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b0ba      	sub	sp, #232	@ 0xe8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	69db      	ldr	r3, [r3, #28]
 8005556:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800556e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005572:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005576:	4013      	ands	r3, r2
 8005578:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800557c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005580:	2b00      	cmp	r3, #0
 8005582:	d115      	bne.n	80055b0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005588:	f003 0320 	and.w	r3, r3, #32
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00f      	beq.n	80055b0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005594:	f003 0320 	and.w	r3, r3, #32
 8005598:	2b00      	cmp	r3, #0
 800559a:	d009      	beq.n	80055b0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f000 82ca 	beq.w	8005b3a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	4798      	blx	r3
      }
      return;
 80055ae:	e2c4      	b.n	8005b3a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80055b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f000 8117 	beq.w	80057e8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80055ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d106      	bne.n	80055d4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80055c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80055ca:	4b85      	ldr	r3, [pc, #532]	@ (80057e0 <HAL_UART_IRQHandler+0x298>)
 80055cc:	4013      	ands	r3, r2
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f000 810a 	beq.w	80057e8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80055d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055d8:	f003 0301 	and.w	r3, r3, #1
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d011      	beq.n	8005604 <HAL_UART_IRQHandler+0xbc>
 80055e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00b      	beq.n	8005604 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2201      	movs	r2, #1
 80055f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055fa:	f043 0201 	orr.w	r2, r3, #1
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	2b00      	cmp	r3, #0
 800560e:	d011      	beq.n	8005634 <HAL_UART_IRQHandler+0xec>
 8005610:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005614:	f003 0301 	and.w	r3, r3, #1
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00b      	beq.n	8005634 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2202      	movs	r2, #2
 8005622:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800562a:	f043 0204 	orr.w	r2, r3, #4
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005638:	f003 0304 	and.w	r3, r3, #4
 800563c:	2b00      	cmp	r3, #0
 800563e:	d011      	beq.n	8005664 <HAL_UART_IRQHandler+0x11c>
 8005640:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005644:	f003 0301 	and.w	r3, r3, #1
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00b      	beq.n	8005664 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2204      	movs	r2, #4
 8005652:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800565a:	f043 0202 	orr.w	r2, r3, #2
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005668:	f003 0308 	and.w	r3, r3, #8
 800566c:	2b00      	cmp	r3, #0
 800566e:	d017      	beq.n	80056a0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005674:	f003 0320 	and.w	r3, r3, #32
 8005678:	2b00      	cmp	r3, #0
 800567a:	d105      	bne.n	8005688 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800567c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005680:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00b      	beq.n	80056a0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2208      	movs	r2, #8
 800568e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005696:	f043 0208 	orr.w	r2, r3, #8
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80056a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d012      	beq.n	80056d2 <HAL_UART_IRQHandler+0x18a>
 80056ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00c      	beq.n	80056d2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80056c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056c8:	f043 0220 	orr.w	r2, r3, #32
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056d8:	2b00      	cmp	r3, #0
 80056da:	f000 8230 	beq.w	8005b3e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80056de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056e2:	f003 0320 	and.w	r3, r3, #32
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00d      	beq.n	8005706 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80056ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056ee:	f003 0320 	and.w	r3, r3, #32
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d007      	beq.n	8005706 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d003      	beq.n	8005706 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800570c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800571a:	2b40      	cmp	r3, #64	@ 0x40
 800571c:	d005      	beq.n	800572a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800571e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005722:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005726:	2b00      	cmp	r3, #0
 8005728:	d04f      	beq.n	80057ca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 ff1e 	bl	800656c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800573a:	2b40      	cmp	r3, #64	@ 0x40
 800573c:	d141      	bne.n	80057c2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	3308      	adds	r3, #8
 8005744:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005748:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800574c:	e853 3f00 	ldrex	r3, [r3]
 8005750:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005754:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005758:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800575c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	3308      	adds	r3, #8
 8005766:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800576a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800576e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005772:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005776:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800577a:	e841 2300 	strex	r3, r2, [r1]
 800577e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005782:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1d9      	bne.n	800573e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800578e:	2b00      	cmp	r3, #0
 8005790:	d013      	beq.n	80057ba <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005796:	4a13      	ldr	r2, [pc, #76]	@ (80057e4 <HAL_UART_IRQHandler+0x29c>)
 8005798:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800579e:	4618      	mov	r0, r3
 80057a0:	f7fd fc8c 	bl	80030bc <HAL_DMA_Abort_IT>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d017      	beq.n	80057da <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80057b4:	4610      	mov	r0, r2
 80057b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057b8:	e00f      	b.n	80057da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 f9e8 	bl	8005b90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057c0:	e00b      	b.n	80057da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 f9e4 	bl	8005b90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057c8:	e007      	b.n	80057da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f9e0 	bl	8005b90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80057d8:	e1b1      	b.n	8005b3e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057da:	bf00      	nop
    return;
 80057dc:	e1af      	b.n	8005b3e <HAL_UART_IRQHandler+0x5f6>
 80057de:	bf00      	nop
 80057e0:	04000120 	.word	0x04000120
 80057e4:	0800681d 	.word	0x0800681d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	f040 816a 	bne.w	8005ac6 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80057f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057f6:	f003 0310 	and.w	r3, r3, #16
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f000 8163 	beq.w	8005ac6 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005804:	f003 0310 	and.w	r3, r3, #16
 8005808:	2b00      	cmp	r3, #0
 800580a:	f000 815c 	beq.w	8005ac6 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2210      	movs	r2, #16
 8005814:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005820:	2b40      	cmp	r3, #64	@ 0x40
 8005822:	f040 80d4 	bne.w	80059ce <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005832:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005836:	2b00      	cmp	r3, #0
 8005838:	f000 80ad 	beq.w	8005996 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005842:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005846:	429a      	cmp	r2, r3
 8005848:	f080 80a5 	bcs.w	8005996 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005852:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0320 	and.w	r3, r3, #32
 8005862:	2b00      	cmp	r3, #0
 8005864:	f040 8086 	bne.w	8005974 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005870:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005874:	e853 3f00 	ldrex	r3, [r3]
 8005878:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800587c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005880:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005884:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	461a      	mov	r2, r3
 800588e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005892:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005896:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800589e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80058a2:	e841 2300 	strex	r3, r2, [r1]
 80058a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80058aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1da      	bne.n	8005868 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	3308      	adds	r3, #8
 80058b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058bc:	e853 3f00 	ldrex	r3, [r3]
 80058c0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80058c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80058c4:	f023 0301 	bic.w	r3, r3, #1
 80058c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	3308      	adds	r3, #8
 80058d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80058d6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80058da:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058dc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80058de:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80058e2:	e841 2300 	strex	r3, r2, [r1]
 80058e6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80058e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1e1      	bne.n	80058b2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	3308      	adds	r3, #8
 80058f4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80058f8:	e853 3f00 	ldrex	r3, [r3]
 80058fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80058fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005900:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005904:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	3308      	adds	r3, #8
 800590e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005912:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005914:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005916:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005918:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800591a:	e841 2300 	strex	r3, r2, [r1]
 800591e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005920:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1e3      	bne.n	80058ee <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2220      	movs	r2, #32
 800592a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800593c:	e853 3f00 	ldrex	r3, [r3]
 8005940:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005942:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005944:	f023 0310 	bic.w	r3, r3, #16
 8005948:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	461a      	mov	r2, r3
 8005952:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005956:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005958:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800595a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800595c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800595e:	e841 2300 	strex	r3, r2, [r1]
 8005962:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005964:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1e4      	bne.n	8005934 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800596e:	4618      	mov	r0, r3
 8005970:	f7fd fb66 	bl	8003040 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2202      	movs	r2, #2
 8005978:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005986:	b29b      	uxth	r3, r3
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	b29b      	uxth	r3, r3
 800598c:	4619      	mov	r1, r3
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 f908 	bl	8005ba4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005994:	e0d5      	b.n	8005b42 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800599c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80059a0:	429a      	cmp	r2, r3
 80059a2:	f040 80ce 	bne.w	8005b42 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0320 	and.w	r3, r3, #32
 80059b2:	2b20      	cmp	r3, #32
 80059b4:	f040 80c5 	bne.w	8005b42 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2202      	movs	r2, #2
 80059bc:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80059c4:	4619      	mov	r1, r3
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 f8ec 	bl	8005ba4 <HAL_UARTEx_RxEventCallback>
      return;
 80059cc:	e0b9      	b.n	8005b42 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80059da:	b29b      	uxth	r3, r3
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	f000 80ab 	beq.w	8005b46 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80059f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	f000 80a6 	beq.w	8005b46 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a02:	e853 3f00 	ldrex	r3, [r3]
 8005a06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a0e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	461a      	mov	r2, r3
 8005a18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005a1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a1e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a24:	e841 2300 	strex	r3, r2, [r1]
 8005a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1e4      	bne.n	80059fa <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	3308      	adds	r3, #8
 8005a36:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a3a:	e853 3f00 	ldrex	r3, [r3]
 8005a3e:	623b      	str	r3, [r7, #32]
   return(result);
 8005a40:	6a3b      	ldr	r3, [r7, #32]
 8005a42:	f023 0301 	bic.w	r3, r3, #1
 8005a46:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	3308      	adds	r3, #8
 8005a50:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005a54:	633a      	str	r2, [r7, #48]	@ 0x30
 8005a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a58:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a5c:	e841 2300 	strex	r3, r2, [r1]
 8005a60:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1e3      	bne.n	8005a30 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	e853 3f00 	ldrex	r3, [r3]
 8005a88:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f023 0310 	bic.w	r3, r3, #16
 8005a90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	461a      	mov	r2, r3
 8005a9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005a9e:	61fb      	str	r3, [r7, #28]
 8005aa0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa2:	69b9      	ldr	r1, [r7, #24]
 8005aa4:	69fa      	ldr	r2, [r7, #28]
 8005aa6:	e841 2300 	strex	r3, r2, [r1]
 8005aaa:	617b      	str	r3, [r7, #20]
   return(result);
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1e4      	bne.n	8005a7c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2202      	movs	r2, #2
 8005ab6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ab8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005abc:	4619      	mov	r1, r3
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f870 	bl	8005ba4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ac4:	e03f      	b.n	8005b46 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005aca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00e      	beq.n	8005af0 <HAL_UART_IRQHandler+0x5a8>
 8005ad2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ad6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d008      	beq.n	8005af0 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005ae6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 fed7 	bl	800689c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005aee:	e02d      	b.n	8005b4c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005af4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00e      	beq.n	8005b1a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d008      	beq.n	8005b1a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d01c      	beq.n	8005b4a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	4798      	blx	r3
    }
    return;
 8005b18:	e017      	b.n	8005b4a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d012      	beq.n	8005b4c <HAL_UART_IRQHandler+0x604>
 8005b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00c      	beq.n	8005b4c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 fe88 	bl	8006848 <UART_EndTransmit_IT>
    return;
 8005b38:	e008      	b.n	8005b4c <HAL_UART_IRQHandler+0x604>
      return;
 8005b3a:	bf00      	nop
 8005b3c:	e006      	b.n	8005b4c <HAL_UART_IRQHandler+0x604>
    return;
 8005b3e:	bf00      	nop
 8005b40:	e004      	b.n	8005b4c <HAL_UART_IRQHandler+0x604>
      return;
 8005b42:	bf00      	nop
 8005b44:	e002      	b.n	8005b4c <HAL_UART_IRQHandler+0x604>
      return;
 8005b46:	bf00      	nop
 8005b48:	e000      	b.n	8005b4c <HAL_UART_IRQHandler+0x604>
    return;
 8005b4a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005b4c:	37e8      	adds	r7, #232	@ 0xe8
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop

08005b54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005b5c:	bf00      	nop
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	460b      	mov	r3, r1
 8005bae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bc0:	b08a      	sub	sp, #40	@ 0x28
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	689a      	ldr	r2, [r3, #8]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	69db      	ldr	r3, [r3, #28]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	4b9e      	ldr	r3, [pc, #632]	@ (8005e64 <UART_SetConfig+0x2a8>)
 8005bec:	4013      	ands	r3, r2
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	6812      	ldr	r2, [r2, #0]
 8005bf2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005bf4:	430b      	orrs	r3, r1
 8005bf6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	68da      	ldr	r2, [r3, #12]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a93      	ldr	r2, [pc, #588]	@ (8005e68 <UART_SetConfig+0x2ac>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d004      	beq.n	8005c28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c24:	4313      	orrs	r3, r2
 8005c26:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c38:	430a      	orrs	r2, r1
 8005c3a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a8a      	ldr	r2, [pc, #552]	@ (8005e6c <UART_SetConfig+0x2b0>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d126      	bne.n	8005c94 <UART_SetConfig+0xd8>
 8005c46:	4b8a      	ldr	r3, [pc, #552]	@ (8005e70 <UART_SetConfig+0x2b4>)
 8005c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c4c:	f003 0303 	and.w	r3, r3, #3
 8005c50:	2b03      	cmp	r3, #3
 8005c52:	d81b      	bhi.n	8005c8c <UART_SetConfig+0xd0>
 8005c54:	a201      	add	r2, pc, #4	@ (adr r2, 8005c5c <UART_SetConfig+0xa0>)
 8005c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c5a:	bf00      	nop
 8005c5c:	08005c6d 	.word	0x08005c6d
 8005c60:	08005c7d 	.word	0x08005c7d
 8005c64:	08005c75 	.word	0x08005c75
 8005c68:	08005c85 	.word	0x08005c85
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c72:	e0ab      	b.n	8005dcc <UART_SetConfig+0x210>
 8005c74:	2302      	movs	r3, #2
 8005c76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c7a:	e0a7      	b.n	8005dcc <UART_SetConfig+0x210>
 8005c7c:	2304      	movs	r3, #4
 8005c7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c82:	e0a3      	b.n	8005dcc <UART_SetConfig+0x210>
 8005c84:	2308      	movs	r3, #8
 8005c86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c8a:	e09f      	b.n	8005dcc <UART_SetConfig+0x210>
 8005c8c:	2310      	movs	r3, #16
 8005c8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c92:	e09b      	b.n	8005dcc <UART_SetConfig+0x210>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a76      	ldr	r2, [pc, #472]	@ (8005e74 <UART_SetConfig+0x2b8>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d138      	bne.n	8005d10 <UART_SetConfig+0x154>
 8005c9e:	4b74      	ldr	r3, [pc, #464]	@ (8005e70 <UART_SetConfig+0x2b4>)
 8005ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ca4:	f003 030c 	and.w	r3, r3, #12
 8005ca8:	2b0c      	cmp	r3, #12
 8005caa:	d82d      	bhi.n	8005d08 <UART_SetConfig+0x14c>
 8005cac:	a201      	add	r2, pc, #4	@ (adr r2, 8005cb4 <UART_SetConfig+0xf8>)
 8005cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb2:	bf00      	nop
 8005cb4:	08005ce9 	.word	0x08005ce9
 8005cb8:	08005d09 	.word	0x08005d09
 8005cbc:	08005d09 	.word	0x08005d09
 8005cc0:	08005d09 	.word	0x08005d09
 8005cc4:	08005cf9 	.word	0x08005cf9
 8005cc8:	08005d09 	.word	0x08005d09
 8005ccc:	08005d09 	.word	0x08005d09
 8005cd0:	08005d09 	.word	0x08005d09
 8005cd4:	08005cf1 	.word	0x08005cf1
 8005cd8:	08005d09 	.word	0x08005d09
 8005cdc:	08005d09 	.word	0x08005d09
 8005ce0:	08005d09 	.word	0x08005d09
 8005ce4:	08005d01 	.word	0x08005d01
 8005ce8:	2300      	movs	r3, #0
 8005cea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cee:	e06d      	b.n	8005dcc <UART_SetConfig+0x210>
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cf6:	e069      	b.n	8005dcc <UART_SetConfig+0x210>
 8005cf8:	2304      	movs	r3, #4
 8005cfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cfe:	e065      	b.n	8005dcc <UART_SetConfig+0x210>
 8005d00:	2308      	movs	r3, #8
 8005d02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d06:	e061      	b.n	8005dcc <UART_SetConfig+0x210>
 8005d08:	2310      	movs	r3, #16
 8005d0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d0e:	e05d      	b.n	8005dcc <UART_SetConfig+0x210>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a58      	ldr	r2, [pc, #352]	@ (8005e78 <UART_SetConfig+0x2bc>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d125      	bne.n	8005d66 <UART_SetConfig+0x1aa>
 8005d1a:	4b55      	ldr	r3, [pc, #340]	@ (8005e70 <UART_SetConfig+0x2b4>)
 8005d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d20:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005d24:	2b30      	cmp	r3, #48	@ 0x30
 8005d26:	d016      	beq.n	8005d56 <UART_SetConfig+0x19a>
 8005d28:	2b30      	cmp	r3, #48	@ 0x30
 8005d2a:	d818      	bhi.n	8005d5e <UART_SetConfig+0x1a2>
 8005d2c:	2b20      	cmp	r3, #32
 8005d2e:	d00a      	beq.n	8005d46 <UART_SetConfig+0x18a>
 8005d30:	2b20      	cmp	r3, #32
 8005d32:	d814      	bhi.n	8005d5e <UART_SetConfig+0x1a2>
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d002      	beq.n	8005d3e <UART_SetConfig+0x182>
 8005d38:	2b10      	cmp	r3, #16
 8005d3a:	d008      	beq.n	8005d4e <UART_SetConfig+0x192>
 8005d3c:	e00f      	b.n	8005d5e <UART_SetConfig+0x1a2>
 8005d3e:	2300      	movs	r3, #0
 8005d40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d44:	e042      	b.n	8005dcc <UART_SetConfig+0x210>
 8005d46:	2302      	movs	r3, #2
 8005d48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d4c:	e03e      	b.n	8005dcc <UART_SetConfig+0x210>
 8005d4e:	2304      	movs	r3, #4
 8005d50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d54:	e03a      	b.n	8005dcc <UART_SetConfig+0x210>
 8005d56:	2308      	movs	r3, #8
 8005d58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d5c:	e036      	b.n	8005dcc <UART_SetConfig+0x210>
 8005d5e:	2310      	movs	r3, #16
 8005d60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d64:	e032      	b.n	8005dcc <UART_SetConfig+0x210>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a3f      	ldr	r2, [pc, #252]	@ (8005e68 <UART_SetConfig+0x2ac>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d12a      	bne.n	8005dc6 <UART_SetConfig+0x20a>
 8005d70:	4b3f      	ldr	r3, [pc, #252]	@ (8005e70 <UART_SetConfig+0x2b4>)
 8005d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d76:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005d7a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005d7e:	d01a      	beq.n	8005db6 <UART_SetConfig+0x1fa>
 8005d80:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005d84:	d81b      	bhi.n	8005dbe <UART_SetConfig+0x202>
 8005d86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d8a:	d00c      	beq.n	8005da6 <UART_SetConfig+0x1ea>
 8005d8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d90:	d815      	bhi.n	8005dbe <UART_SetConfig+0x202>
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d003      	beq.n	8005d9e <UART_SetConfig+0x1e2>
 8005d96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d9a:	d008      	beq.n	8005dae <UART_SetConfig+0x1f2>
 8005d9c:	e00f      	b.n	8005dbe <UART_SetConfig+0x202>
 8005d9e:	2300      	movs	r3, #0
 8005da0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005da4:	e012      	b.n	8005dcc <UART_SetConfig+0x210>
 8005da6:	2302      	movs	r3, #2
 8005da8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dac:	e00e      	b.n	8005dcc <UART_SetConfig+0x210>
 8005dae:	2304      	movs	r3, #4
 8005db0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005db4:	e00a      	b.n	8005dcc <UART_SetConfig+0x210>
 8005db6:	2308      	movs	r3, #8
 8005db8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dbc:	e006      	b.n	8005dcc <UART_SetConfig+0x210>
 8005dbe:	2310      	movs	r3, #16
 8005dc0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dc4:	e002      	b.n	8005dcc <UART_SetConfig+0x210>
 8005dc6:	2310      	movs	r3, #16
 8005dc8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a25      	ldr	r2, [pc, #148]	@ (8005e68 <UART_SetConfig+0x2ac>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	f040 808a 	bne.w	8005eec <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005dd8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005ddc:	2b08      	cmp	r3, #8
 8005dde:	d824      	bhi.n	8005e2a <UART_SetConfig+0x26e>
 8005de0:	a201      	add	r2, pc, #4	@ (adr r2, 8005de8 <UART_SetConfig+0x22c>)
 8005de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de6:	bf00      	nop
 8005de8:	08005e0d 	.word	0x08005e0d
 8005dec:	08005e2b 	.word	0x08005e2b
 8005df0:	08005e15 	.word	0x08005e15
 8005df4:	08005e2b 	.word	0x08005e2b
 8005df8:	08005e1b 	.word	0x08005e1b
 8005dfc:	08005e2b 	.word	0x08005e2b
 8005e00:	08005e2b 	.word	0x08005e2b
 8005e04:	08005e2b 	.word	0x08005e2b
 8005e08:	08005e23 	.word	0x08005e23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e0c:	f7ff f856 	bl	8004ebc <HAL_RCC_GetPCLK1Freq>
 8005e10:	61f8      	str	r0, [r7, #28]
        break;
 8005e12:	e010      	b.n	8005e36 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e14:	4b19      	ldr	r3, [pc, #100]	@ (8005e7c <UART_SetConfig+0x2c0>)
 8005e16:	61fb      	str	r3, [r7, #28]
        break;
 8005e18:	e00d      	b.n	8005e36 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e1a:	f7fe ffb7 	bl	8004d8c <HAL_RCC_GetSysClockFreq>
 8005e1e:	61f8      	str	r0, [r7, #28]
        break;
 8005e20:	e009      	b.n	8005e36 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e26:	61fb      	str	r3, [r7, #28]
        break;
 8005e28:	e005      	b.n	8005e36 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005e34:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f000 8109 	beq.w	8006050 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	685a      	ldr	r2, [r3, #4]
 8005e42:	4613      	mov	r3, r2
 8005e44:	005b      	lsls	r3, r3, #1
 8005e46:	4413      	add	r3, r2
 8005e48:	69fa      	ldr	r2, [r7, #28]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d305      	bcc.n	8005e5a <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e54:	69fa      	ldr	r2, [r7, #28]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d912      	bls.n	8005e80 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005e60:	e0f6      	b.n	8006050 <UART_SetConfig+0x494>
 8005e62:	bf00      	nop
 8005e64:	efff69f3 	.word	0xefff69f3
 8005e68:	40008000 	.word	0x40008000
 8005e6c:	40013800 	.word	0x40013800
 8005e70:	40021000 	.word	0x40021000
 8005e74:	40004400 	.word	0x40004400
 8005e78:	40004800 	.word	0x40004800
 8005e7c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	2200      	movs	r2, #0
 8005e84:	461c      	mov	r4, r3
 8005e86:	4615      	mov	r5, r2
 8005e88:	f04f 0200 	mov.w	r2, #0
 8005e8c:	f04f 0300 	mov.w	r3, #0
 8005e90:	022b      	lsls	r3, r5, #8
 8005e92:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005e96:	0222      	lsls	r2, r4, #8
 8005e98:	68f9      	ldr	r1, [r7, #12]
 8005e9a:	6849      	ldr	r1, [r1, #4]
 8005e9c:	0849      	lsrs	r1, r1, #1
 8005e9e:	2000      	movs	r0, #0
 8005ea0:	4688      	mov	r8, r1
 8005ea2:	4681      	mov	r9, r0
 8005ea4:	eb12 0a08 	adds.w	sl, r2, r8
 8005ea8:	eb43 0b09 	adc.w	fp, r3, r9
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	603b      	str	r3, [r7, #0]
 8005eb4:	607a      	str	r2, [r7, #4]
 8005eb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005eba:	4650      	mov	r0, sl
 8005ebc:	4659      	mov	r1, fp
 8005ebe:	f7fa fec3 	bl	8000c48 <__aeabi_uldivmod>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ed0:	d308      	bcc.n	8005ee4 <UART_SetConfig+0x328>
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ed8:	d204      	bcs.n	8005ee4 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	69ba      	ldr	r2, [r7, #24]
 8005ee0:	60da      	str	r2, [r3, #12]
 8005ee2:	e0b5      	b.n	8006050 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005eea:	e0b1      	b.n	8006050 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	69db      	ldr	r3, [r3, #28]
 8005ef0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ef4:	d15d      	bne.n	8005fb2 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8005ef6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005efa:	2b08      	cmp	r3, #8
 8005efc:	d827      	bhi.n	8005f4e <UART_SetConfig+0x392>
 8005efe:	a201      	add	r2, pc, #4	@ (adr r2, 8005f04 <UART_SetConfig+0x348>)
 8005f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f04:	08005f29 	.word	0x08005f29
 8005f08:	08005f31 	.word	0x08005f31
 8005f0c:	08005f39 	.word	0x08005f39
 8005f10:	08005f4f 	.word	0x08005f4f
 8005f14:	08005f3f 	.word	0x08005f3f
 8005f18:	08005f4f 	.word	0x08005f4f
 8005f1c:	08005f4f 	.word	0x08005f4f
 8005f20:	08005f4f 	.word	0x08005f4f
 8005f24:	08005f47 	.word	0x08005f47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f28:	f7fe ffc8 	bl	8004ebc <HAL_RCC_GetPCLK1Freq>
 8005f2c:	61f8      	str	r0, [r7, #28]
        break;
 8005f2e:	e014      	b.n	8005f5a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f30:	f7fe ffda 	bl	8004ee8 <HAL_RCC_GetPCLK2Freq>
 8005f34:	61f8      	str	r0, [r7, #28]
        break;
 8005f36:	e010      	b.n	8005f5a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f38:	4b4c      	ldr	r3, [pc, #304]	@ (800606c <UART_SetConfig+0x4b0>)
 8005f3a:	61fb      	str	r3, [r7, #28]
        break;
 8005f3c:	e00d      	b.n	8005f5a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f3e:	f7fe ff25 	bl	8004d8c <HAL_RCC_GetSysClockFreq>
 8005f42:	61f8      	str	r0, [r7, #28]
        break;
 8005f44:	e009      	b.n	8005f5a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f4a:	61fb      	str	r3, [r7, #28]
        break;
 8005f4c:	e005      	b.n	8005f5a <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005f58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d077      	beq.n	8006050 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	005a      	lsls	r2, r3, #1
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	085b      	lsrs	r3, r3, #1
 8005f6a:	441a      	add	r2, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f74:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	2b0f      	cmp	r3, #15
 8005f7a:	d916      	bls.n	8005faa <UART_SetConfig+0x3ee>
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f82:	d212      	bcs.n	8005faa <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	f023 030f 	bic.w	r3, r3, #15
 8005f8c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	085b      	lsrs	r3, r3, #1
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	f003 0307 	and.w	r3, r3, #7
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	8afb      	ldrh	r3, [r7, #22]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	8afa      	ldrh	r2, [r7, #22]
 8005fa6:	60da      	str	r2, [r3, #12]
 8005fa8:	e052      	b.n	8006050 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005fb0:	e04e      	b.n	8006050 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005fb2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005fb6:	2b08      	cmp	r3, #8
 8005fb8:	d827      	bhi.n	800600a <UART_SetConfig+0x44e>
 8005fba:	a201      	add	r2, pc, #4	@ (adr r2, 8005fc0 <UART_SetConfig+0x404>)
 8005fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc0:	08005fe5 	.word	0x08005fe5
 8005fc4:	08005fed 	.word	0x08005fed
 8005fc8:	08005ff5 	.word	0x08005ff5
 8005fcc:	0800600b 	.word	0x0800600b
 8005fd0:	08005ffb 	.word	0x08005ffb
 8005fd4:	0800600b 	.word	0x0800600b
 8005fd8:	0800600b 	.word	0x0800600b
 8005fdc:	0800600b 	.word	0x0800600b
 8005fe0:	08006003 	.word	0x08006003
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fe4:	f7fe ff6a 	bl	8004ebc <HAL_RCC_GetPCLK1Freq>
 8005fe8:	61f8      	str	r0, [r7, #28]
        break;
 8005fea:	e014      	b.n	8006016 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fec:	f7fe ff7c 	bl	8004ee8 <HAL_RCC_GetPCLK2Freq>
 8005ff0:	61f8      	str	r0, [r7, #28]
        break;
 8005ff2:	e010      	b.n	8006016 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ff4:	4b1d      	ldr	r3, [pc, #116]	@ (800606c <UART_SetConfig+0x4b0>)
 8005ff6:	61fb      	str	r3, [r7, #28]
        break;
 8005ff8:	e00d      	b.n	8006016 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ffa:	f7fe fec7 	bl	8004d8c <HAL_RCC_GetSysClockFreq>
 8005ffe:	61f8      	str	r0, [r7, #28]
        break;
 8006000:	e009      	b.n	8006016 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006002:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006006:	61fb      	str	r3, [r7, #28]
        break;
 8006008:	e005      	b.n	8006016 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800600a:	2300      	movs	r3, #0
 800600c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006014:	bf00      	nop
    }

    if (pclk != 0U)
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d019      	beq.n	8006050 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	085a      	lsrs	r2, r3, #1
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	441a      	add	r2, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	fbb2 f3f3 	udiv	r3, r2, r3
 800602e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	2b0f      	cmp	r3, #15
 8006034:	d909      	bls.n	800604a <UART_SetConfig+0x48e>
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800603c:	d205      	bcs.n	800604a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	b29a      	uxth	r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	60da      	str	r2, [r3, #12]
 8006048:	e002      	b.n	8006050 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2200      	movs	r2, #0
 8006054:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800605c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006060:	4618      	mov	r0, r3
 8006062:	3728      	adds	r7, #40	@ 0x28
 8006064:	46bd      	mov	sp, r7
 8006066:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800606a:	bf00      	nop
 800606c:	00f42400 	.word	0x00f42400

08006070 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800607c:	f003 0308 	and.w	r3, r3, #8
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00a      	beq.n	800609a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	430a      	orrs	r2, r1
 8006098:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00a      	beq.n	80060bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	430a      	orrs	r2, r1
 80060ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060c0:	f003 0302 	and.w	r3, r3, #2
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00a      	beq.n	80060de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	430a      	orrs	r2, r1
 80060dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e2:	f003 0304 	and.w	r3, r3, #4
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00a      	beq.n	8006100 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	430a      	orrs	r2, r1
 80060fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006104:	f003 0310 	and.w	r3, r3, #16
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00a      	beq.n	8006122 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	430a      	orrs	r2, r1
 8006120:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006126:	f003 0320 	and.w	r3, r3, #32
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00a      	beq.n	8006144 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	430a      	orrs	r2, r1
 8006142:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006148:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800614c:	2b00      	cmp	r3, #0
 800614e:	d01a      	beq.n	8006186 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	430a      	orrs	r2, r1
 8006164:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800616a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800616e:	d10a      	bne.n	8006186 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	430a      	orrs	r2, r1
 8006184:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800618a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00a      	beq.n	80061a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	430a      	orrs	r2, r1
 80061a6:	605a      	str	r2, [r3, #4]
  }
}
 80061a8:	bf00      	nop
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b098      	sub	sp, #96	@ 0x60
 80061b8:	af02      	add	r7, sp, #8
 80061ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061c4:	f7fc fce2 	bl	8002b8c <HAL_GetTick>
 80061c8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0308 	and.w	r3, r3, #8
 80061d4:	2b08      	cmp	r3, #8
 80061d6:	d12e      	bne.n	8006236 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80061dc:	9300      	str	r3, [sp, #0]
 80061de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061e0:	2200      	movs	r2, #0
 80061e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 f88c 	bl	8006304 <UART_WaitOnFlagUntilTimeout>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d021      	beq.n	8006236 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061fa:	e853 3f00 	ldrex	r3, [r3]
 80061fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006202:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006206:	653b      	str	r3, [r7, #80]	@ 0x50
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	461a      	mov	r2, r3
 800620e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006210:	647b      	str	r3, [r7, #68]	@ 0x44
 8006212:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006214:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006216:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006218:	e841 2300 	strex	r3, r2, [r1]
 800621c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800621e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1e6      	bne.n	80061f2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2220      	movs	r2, #32
 8006228:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e062      	b.n	80062fc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0304 	and.w	r3, r3, #4
 8006240:	2b04      	cmp	r3, #4
 8006242:	d149      	bne.n	80062d8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006244:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006248:	9300      	str	r3, [sp, #0]
 800624a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800624c:	2200      	movs	r2, #0
 800624e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 f856 	bl	8006304 <UART_WaitOnFlagUntilTimeout>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d03c      	beq.n	80062d8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006266:	e853 3f00 	ldrex	r3, [r3]
 800626a:	623b      	str	r3, [r7, #32]
   return(result);
 800626c:	6a3b      	ldr	r3, [r7, #32]
 800626e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006272:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	461a      	mov	r2, r3
 800627a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800627c:	633b      	str	r3, [r7, #48]	@ 0x30
 800627e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006280:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006282:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006284:	e841 2300 	strex	r3, r2, [r1]
 8006288:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800628a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1e6      	bne.n	800625e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	3308      	adds	r3, #8
 8006296:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	e853 3f00 	ldrex	r3, [r3]
 800629e:	60fb      	str	r3, [r7, #12]
   return(result);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f023 0301 	bic.w	r3, r3, #1
 80062a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	3308      	adds	r3, #8
 80062ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80062b0:	61fa      	str	r2, [r7, #28]
 80062b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b4:	69b9      	ldr	r1, [r7, #24]
 80062b6:	69fa      	ldr	r2, [r7, #28]
 80062b8:	e841 2300 	strex	r3, r2, [r1]
 80062bc:	617b      	str	r3, [r7, #20]
   return(result);
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d1e5      	bne.n	8006290 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2220      	movs	r2, #32
 80062c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e011      	b.n	80062fc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2220      	movs	r2, #32
 80062dc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2220      	movs	r2, #32
 80062e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3758      	adds	r7, #88	@ 0x58
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	603b      	str	r3, [r7, #0]
 8006310:	4613      	mov	r3, r2
 8006312:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006314:	e04f      	b.n	80063b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800631c:	d04b      	beq.n	80063b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800631e:	f7fc fc35 	bl	8002b8c <HAL_GetTick>
 8006322:	4602      	mov	r2, r0
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	69ba      	ldr	r2, [r7, #24]
 800632a:	429a      	cmp	r2, r3
 800632c:	d302      	bcc.n	8006334 <UART_WaitOnFlagUntilTimeout+0x30>
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d101      	bne.n	8006338 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006334:	2303      	movs	r3, #3
 8006336:	e04e      	b.n	80063d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 0304 	and.w	r3, r3, #4
 8006342:	2b00      	cmp	r3, #0
 8006344:	d037      	beq.n	80063b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	2b80      	cmp	r3, #128	@ 0x80
 800634a:	d034      	beq.n	80063b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	2b40      	cmp	r3, #64	@ 0x40
 8006350:	d031      	beq.n	80063b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	69db      	ldr	r3, [r3, #28]
 8006358:	f003 0308 	and.w	r3, r3, #8
 800635c:	2b08      	cmp	r3, #8
 800635e:	d110      	bne.n	8006382 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2208      	movs	r2, #8
 8006366:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f000 f8ff 	bl	800656c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2208      	movs	r2, #8
 8006372:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e029      	b.n	80063d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	69db      	ldr	r3, [r3, #28]
 8006388:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800638c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006390:	d111      	bne.n	80063b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800639a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	f000 f8e5 	bl	800656c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2220      	movs	r2, #32
 80063a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e00f      	b.n	80063d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	69da      	ldr	r2, [r3, #28]
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	4013      	ands	r3, r2
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	bf0c      	ite	eq
 80063c6:	2301      	moveq	r3, #1
 80063c8:	2300      	movne	r3, #0
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	461a      	mov	r2, r3
 80063ce:	79fb      	ldrb	r3, [r7, #7]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d0a0      	beq.n	8006316 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
	...

080063e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b096      	sub	sp, #88	@ 0x58
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	4613      	mov	r3, r2
 80063ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	68ba      	ldr	r2, [r7, #8]
 80063f2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	88fa      	ldrh	r2, [r7, #6]
 80063f8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2200      	movs	r2, #0
 8006400:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2222      	movs	r2, #34	@ 0x22
 8006408:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006410:	2b00      	cmp	r3, #0
 8006412:	d028      	beq.n	8006466 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006418:	4a3e      	ldr	r2, [pc, #248]	@ (8006514 <UART_Start_Receive_DMA+0x134>)
 800641a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006420:	4a3d      	ldr	r2, [pc, #244]	@ (8006518 <UART_Start_Receive_DMA+0x138>)
 8006422:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006428:	4a3c      	ldr	r2, [pc, #240]	@ (800651c <UART_Start_Receive_DMA+0x13c>)
 800642a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006430:	2200      	movs	r2, #0
 8006432:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	3324      	adds	r3, #36	@ 0x24
 800643e:	4619      	mov	r1, r3
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006444:	461a      	mov	r2, r3
 8006446:	88fb      	ldrh	r3, [r7, #6]
 8006448:	f7fc fd9a 	bl	8002f80 <HAL_DMA_Start_IT>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d009      	beq.n	8006466 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2210      	movs	r2, #16
 8006456:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2220      	movs	r2, #32
 800645e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e051      	b.n	800650a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d018      	beq.n	80064a0 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006474:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006476:	e853 3f00 	ldrex	r3, [r3]
 800647a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800647c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800647e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006482:	657b      	str	r3, [r7, #84]	@ 0x54
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	461a      	mov	r2, r3
 800648a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800648c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800648e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006490:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006492:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006494:	e841 2300 	strex	r3, r2, [r1]
 8006498:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800649a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800649c:	2b00      	cmp	r3, #0
 800649e:	d1e6      	bne.n	800646e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	3308      	adds	r3, #8
 80064a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064aa:	e853 3f00 	ldrex	r3, [r3]
 80064ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80064b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b2:	f043 0301 	orr.w	r3, r3, #1
 80064b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	3308      	adds	r3, #8
 80064be:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80064c0:	637a      	str	r2, [r7, #52]	@ 0x34
 80064c2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80064c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80064c8:	e841 2300 	strex	r3, r2, [r1]
 80064cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80064ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1e5      	bne.n	80064a0 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	3308      	adds	r3, #8
 80064da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	e853 3f00 	ldrex	r3, [r3]
 80064e2:	613b      	str	r3, [r7, #16]
   return(result);
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	3308      	adds	r3, #8
 80064f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80064f4:	623a      	str	r2, [r7, #32]
 80064f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f8:	69f9      	ldr	r1, [r7, #28]
 80064fa:	6a3a      	ldr	r2, [r7, #32]
 80064fc:	e841 2300 	strex	r3, r2, [r1]
 8006500:	61bb      	str	r3, [r7, #24]
   return(result);
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1e5      	bne.n	80064d4 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3758      	adds	r7, #88	@ 0x58
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	08006635 	.word	0x08006635
 8006518:	08006761 	.word	0x08006761
 800651c:	0800679f 	.word	0x0800679f

08006520 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006520:	b480      	push	{r7}
 8006522:	b089      	sub	sp, #36	@ 0x24
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	e853 3f00 	ldrex	r3, [r3]
 8006534:	60bb      	str	r3, [r7, #8]
   return(result);
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800653c:	61fb      	str	r3, [r7, #28]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	461a      	mov	r2, r3
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	61bb      	str	r3, [r7, #24]
 8006548:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654a:	6979      	ldr	r1, [r7, #20]
 800654c:	69ba      	ldr	r2, [r7, #24]
 800654e:	e841 2300 	strex	r3, r2, [r1]
 8006552:	613b      	str	r3, [r7, #16]
   return(result);
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1e6      	bne.n	8006528 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2220      	movs	r2, #32
 800655e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006560:	bf00      	nop
 8006562:	3724      	adds	r7, #36	@ 0x24
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800656c:	b480      	push	{r7}
 800656e:	b095      	sub	sp, #84	@ 0x54
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800657c:	e853 3f00 	ldrex	r3, [r3]
 8006580:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006584:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006588:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	461a      	mov	r2, r3
 8006590:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006592:	643b      	str	r3, [r7, #64]	@ 0x40
 8006594:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006596:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006598:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800659a:	e841 2300 	strex	r3, r2, [r1]
 800659e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80065a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1e6      	bne.n	8006574 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	3308      	adds	r3, #8
 80065ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ae:	6a3b      	ldr	r3, [r7, #32]
 80065b0:	e853 3f00 	ldrex	r3, [r3]
 80065b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	f023 0301 	bic.w	r3, r3, #1
 80065bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	3308      	adds	r3, #8
 80065c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80065c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80065cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065ce:	e841 2300 	strex	r3, r2, [r1]
 80065d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80065d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1e5      	bne.n	80065a6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d118      	bne.n	8006614 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	e853 3f00 	ldrex	r3, [r3]
 80065ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	f023 0310 	bic.w	r3, r3, #16
 80065f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	461a      	mov	r2, r3
 80065fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006600:	61bb      	str	r3, [r7, #24]
 8006602:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006604:	6979      	ldr	r1, [r7, #20]
 8006606:	69ba      	ldr	r2, [r7, #24]
 8006608:	e841 2300 	strex	r3, r2, [r1]
 800660c:	613b      	str	r3, [r7, #16]
   return(result);
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1e6      	bne.n	80065e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2220      	movs	r2, #32
 8006618:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006628:	bf00      	nop
 800662a:	3754      	adds	r7, #84	@ 0x54
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b09c      	sub	sp, #112	@ 0x70
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006640:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 0320 	and.w	r3, r3, #32
 800664c:	2b00      	cmp	r3, #0
 800664e:	d171      	bne.n	8006734 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8006650:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006652:	2200      	movs	r2, #0
 8006654:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006658:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006660:	e853 3f00 	ldrex	r3, [r3]
 8006664:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006666:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006668:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800666c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800666e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	461a      	mov	r2, r3
 8006674:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006676:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006678:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800667c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800667e:	e841 2300 	strex	r3, r2, [r1]
 8006682:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006684:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1e6      	bne.n	8006658 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800668a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	3308      	adds	r3, #8
 8006690:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006694:	e853 3f00 	ldrex	r3, [r3]
 8006698:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800669a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800669c:	f023 0301 	bic.w	r3, r3, #1
 80066a0:	667b      	str	r3, [r7, #100]	@ 0x64
 80066a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	3308      	adds	r3, #8
 80066a8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80066aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80066ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80066b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066b2:	e841 2300 	strex	r3, r2, [r1]
 80066b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80066b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1e5      	bne.n	800668a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	3308      	adds	r3, #8
 80066c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c8:	e853 3f00 	ldrex	r3, [r3]
 80066cc:	623b      	str	r3, [r7, #32]
   return(result);
 80066ce:	6a3b      	ldr	r3, [r7, #32]
 80066d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80066d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	3308      	adds	r3, #8
 80066dc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80066de:	633a      	str	r2, [r7, #48]	@ 0x30
 80066e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066e6:	e841 2300 	strex	r3, r2, [r1]
 80066ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80066ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d1e5      	bne.n	80066be <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80066f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80066f4:	2220      	movs	r2, #32
 80066f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80066fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d118      	bne.n	8006734 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006702:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	e853 3f00 	ldrex	r3, [r3]
 800670e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f023 0310 	bic.w	r3, r3, #16
 8006716:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006718:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	461a      	mov	r2, r3
 800671e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006720:	61fb      	str	r3, [r7, #28]
 8006722:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006724:	69b9      	ldr	r1, [r7, #24]
 8006726:	69fa      	ldr	r2, [r7, #28]
 8006728:	e841 2300 	strex	r3, r2, [r1]
 800672c:	617b      	str	r3, [r7, #20]
   return(result);
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d1e6      	bne.n	8006702 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006734:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006736:	2200      	movs	r2, #0
 8006738:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800673a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800673c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800673e:	2b01      	cmp	r3, #1
 8006740:	d107      	bne.n	8006752 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006742:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006744:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006748:	4619      	mov	r1, r3
 800674a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800674c:	f7ff fa2a 	bl	8005ba4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006750:	e002      	b.n	8006758 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006752:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006754:	f7ff fa08 	bl	8005b68 <HAL_UART_RxCpltCallback>
}
 8006758:	bf00      	nop
 800675a:	3770      	adds	r7, #112	@ 0x70
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800676c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2201      	movs	r2, #1
 8006772:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006778:	2b01      	cmp	r3, #1
 800677a:	d109      	bne.n	8006790 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006782:	085b      	lsrs	r3, r3, #1
 8006784:	b29b      	uxth	r3, r3
 8006786:	4619      	mov	r1, r3
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f7ff fa0b 	bl	8005ba4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800678e:	e002      	b.n	8006796 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f7ff f9f3 	bl	8005b7c <HAL_UART_RxHalfCpltCallback>
}
 8006796:	bf00      	nop
 8006798:	3710      	adds	r7, #16
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}

0800679e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800679e:	b580      	push	{r7, lr}
 80067a0:	b086      	sub	sp, #24
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067aa:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80067b0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067b8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067c4:	2b80      	cmp	r3, #128	@ 0x80
 80067c6:	d109      	bne.n	80067dc <UART_DMAError+0x3e>
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	2b21      	cmp	r3, #33	@ 0x21
 80067cc:	d106      	bne.n	80067dc <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 80067d6:	6978      	ldr	r0, [r7, #20]
 80067d8:	f7ff fea2 	bl	8006520 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067e6:	2b40      	cmp	r3, #64	@ 0x40
 80067e8:	d109      	bne.n	80067fe <UART_DMAError+0x60>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2b22      	cmp	r3, #34	@ 0x22
 80067ee:	d106      	bne.n	80067fe <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 80067f8:	6978      	ldr	r0, [r7, #20]
 80067fa:	f7ff feb7 	bl	800656c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006804:	f043 0210 	orr.w	r2, r3, #16
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800680e:	6978      	ldr	r0, [r7, #20]
 8006810:	f7ff f9be 	bl	8005b90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006814:	bf00      	nop
 8006816:	3718      	adds	r7, #24
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006828:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	f7ff f9a8 	bl	8005b90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006840:	bf00      	nop
 8006842:	3710      	adds	r7, #16
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b088      	sub	sp, #32
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	e853 3f00 	ldrex	r3, [r3]
 800685c:	60bb      	str	r3, [r7, #8]
   return(result);
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006864:	61fb      	str	r3, [r7, #28]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	461a      	mov	r2, r3
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	61bb      	str	r3, [r7, #24]
 8006870:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006872:	6979      	ldr	r1, [r7, #20]
 8006874:	69ba      	ldr	r2, [r7, #24]
 8006876:	e841 2300 	strex	r3, r2, [r1]
 800687a:	613b      	str	r3, [r7, #16]
   return(result);
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1e6      	bne.n	8006850 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2220      	movs	r2, #32
 8006886:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f7ff f960 	bl	8005b54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006894:	bf00      	nop
 8006896:	3720      	adds	r7, #32
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80068a4:	bf00      	nop
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <__cvt>:
 80068b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068b4:	ec57 6b10 	vmov	r6, r7, d0
 80068b8:	2f00      	cmp	r7, #0
 80068ba:	460c      	mov	r4, r1
 80068bc:	4619      	mov	r1, r3
 80068be:	463b      	mov	r3, r7
 80068c0:	bfbb      	ittet	lt
 80068c2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80068c6:	461f      	movlt	r7, r3
 80068c8:	2300      	movge	r3, #0
 80068ca:	232d      	movlt	r3, #45	@ 0x2d
 80068cc:	700b      	strb	r3, [r1, #0]
 80068ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80068d0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80068d4:	4691      	mov	r9, r2
 80068d6:	f023 0820 	bic.w	r8, r3, #32
 80068da:	bfbc      	itt	lt
 80068dc:	4632      	movlt	r2, r6
 80068de:	4616      	movlt	r6, r2
 80068e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80068e4:	d005      	beq.n	80068f2 <__cvt+0x42>
 80068e6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80068ea:	d100      	bne.n	80068ee <__cvt+0x3e>
 80068ec:	3401      	adds	r4, #1
 80068ee:	2102      	movs	r1, #2
 80068f0:	e000      	b.n	80068f4 <__cvt+0x44>
 80068f2:	2103      	movs	r1, #3
 80068f4:	ab03      	add	r3, sp, #12
 80068f6:	9301      	str	r3, [sp, #4]
 80068f8:	ab02      	add	r3, sp, #8
 80068fa:	9300      	str	r3, [sp, #0]
 80068fc:	ec47 6b10 	vmov	d0, r6, r7
 8006900:	4653      	mov	r3, sl
 8006902:	4622      	mov	r2, r4
 8006904:	f000 ff74 	bl	80077f0 <_dtoa_r>
 8006908:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800690c:	4605      	mov	r5, r0
 800690e:	d119      	bne.n	8006944 <__cvt+0x94>
 8006910:	f019 0f01 	tst.w	r9, #1
 8006914:	d00e      	beq.n	8006934 <__cvt+0x84>
 8006916:	eb00 0904 	add.w	r9, r0, r4
 800691a:	2200      	movs	r2, #0
 800691c:	2300      	movs	r3, #0
 800691e:	4630      	mov	r0, r6
 8006920:	4639      	mov	r1, r7
 8006922:	f7fa f8d1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006926:	b108      	cbz	r0, 800692c <__cvt+0x7c>
 8006928:	f8cd 900c 	str.w	r9, [sp, #12]
 800692c:	2230      	movs	r2, #48	@ 0x30
 800692e:	9b03      	ldr	r3, [sp, #12]
 8006930:	454b      	cmp	r3, r9
 8006932:	d31e      	bcc.n	8006972 <__cvt+0xc2>
 8006934:	9b03      	ldr	r3, [sp, #12]
 8006936:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006938:	1b5b      	subs	r3, r3, r5
 800693a:	4628      	mov	r0, r5
 800693c:	6013      	str	r3, [r2, #0]
 800693e:	b004      	add	sp, #16
 8006940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006944:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006948:	eb00 0904 	add.w	r9, r0, r4
 800694c:	d1e5      	bne.n	800691a <__cvt+0x6a>
 800694e:	7803      	ldrb	r3, [r0, #0]
 8006950:	2b30      	cmp	r3, #48	@ 0x30
 8006952:	d10a      	bne.n	800696a <__cvt+0xba>
 8006954:	2200      	movs	r2, #0
 8006956:	2300      	movs	r3, #0
 8006958:	4630      	mov	r0, r6
 800695a:	4639      	mov	r1, r7
 800695c:	f7fa f8b4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006960:	b918      	cbnz	r0, 800696a <__cvt+0xba>
 8006962:	f1c4 0401 	rsb	r4, r4, #1
 8006966:	f8ca 4000 	str.w	r4, [sl]
 800696a:	f8da 3000 	ldr.w	r3, [sl]
 800696e:	4499      	add	r9, r3
 8006970:	e7d3      	b.n	800691a <__cvt+0x6a>
 8006972:	1c59      	adds	r1, r3, #1
 8006974:	9103      	str	r1, [sp, #12]
 8006976:	701a      	strb	r2, [r3, #0]
 8006978:	e7d9      	b.n	800692e <__cvt+0x7e>

0800697a <__exponent>:
 800697a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800697c:	2900      	cmp	r1, #0
 800697e:	bfba      	itte	lt
 8006980:	4249      	neglt	r1, r1
 8006982:	232d      	movlt	r3, #45	@ 0x2d
 8006984:	232b      	movge	r3, #43	@ 0x2b
 8006986:	2909      	cmp	r1, #9
 8006988:	7002      	strb	r2, [r0, #0]
 800698a:	7043      	strb	r3, [r0, #1]
 800698c:	dd29      	ble.n	80069e2 <__exponent+0x68>
 800698e:	f10d 0307 	add.w	r3, sp, #7
 8006992:	461d      	mov	r5, r3
 8006994:	270a      	movs	r7, #10
 8006996:	461a      	mov	r2, r3
 8006998:	fbb1 f6f7 	udiv	r6, r1, r7
 800699c:	fb07 1416 	mls	r4, r7, r6, r1
 80069a0:	3430      	adds	r4, #48	@ 0x30
 80069a2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80069a6:	460c      	mov	r4, r1
 80069a8:	2c63      	cmp	r4, #99	@ 0x63
 80069aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80069ae:	4631      	mov	r1, r6
 80069b0:	dcf1      	bgt.n	8006996 <__exponent+0x1c>
 80069b2:	3130      	adds	r1, #48	@ 0x30
 80069b4:	1e94      	subs	r4, r2, #2
 80069b6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80069ba:	1c41      	adds	r1, r0, #1
 80069bc:	4623      	mov	r3, r4
 80069be:	42ab      	cmp	r3, r5
 80069c0:	d30a      	bcc.n	80069d8 <__exponent+0x5e>
 80069c2:	f10d 0309 	add.w	r3, sp, #9
 80069c6:	1a9b      	subs	r3, r3, r2
 80069c8:	42ac      	cmp	r4, r5
 80069ca:	bf88      	it	hi
 80069cc:	2300      	movhi	r3, #0
 80069ce:	3302      	adds	r3, #2
 80069d0:	4403      	add	r3, r0
 80069d2:	1a18      	subs	r0, r3, r0
 80069d4:	b003      	add	sp, #12
 80069d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069d8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80069dc:	f801 6f01 	strb.w	r6, [r1, #1]!
 80069e0:	e7ed      	b.n	80069be <__exponent+0x44>
 80069e2:	2330      	movs	r3, #48	@ 0x30
 80069e4:	3130      	adds	r1, #48	@ 0x30
 80069e6:	7083      	strb	r3, [r0, #2]
 80069e8:	70c1      	strb	r1, [r0, #3]
 80069ea:	1d03      	adds	r3, r0, #4
 80069ec:	e7f1      	b.n	80069d2 <__exponent+0x58>
	...

080069f0 <_printf_float>:
 80069f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069f4:	b08d      	sub	sp, #52	@ 0x34
 80069f6:	460c      	mov	r4, r1
 80069f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80069fc:	4616      	mov	r6, r2
 80069fe:	461f      	mov	r7, r3
 8006a00:	4605      	mov	r5, r0
 8006a02:	f000 fdf3 	bl	80075ec <_localeconv_r>
 8006a06:	6803      	ldr	r3, [r0, #0]
 8006a08:	9304      	str	r3, [sp, #16]
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7f9 fc30 	bl	8000270 <strlen>
 8006a10:	2300      	movs	r3, #0
 8006a12:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a14:	f8d8 3000 	ldr.w	r3, [r8]
 8006a18:	9005      	str	r0, [sp, #20]
 8006a1a:	3307      	adds	r3, #7
 8006a1c:	f023 0307 	bic.w	r3, r3, #7
 8006a20:	f103 0208 	add.w	r2, r3, #8
 8006a24:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006a28:	f8d4 b000 	ldr.w	fp, [r4]
 8006a2c:	f8c8 2000 	str.w	r2, [r8]
 8006a30:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a34:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006a38:	9307      	str	r3, [sp, #28]
 8006a3a:	f8cd 8018 	str.w	r8, [sp, #24]
 8006a3e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006a42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a46:	4b9c      	ldr	r3, [pc, #624]	@ (8006cb8 <_printf_float+0x2c8>)
 8006a48:	f04f 32ff 	mov.w	r2, #4294967295
 8006a4c:	f7fa f86e 	bl	8000b2c <__aeabi_dcmpun>
 8006a50:	bb70      	cbnz	r0, 8006ab0 <_printf_float+0xc0>
 8006a52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a56:	4b98      	ldr	r3, [pc, #608]	@ (8006cb8 <_printf_float+0x2c8>)
 8006a58:	f04f 32ff 	mov.w	r2, #4294967295
 8006a5c:	f7fa f848 	bl	8000af0 <__aeabi_dcmple>
 8006a60:	bb30      	cbnz	r0, 8006ab0 <_printf_float+0xc0>
 8006a62:	2200      	movs	r2, #0
 8006a64:	2300      	movs	r3, #0
 8006a66:	4640      	mov	r0, r8
 8006a68:	4649      	mov	r1, r9
 8006a6a:	f7fa f837 	bl	8000adc <__aeabi_dcmplt>
 8006a6e:	b110      	cbz	r0, 8006a76 <_printf_float+0x86>
 8006a70:	232d      	movs	r3, #45	@ 0x2d
 8006a72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a76:	4a91      	ldr	r2, [pc, #580]	@ (8006cbc <_printf_float+0x2cc>)
 8006a78:	4b91      	ldr	r3, [pc, #580]	@ (8006cc0 <_printf_float+0x2d0>)
 8006a7a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006a7e:	bf94      	ite	ls
 8006a80:	4690      	movls	r8, r2
 8006a82:	4698      	movhi	r8, r3
 8006a84:	2303      	movs	r3, #3
 8006a86:	6123      	str	r3, [r4, #16]
 8006a88:	f02b 0304 	bic.w	r3, fp, #4
 8006a8c:	6023      	str	r3, [r4, #0]
 8006a8e:	f04f 0900 	mov.w	r9, #0
 8006a92:	9700      	str	r7, [sp, #0]
 8006a94:	4633      	mov	r3, r6
 8006a96:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006a98:	4621      	mov	r1, r4
 8006a9a:	4628      	mov	r0, r5
 8006a9c:	f000 f9d2 	bl	8006e44 <_printf_common>
 8006aa0:	3001      	adds	r0, #1
 8006aa2:	f040 808d 	bne.w	8006bc0 <_printf_float+0x1d0>
 8006aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8006aaa:	b00d      	add	sp, #52	@ 0x34
 8006aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ab0:	4642      	mov	r2, r8
 8006ab2:	464b      	mov	r3, r9
 8006ab4:	4640      	mov	r0, r8
 8006ab6:	4649      	mov	r1, r9
 8006ab8:	f7fa f838 	bl	8000b2c <__aeabi_dcmpun>
 8006abc:	b140      	cbz	r0, 8006ad0 <_printf_float+0xe0>
 8006abe:	464b      	mov	r3, r9
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	bfbc      	itt	lt
 8006ac4:	232d      	movlt	r3, #45	@ 0x2d
 8006ac6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006aca:	4a7e      	ldr	r2, [pc, #504]	@ (8006cc4 <_printf_float+0x2d4>)
 8006acc:	4b7e      	ldr	r3, [pc, #504]	@ (8006cc8 <_printf_float+0x2d8>)
 8006ace:	e7d4      	b.n	8006a7a <_printf_float+0x8a>
 8006ad0:	6863      	ldr	r3, [r4, #4]
 8006ad2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006ad6:	9206      	str	r2, [sp, #24]
 8006ad8:	1c5a      	adds	r2, r3, #1
 8006ada:	d13b      	bne.n	8006b54 <_printf_float+0x164>
 8006adc:	2306      	movs	r3, #6
 8006ade:	6063      	str	r3, [r4, #4]
 8006ae0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	6022      	str	r2, [r4, #0]
 8006ae8:	9303      	str	r3, [sp, #12]
 8006aea:	ab0a      	add	r3, sp, #40	@ 0x28
 8006aec:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006af0:	ab09      	add	r3, sp, #36	@ 0x24
 8006af2:	9300      	str	r3, [sp, #0]
 8006af4:	6861      	ldr	r1, [r4, #4]
 8006af6:	ec49 8b10 	vmov	d0, r8, r9
 8006afa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006afe:	4628      	mov	r0, r5
 8006b00:	f7ff fed6 	bl	80068b0 <__cvt>
 8006b04:	9b06      	ldr	r3, [sp, #24]
 8006b06:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006b08:	2b47      	cmp	r3, #71	@ 0x47
 8006b0a:	4680      	mov	r8, r0
 8006b0c:	d129      	bne.n	8006b62 <_printf_float+0x172>
 8006b0e:	1cc8      	adds	r0, r1, #3
 8006b10:	db02      	blt.n	8006b18 <_printf_float+0x128>
 8006b12:	6863      	ldr	r3, [r4, #4]
 8006b14:	4299      	cmp	r1, r3
 8006b16:	dd41      	ble.n	8006b9c <_printf_float+0x1ac>
 8006b18:	f1aa 0a02 	sub.w	sl, sl, #2
 8006b1c:	fa5f fa8a 	uxtb.w	sl, sl
 8006b20:	3901      	subs	r1, #1
 8006b22:	4652      	mov	r2, sl
 8006b24:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006b28:	9109      	str	r1, [sp, #36]	@ 0x24
 8006b2a:	f7ff ff26 	bl	800697a <__exponent>
 8006b2e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006b30:	1813      	adds	r3, r2, r0
 8006b32:	2a01      	cmp	r2, #1
 8006b34:	4681      	mov	r9, r0
 8006b36:	6123      	str	r3, [r4, #16]
 8006b38:	dc02      	bgt.n	8006b40 <_printf_float+0x150>
 8006b3a:	6822      	ldr	r2, [r4, #0]
 8006b3c:	07d2      	lsls	r2, r2, #31
 8006b3e:	d501      	bpl.n	8006b44 <_printf_float+0x154>
 8006b40:	3301      	adds	r3, #1
 8006b42:	6123      	str	r3, [r4, #16]
 8006b44:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d0a2      	beq.n	8006a92 <_printf_float+0xa2>
 8006b4c:	232d      	movs	r3, #45	@ 0x2d
 8006b4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b52:	e79e      	b.n	8006a92 <_printf_float+0xa2>
 8006b54:	9a06      	ldr	r2, [sp, #24]
 8006b56:	2a47      	cmp	r2, #71	@ 0x47
 8006b58:	d1c2      	bne.n	8006ae0 <_printf_float+0xf0>
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d1c0      	bne.n	8006ae0 <_printf_float+0xf0>
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e7bd      	b.n	8006ade <_printf_float+0xee>
 8006b62:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006b66:	d9db      	bls.n	8006b20 <_printf_float+0x130>
 8006b68:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006b6c:	d118      	bne.n	8006ba0 <_printf_float+0x1b0>
 8006b6e:	2900      	cmp	r1, #0
 8006b70:	6863      	ldr	r3, [r4, #4]
 8006b72:	dd0b      	ble.n	8006b8c <_printf_float+0x19c>
 8006b74:	6121      	str	r1, [r4, #16]
 8006b76:	b913      	cbnz	r3, 8006b7e <_printf_float+0x18e>
 8006b78:	6822      	ldr	r2, [r4, #0]
 8006b7a:	07d0      	lsls	r0, r2, #31
 8006b7c:	d502      	bpl.n	8006b84 <_printf_float+0x194>
 8006b7e:	3301      	adds	r3, #1
 8006b80:	440b      	add	r3, r1
 8006b82:	6123      	str	r3, [r4, #16]
 8006b84:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006b86:	f04f 0900 	mov.w	r9, #0
 8006b8a:	e7db      	b.n	8006b44 <_printf_float+0x154>
 8006b8c:	b913      	cbnz	r3, 8006b94 <_printf_float+0x1a4>
 8006b8e:	6822      	ldr	r2, [r4, #0]
 8006b90:	07d2      	lsls	r2, r2, #31
 8006b92:	d501      	bpl.n	8006b98 <_printf_float+0x1a8>
 8006b94:	3302      	adds	r3, #2
 8006b96:	e7f4      	b.n	8006b82 <_printf_float+0x192>
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e7f2      	b.n	8006b82 <_printf_float+0x192>
 8006b9c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006ba0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ba2:	4299      	cmp	r1, r3
 8006ba4:	db05      	blt.n	8006bb2 <_printf_float+0x1c2>
 8006ba6:	6823      	ldr	r3, [r4, #0]
 8006ba8:	6121      	str	r1, [r4, #16]
 8006baa:	07d8      	lsls	r0, r3, #31
 8006bac:	d5ea      	bpl.n	8006b84 <_printf_float+0x194>
 8006bae:	1c4b      	adds	r3, r1, #1
 8006bb0:	e7e7      	b.n	8006b82 <_printf_float+0x192>
 8006bb2:	2900      	cmp	r1, #0
 8006bb4:	bfd4      	ite	le
 8006bb6:	f1c1 0202 	rsble	r2, r1, #2
 8006bba:	2201      	movgt	r2, #1
 8006bbc:	4413      	add	r3, r2
 8006bbe:	e7e0      	b.n	8006b82 <_printf_float+0x192>
 8006bc0:	6823      	ldr	r3, [r4, #0]
 8006bc2:	055a      	lsls	r2, r3, #21
 8006bc4:	d407      	bmi.n	8006bd6 <_printf_float+0x1e6>
 8006bc6:	6923      	ldr	r3, [r4, #16]
 8006bc8:	4642      	mov	r2, r8
 8006bca:	4631      	mov	r1, r6
 8006bcc:	4628      	mov	r0, r5
 8006bce:	47b8      	blx	r7
 8006bd0:	3001      	adds	r0, #1
 8006bd2:	d12b      	bne.n	8006c2c <_printf_float+0x23c>
 8006bd4:	e767      	b.n	8006aa6 <_printf_float+0xb6>
 8006bd6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006bda:	f240 80dd 	bls.w	8006d98 <_printf_float+0x3a8>
 8006bde:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006be2:	2200      	movs	r2, #0
 8006be4:	2300      	movs	r3, #0
 8006be6:	f7f9 ff6f 	bl	8000ac8 <__aeabi_dcmpeq>
 8006bea:	2800      	cmp	r0, #0
 8006bec:	d033      	beq.n	8006c56 <_printf_float+0x266>
 8006bee:	4a37      	ldr	r2, [pc, #220]	@ (8006ccc <_printf_float+0x2dc>)
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	4631      	mov	r1, r6
 8006bf4:	4628      	mov	r0, r5
 8006bf6:	47b8      	blx	r7
 8006bf8:	3001      	adds	r0, #1
 8006bfa:	f43f af54 	beq.w	8006aa6 <_printf_float+0xb6>
 8006bfe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006c02:	4543      	cmp	r3, r8
 8006c04:	db02      	blt.n	8006c0c <_printf_float+0x21c>
 8006c06:	6823      	ldr	r3, [r4, #0]
 8006c08:	07d8      	lsls	r0, r3, #31
 8006c0a:	d50f      	bpl.n	8006c2c <_printf_float+0x23c>
 8006c0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c10:	4631      	mov	r1, r6
 8006c12:	4628      	mov	r0, r5
 8006c14:	47b8      	blx	r7
 8006c16:	3001      	adds	r0, #1
 8006c18:	f43f af45 	beq.w	8006aa6 <_printf_float+0xb6>
 8006c1c:	f04f 0900 	mov.w	r9, #0
 8006c20:	f108 38ff 	add.w	r8, r8, #4294967295
 8006c24:	f104 0a1a 	add.w	sl, r4, #26
 8006c28:	45c8      	cmp	r8, r9
 8006c2a:	dc09      	bgt.n	8006c40 <_printf_float+0x250>
 8006c2c:	6823      	ldr	r3, [r4, #0]
 8006c2e:	079b      	lsls	r3, r3, #30
 8006c30:	f100 8103 	bmi.w	8006e3a <_printf_float+0x44a>
 8006c34:	68e0      	ldr	r0, [r4, #12]
 8006c36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c38:	4298      	cmp	r0, r3
 8006c3a:	bfb8      	it	lt
 8006c3c:	4618      	movlt	r0, r3
 8006c3e:	e734      	b.n	8006aaa <_printf_float+0xba>
 8006c40:	2301      	movs	r3, #1
 8006c42:	4652      	mov	r2, sl
 8006c44:	4631      	mov	r1, r6
 8006c46:	4628      	mov	r0, r5
 8006c48:	47b8      	blx	r7
 8006c4a:	3001      	adds	r0, #1
 8006c4c:	f43f af2b 	beq.w	8006aa6 <_printf_float+0xb6>
 8006c50:	f109 0901 	add.w	r9, r9, #1
 8006c54:	e7e8      	b.n	8006c28 <_printf_float+0x238>
 8006c56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	dc39      	bgt.n	8006cd0 <_printf_float+0x2e0>
 8006c5c:	4a1b      	ldr	r2, [pc, #108]	@ (8006ccc <_printf_float+0x2dc>)
 8006c5e:	2301      	movs	r3, #1
 8006c60:	4631      	mov	r1, r6
 8006c62:	4628      	mov	r0, r5
 8006c64:	47b8      	blx	r7
 8006c66:	3001      	adds	r0, #1
 8006c68:	f43f af1d 	beq.w	8006aa6 <_printf_float+0xb6>
 8006c6c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006c70:	ea59 0303 	orrs.w	r3, r9, r3
 8006c74:	d102      	bne.n	8006c7c <_printf_float+0x28c>
 8006c76:	6823      	ldr	r3, [r4, #0]
 8006c78:	07d9      	lsls	r1, r3, #31
 8006c7a:	d5d7      	bpl.n	8006c2c <_printf_float+0x23c>
 8006c7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c80:	4631      	mov	r1, r6
 8006c82:	4628      	mov	r0, r5
 8006c84:	47b8      	blx	r7
 8006c86:	3001      	adds	r0, #1
 8006c88:	f43f af0d 	beq.w	8006aa6 <_printf_float+0xb6>
 8006c8c:	f04f 0a00 	mov.w	sl, #0
 8006c90:	f104 0b1a 	add.w	fp, r4, #26
 8006c94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c96:	425b      	negs	r3, r3
 8006c98:	4553      	cmp	r3, sl
 8006c9a:	dc01      	bgt.n	8006ca0 <_printf_float+0x2b0>
 8006c9c:	464b      	mov	r3, r9
 8006c9e:	e793      	b.n	8006bc8 <_printf_float+0x1d8>
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	465a      	mov	r2, fp
 8006ca4:	4631      	mov	r1, r6
 8006ca6:	4628      	mov	r0, r5
 8006ca8:	47b8      	blx	r7
 8006caa:	3001      	adds	r0, #1
 8006cac:	f43f aefb 	beq.w	8006aa6 <_printf_float+0xb6>
 8006cb0:	f10a 0a01 	add.w	sl, sl, #1
 8006cb4:	e7ee      	b.n	8006c94 <_printf_float+0x2a4>
 8006cb6:	bf00      	nop
 8006cb8:	7fefffff 	.word	0x7fefffff
 8006cbc:	08009a49 	.word	0x08009a49
 8006cc0:	08009a4d 	.word	0x08009a4d
 8006cc4:	08009a51 	.word	0x08009a51
 8006cc8:	08009a55 	.word	0x08009a55
 8006ccc:	08009a59 	.word	0x08009a59
 8006cd0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006cd2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006cd6:	4553      	cmp	r3, sl
 8006cd8:	bfa8      	it	ge
 8006cda:	4653      	movge	r3, sl
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	4699      	mov	r9, r3
 8006ce0:	dc36      	bgt.n	8006d50 <_printf_float+0x360>
 8006ce2:	f04f 0b00 	mov.w	fp, #0
 8006ce6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006cea:	f104 021a 	add.w	r2, r4, #26
 8006cee:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006cf0:	9306      	str	r3, [sp, #24]
 8006cf2:	eba3 0309 	sub.w	r3, r3, r9
 8006cf6:	455b      	cmp	r3, fp
 8006cf8:	dc31      	bgt.n	8006d5e <_printf_float+0x36e>
 8006cfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cfc:	459a      	cmp	sl, r3
 8006cfe:	dc3a      	bgt.n	8006d76 <_printf_float+0x386>
 8006d00:	6823      	ldr	r3, [r4, #0]
 8006d02:	07da      	lsls	r2, r3, #31
 8006d04:	d437      	bmi.n	8006d76 <_printf_float+0x386>
 8006d06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d08:	ebaa 0903 	sub.w	r9, sl, r3
 8006d0c:	9b06      	ldr	r3, [sp, #24]
 8006d0e:	ebaa 0303 	sub.w	r3, sl, r3
 8006d12:	4599      	cmp	r9, r3
 8006d14:	bfa8      	it	ge
 8006d16:	4699      	movge	r9, r3
 8006d18:	f1b9 0f00 	cmp.w	r9, #0
 8006d1c:	dc33      	bgt.n	8006d86 <_printf_float+0x396>
 8006d1e:	f04f 0800 	mov.w	r8, #0
 8006d22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d26:	f104 0b1a 	add.w	fp, r4, #26
 8006d2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d2c:	ebaa 0303 	sub.w	r3, sl, r3
 8006d30:	eba3 0309 	sub.w	r3, r3, r9
 8006d34:	4543      	cmp	r3, r8
 8006d36:	f77f af79 	ble.w	8006c2c <_printf_float+0x23c>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	465a      	mov	r2, fp
 8006d3e:	4631      	mov	r1, r6
 8006d40:	4628      	mov	r0, r5
 8006d42:	47b8      	blx	r7
 8006d44:	3001      	adds	r0, #1
 8006d46:	f43f aeae 	beq.w	8006aa6 <_printf_float+0xb6>
 8006d4a:	f108 0801 	add.w	r8, r8, #1
 8006d4e:	e7ec      	b.n	8006d2a <_printf_float+0x33a>
 8006d50:	4642      	mov	r2, r8
 8006d52:	4631      	mov	r1, r6
 8006d54:	4628      	mov	r0, r5
 8006d56:	47b8      	blx	r7
 8006d58:	3001      	adds	r0, #1
 8006d5a:	d1c2      	bne.n	8006ce2 <_printf_float+0x2f2>
 8006d5c:	e6a3      	b.n	8006aa6 <_printf_float+0xb6>
 8006d5e:	2301      	movs	r3, #1
 8006d60:	4631      	mov	r1, r6
 8006d62:	4628      	mov	r0, r5
 8006d64:	9206      	str	r2, [sp, #24]
 8006d66:	47b8      	blx	r7
 8006d68:	3001      	adds	r0, #1
 8006d6a:	f43f ae9c 	beq.w	8006aa6 <_printf_float+0xb6>
 8006d6e:	9a06      	ldr	r2, [sp, #24]
 8006d70:	f10b 0b01 	add.w	fp, fp, #1
 8006d74:	e7bb      	b.n	8006cee <_printf_float+0x2fe>
 8006d76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d7a:	4631      	mov	r1, r6
 8006d7c:	4628      	mov	r0, r5
 8006d7e:	47b8      	blx	r7
 8006d80:	3001      	adds	r0, #1
 8006d82:	d1c0      	bne.n	8006d06 <_printf_float+0x316>
 8006d84:	e68f      	b.n	8006aa6 <_printf_float+0xb6>
 8006d86:	9a06      	ldr	r2, [sp, #24]
 8006d88:	464b      	mov	r3, r9
 8006d8a:	4442      	add	r2, r8
 8006d8c:	4631      	mov	r1, r6
 8006d8e:	4628      	mov	r0, r5
 8006d90:	47b8      	blx	r7
 8006d92:	3001      	adds	r0, #1
 8006d94:	d1c3      	bne.n	8006d1e <_printf_float+0x32e>
 8006d96:	e686      	b.n	8006aa6 <_printf_float+0xb6>
 8006d98:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006d9c:	f1ba 0f01 	cmp.w	sl, #1
 8006da0:	dc01      	bgt.n	8006da6 <_printf_float+0x3b6>
 8006da2:	07db      	lsls	r3, r3, #31
 8006da4:	d536      	bpl.n	8006e14 <_printf_float+0x424>
 8006da6:	2301      	movs	r3, #1
 8006da8:	4642      	mov	r2, r8
 8006daa:	4631      	mov	r1, r6
 8006dac:	4628      	mov	r0, r5
 8006dae:	47b8      	blx	r7
 8006db0:	3001      	adds	r0, #1
 8006db2:	f43f ae78 	beq.w	8006aa6 <_printf_float+0xb6>
 8006db6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dba:	4631      	mov	r1, r6
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	47b8      	blx	r7
 8006dc0:	3001      	adds	r0, #1
 8006dc2:	f43f ae70 	beq.w	8006aa6 <_printf_float+0xb6>
 8006dc6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006dca:	2200      	movs	r2, #0
 8006dcc:	2300      	movs	r3, #0
 8006dce:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006dd2:	f7f9 fe79 	bl	8000ac8 <__aeabi_dcmpeq>
 8006dd6:	b9c0      	cbnz	r0, 8006e0a <_printf_float+0x41a>
 8006dd8:	4653      	mov	r3, sl
 8006dda:	f108 0201 	add.w	r2, r8, #1
 8006dde:	4631      	mov	r1, r6
 8006de0:	4628      	mov	r0, r5
 8006de2:	47b8      	blx	r7
 8006de4:	3001      	adds	r0, #1
 8006de6:	d10c      	bne.n	8006e02 <_printf_float+0x412>
 8006de8:	e65d      	b.n	8006aa6 <_printf_float+0xb6>
 8006dea:	2301      	movs	r3, #1
 8006dec:	465a      	mov	r2, fp
 8006dee:	4631      	mov	r1, r6
 8006df0:	4628      	mov	r0, r5
 8006df2:	47b8      	blx	r7
 8006df4:	3001      	adds	r0, #1
 8006df6:	f43f ae56 	beq.w	8006aa6 <_printf_float+0xb6>
 8006dfa:	f108 0801 	add.w	r8, r8, #1
 8006dfe:	45d0      	cmp	r8, sl
 8006e00:	dbf3      	blt.n	8006dea <_printf_float+0x3fa>
 8006e02:	464b      	mov	r3, r9
 8006e04:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006e08:	e6df      	b.n	8006bca <_printf_float+0x1da>
 8006e0a:	f04f 0800 	mov.w	r8, #0
 8006e0e:	f104 0b1a 	add.w	fp, r4, #26
 8006e12:	e7f4      	b.n	8006dfe <_printf_float+0x40e>
 8006e14:	2301      	movs	r3, #1
 8006e16:	4642      	mov	r2, r8
 8006e18:	e7e1      	b.n	8006dde <_printf_float+0x3ee>
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	464a      	mov	r2, r9
 8006e1e:	4631      	mov	r1, r6
 8006e20:	4628      	mov	r0, r5
 8006e22:	47b8      	blx	r7
 8006e24:	3001      	adds	r0, #1
 8006e26:	f43f ae3e 	beq.w	8006aa6 <_printf_float+0xb6>
 8006e2a:	f108 0801 	add.w	r8, r8, #1
 8006e2e:	68e3      	ldr	r3, [r4, #12]
 8006e30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006e32:	1a5b      	subs	r3, r3, r1
 8006e34:	4543      	cmp	r3, r8
 8006e36:	dcf0      	bgt.n	8006e1a <_printf_float+0x42a>
 8006e38:	e6fc      	b.n	8006c34 <_printf_float+0x244>
 8006e3a:	f04f 0800 	mov.w	r8, #0
 8006e3e:	f104 0919 	add.w	r9, r4, #25
 8006e42:	e7f4      	b.n	8006e2e <_printf_float+0x43e>

08006e44 <_printf_common>:
 8006e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e48:	4616      	mov	r6, r2
 8006e4a:	4698      	mov	r8, r3
 8006e4c:	688a      	ldr	r2, [r1, #8]
 8006e4e:	690b      	ldr	r3, [r1, #16]
 8006e50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006e54:	4293      	cmp	r3, r2
 8006e56:	bfb8      	it	lt
 8006e58:	4613      	movlt	r3, r2
 8006e5a:	6033      	str	r3, [r6, #0]
 8006e5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006e60:	4607      	mov	r7, r0
 8006e62:	460c      	mov	r4, r1
 8006e64:	b10a      	cbz	r2, 8006e6a <_printf_common+0x26>
 8006e66:	3301      	adds	r3, #1
 8006e68:	6033      	str	r3, [r6, #0]
 8006e6a:	6823      	ldr	r3, [r4, #0]
 8006e6c:	0699      	lsls	r1, r3, #26
 8006e6e:	bf42      	ittt	mi
 8006e70:	6833      	ldrmi	r3, [r6, #0]
 8006e72:	3302      	addmi	r3, #2
 8006e74:	6033      	strmi	r3, [r6, #0]
 8006e76:	6825      	ldr	r5, [r4, #0]
 8006e78:	f015 0506 	ands.w	r5, r5, #6
 8006e7c:	d106      	bne.n	8006e8c <_printf_common+0x48>
 8006e7e:	f104 0a19 	add.w	sl, r4, #25
 8006e82:	68e3      	ldr	r3, [r4, #12]
 8006e84:	6832      	ldr	r2, [r6, #0]
 8006e86:	1a9b      	subs	r3, r3, r2
 8006e88:	42ab      	cmp	r3, r5
 8006e8a:	dc26      	bgt.n	8006eda <_printf_common+0x96>
 8006e8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006e90:	6822      	ldr	r2, [r4, #0]
 8006e92:	3b00      	subs	r3, #0
 8006e94:	bf18      	it	ne
 8006e96:	2301      	movne	r3, #1
 8006e98:	0692      	lsls	r2, r2, #26
 8006e9a:	d42b      	bmi.n	8006ef4 <_printf_common+0xb0>
 8006e9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006ea0:	4641      	mov	r1, r8
 8006ea2:	4638      	mov	r0, r7
 8006ea4:	47c8      	blx	r9
 8006ea6:	3001      	adds	r0, #1
 8006ea8:	d01e      	beq.n	8006ee8 <_printf_common+0xa4>
 8006eaa:	6823      	ldr	r3, [r4, #0]
 8006eac:	6922      	ldr	r2, [r4, #16]
 8006eae:	f003 0306 	and.w	r3, r3, #6
 8006eb2:	2b04      	cmp	r3, #4
 8006eb4:	bf02      	ittt	eq
 8006eb6:	68e5      	ldreq	r5, [r4, #12]
 8006eb8:	6833      	ldreq	r3, [r6, #0]
 8006eba:	1aed      	subeq	r5, r5, r3
 8006ebc:	68a3      	ldr	r3, [r4, #8]
 8006ebe:	bf0c      	ite	eq
 8006ec0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ec4:	2500      	movne	r5, #0
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	bfc4      	itt	gt
 8006eca:	1a9b      	subgt	r3, r3, r2
 8006ecc:	18ed      	addgt	r5, r5, r3
 8006ece:	2600      	movs	r6, #0
 8006ed0:	341a      	adds	r4, #26
 8006ed2:	42b5      	cmp	r5, r6
 8006ed4:	d11a      	bne.n	8006f0c <_printf_common+0xc8>
 8006ed6:	2000      	movs	r0, #0
 8006ed8:	e008      	b.n	8006eec <_printf_common+0xa8>
 8006eda:	2301      	movs	r3, #1
 8006edc:	4652      	mov	r2, sl
 8006ede:	4641      	mov	r1, r8
 8006ee0:	4638      	mov	r0, r7
 8006ee2:	47c8      	blx	r9
 8006ee4:	3001      	adds	r0, #1
 8006ee6:	d103      	bne.n	8006ef0 <_printf_common+0xac>
 8006ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8006eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ef0:	3501      	adds	r5, #1
 8006ef2:	e7c6      	b.n	8006e82 <_printf_common+0x3e>
 8006ef4:	18e1      	adds	r1, r4, r3
 8006ef6:	1c5a      	adds	r2, r3, #1
 8006ef8:	2030      	movs	r0, #48	@ 0x30
 8006efa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006efe:	4422      	add	r2, r4
 8006f00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006f04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006f08:	3302      	adds	r3, #2
 8006f0a:	e7c7      	b.n	8006e9c <_printf_common+0x58>
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	4622      	mov	r2, r4
 8006f10:	4641      	mov	r1, r8
 8006f12:	4638      	mov	r0, r7
 8006f14:	47c8      	blx	r9
 8006f16:	3001      	adds	r0, #1
 8006f18:	d0e6      	beq.n	8006ee8 <_printf_common+0xa4>
 8006f1a:	3601      	adds	r6, #1
 8006f1c:	e7d9      	b.n	8006ed2 <_printf_common+0x8e>
	...

08006f20 <_printf_i>:
 8006f20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f24:	7e0f      	ldrb	r7, [r1, #24]
 8006f26:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f28:	2f78      	cmp	r7, #120	@ 0x78
 8006f2a:	4691      	mov	r9, r2
 8006f2c:	4680      	mov	r8, r0
 8006f2e:	460c      	mov	r4, r1
 8006f30:	469a      	mov	sl, r3
 8006f32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006f36:	d807      	bhi.n	8006f48 <_printf_i+0x28>
 8006f38:	2f62      	cmp	r7, #98	@ 0x62
 8006f3a:	d80a      	bhi.n	8006f52 <_printf_i+0x32>
 8006f3c:	2f00      	cmp	r7, #0
 8006f3e:	f000 80d2 	beq.w	80070e6 <_printf_i+0x1c6>
 8006f42:	2f58      	cmp	r7, #88	@ 0x58
 8006f44:	f000 80b9 	beq.w	80070ba <_printf_i+0x19a>
 8006f48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006f50:	e03a      	b.n	8006fc8 <_printf_i+0xa8>
 8006f52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006f56:	2b15      	cmp	r3, #21
 8006f58:	d8f6      	bhi.n	8006f48 <_printf_i+0x28>
 8006f5a:	a101      	add	r1, pc, #4	@ (adr r1, 8006f60 <_printf_i+0x40>)
 8006f5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f60:	08006fb9 	.word	0x08006fb9
 8006f64:	08006fcd 	.word	0x08006fcd
 8006f68:	08006f49 	.word	0x08006f49
 8006f6c:	08006f49 	.word	0x08006f49
 8006f70:	08006f49 	.word	0x08006f49
 8006f74:	08006f49 	.word	0x08006f49
 8006f78:	08006fcd 	.word	0x08006fcd
 8006f7c:	08006f49 	.word	0x08006f49
 8006f80:	08006f49 	.word	0x08006f49
 8006f84:	08006f49 	.word	0x08006f49
 8006f88:	08006f49 	.word	0x08006f49
 8006f8c:	080070cd 	.word	0x080070cd
 8006f90:	08006ff7 	.word	0x08006ff7
 8006f94:	08007087 	.word	0x08007087
 8006f98:	08006f49 	.word	0x08006f49
 8006f9c:	08006f49 	.word	0x08006f49
 8006fa0:	080070ef 	.word	0x080070ef
 8006fa4:	08006f49 	.word	0x08006f49
 8006fa8:	08006ff7 	.word	0x08006ff7
 8006fac:	08006f49 	.word	0x08006f49
 8006fb0:	08006f49 	.word	0x08006f49
 8006fb4:	0800708f 	.word	0x0800708f
 8006fb8:	6833      	ldr	r3, [r6, #0]
 8006fba:	1d1a      	adds	r2, r3, #4
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	6032      	str	r2, [r6, #0]
 8006fc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006fc4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e09d      	b.n	8007108 <_printf_i+0x1e8>
 8006fcc:	6833      	ldr	r3, [r6, #0]
 8006fce:	6820      	ldr	r0, [r4, #0]
 8006fd0:	1d19      	adds	r1, r3, #4
 8006fd2:	6031      	str	r1, [r6, #0]
 8006fd4:	0606      	lsls	r6, r0, #24
 8006fd6:	d501      	bpl.n	8006fdc <_printf_i+0xbc>
 8006fd8:	681d      	ldr	r5, [r3, #0]
 8006fda:	e003      	b.n	8006fe4 <_printf_i+0xc4>
 8006fdc:	0645      	lsls	r5, r0, #25
 8006fde:	d5fb      	bpl.n	8006fd8 <_printf_i+0xb8>
 8006fe0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006fe4:	2d00      	cmp	r5, #0
 8006fe6:	da03      	bge.n	8006ff0 <_printf_i+0xd0>
 8006fe8:	232d      	movs	r3, #45	@ 0x2d
 8006fea:	426d      	negs	r5, r5
 8006fec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ff0:	4859      	ldr	r0, [pc, #356]	@ (8007158 <_printf_i+0x238>)
 8006ff2:	230a      	movs	r3, #10
 8006ff4:	e011      	b.n	800701a <_printf_i+0xfa>
 8006ff6:	6821      	ldr	r1, [r4, #0]
 8006ff8:	6833      	ldr	r3, [r6, #0]
 8006ffa:	0608      	lsls	r0, r1, #24
 8006ffc:	f853 5b04 	ldr.w	r5, [r3], #4
 8007000:	d402      	bmi.n	8007008 <_printf_i+0xe8>
 8007002:	0649      	lsls	r1, r1, #25
 8007004:	bf48      	it	mi
 8007006:	b2ad      	uxthmi	r5, r5
 8007008:	2f6f      	cmp	r7, #111	@ 0x6f
 800700a:	4853      	ldr	r0, [pc, #332]	@ (8007158 <_printf_i+0x238>)
 800700c:	6033      	str	r3, [r6, #0]
 800700e:	bf14      	ite	ne
 8007010:	230a      	movne	r3, #10
 8007012:	2308      	moveq	r3, #8
 8007014:	2100      	movs	r1, #0
 8007016:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800701a:	6866      	ldr	r6, [r4, #4]
 800701c:	60a6      	str	r6, [r4, #8]
 800701e:	2e00      	cmp	r6, #0
 8007020:	bfa2      	ittt	ge
 8007022:	6821      	ldrge	r1, [r4, #0]
 8007024:	f021 0104 	bicge.w	r1, r1, #4
 8007028:	6021      	strge	r1, [r4, #0]
 800702a:	b90d      	cbnz	r5, 8007030 <_printf_i+0x110>
 800702c:	2e00      	cmp	r6, #0
 800702e:	d04b      	beq.n	80070c8 <_printf_i+0x1a8>
 8007030:	4616      	mov	r6, r2
 8007032:	fbb5 f1f3 	udiv	r1, r5, r3
 8007036:	fb03 5711 	mls	r7, r3, r1, r5
 800703a:	5dc7      	ldrb	r7, [r0, r7]
 800703c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007040:	462f      	mov	r7, r5
 8007042:	42bb      	cmp	r3, r7
 8007044:	460d      	mov	r5, r1
 8007046:	d9f4      	bls.n	8007032 <_printf_i+0x112>
 8007048:	2b08      	cmp	r3, #8
 800704a:	d10b      	bne.n	8007064 <_printf_i+0x144>
 800704c:	6823      	ldr	r3, [r4, #0]
 800704e:	07df      	lsls	r7, r3, #31
 8007050:	d508      	bpl.n	8007064 <_printf_i+0x144>
 8007052:	6923      	ldr	r3, [r4, #16]
 8007054:	6861      	ldr	r1, [r4, #4]
 8007056:	4299      	cmp	r1, r3
 8007058:	bfde      	ittt	le
 800705a:	2330      	movle	r3, #48	@ 0x30
 800705c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007060:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007064:	1b92      	subs	r2, r2, r6
 8007066:	6122      	str	r2, [r4, #16]
 8007068:	f8cd a000 	str.w	sl, [sp]
 800706c:	464b      	mov	r3, r9
 800706e:	aa03      	add	r2, sp, #12
 8007070:	4621      	mov	r1, r4
 8007072:	4640      	mov	r0, r8
 8007074:	f7ff fee6 	bl	8006e44 <_printf_common>
 8007078:	3001      	adds	r0, #1
 800707a:	d14a      	bne.n	8007112 <_printf_i+0x1f2>
 800707c:	f04f 30ff 	mov.w	r0, #4294967295
 8007080:	b004      	add	sp, #16
 8007082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007086:	6823      	ldr	r3, [r4, #0]
 8007088:	f043 0320 	orr.w	r3, r3, #32
 800708c:	6023      	str	r3, [r4, #0]
 800708e:	4833      	ldr	r0, [pc, #204]	@ (800715c <_printf_i+0x23c>)
 8007090:	2778      	movs	r7, #120	@ 0x78
 8007092:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007096:	6823      	ldr	r3, [r4, #0]
 8007098:	6831      	ldr	r1, [r6, #0]
 800709a:	061f      	lsls	r7, r3, #24
 800709c:	f851 5b04 	ldr.w	r5, [r1], #4
 80070a0:	d402      	bmi.n	80070a8 <_printf_i+0x188>
 80070a2:	065f      	lsls	r7, r3, #25
 80070a4:	bf48      	it	mi
 80070a6:	b2ad      	uxthmi	r5, r5
 80070a8:	6031      	str	r1, [r6, #0]
 80070aa:	07d9      	lsls	r1, r3, #31
 80070ac:	bf44      	itt	mi
 80070ae:	f043 0320 	orrmi.w	r3, r3, #32
 80070b2:	6023      	strmi	r3, [r4, #0]
 80070b4:	b11d      	cbz	r5, 80070be <_printf_i+0x19e>
 80070b6:	2310      	movs	r3, #16
 80070b8:	e7ac      	b.n	8007014 <_printf_i+0xf4>
 80070ba:	4827      	ldr	r0, [pc, #156]	@ (8007158 <_printf_i+0x238>)
 80070bc:	e7e9      	b.n	8007092 <_printf_i+0x172>
 80070be:	6823      	ldr	r3, [r4, #0]
 80070c0:	f023 0320 	bic.w	r3, r3, #32
 80070c4:	6023      	str	r3, [r4, #0]
 80070c6:	e7f6      	b.n	80070b6 <_printf_i+0x196>
 80070c8:	4616      	mov	r6, r2
 80070ca:	e7bd      	b.n	8007048 <_printf_i+0x128>
 80070cc:	6833      	ldr	r3, [r6, #0]
 80070ce:	6825      	ldr	r5, [r4, #0]
 80070d0:	6961      	ldr	r1, [r4, #20]
 80070d2:	1d18      	adds	r0, r3, #4
 80070d4:	6030      	str	r0, [r6, #0]
 80070d6:	062e      	lsls	r6, r5, #24
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	d501      	bpl.n	80070e0 <_printf_i+0x1c0>
 80070dc:	6019      	str	r1, [r3, #0]
 80070de:	e002      	b.n	80070e6 <_printf_i+0x1c6>
 80070e0:	0668      	lsls	r0, r5, #25
 80070e2:	d5fb      	bpl.n	80070dc <_printf_i+0x1bc>
 80070e4:	8019      	strh	r1, [r3, #0]
 80070e6:	2300      	movs	r3, #0
 80070e8:	6123      	str	r3, [r4, #16]
 80070ea:	4616      	mov	r6, r2
 80070ec:	e7bc      	b.n	8007068 <_printf_i+0x148>
 80070ee:	6833      	ldr	r3, [r6, #0]
 80070f0:	1d1a      	adds	r2, r3, #4
 80070f2:	6032      	str	r2, [r6, #0]
 80070f4:	681e      	ldr	r6, [r3, #0]
 80070f6:	6862      	ldr	r2, [r4, #4]
 80070f8:	2100      	movs	r1, #0
 80070fa:	4630      	mov	r0, r6
 80070fc:	f7f9 f868 	bl	80001d0 <memchr>
 8007100:	b108      	cbz	r0, 8007106 <_printf_i+0x1e6>
 8007102:	1b80      	subs	r0, r0, r6
 8007104:	6060      	str	r0, [r4, #4]
 8007106:	6863      	ldr	r3, [r4, #4]
 8007108:	6123      	str	r3, [r4, #16]
 800710a:	2300      	movs	r3, #0
 800710c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007110:	e7aa      	b.n	8007068 <_printf_i+0x148>
 8007112:	6923      	ldr	r3, [r4, #16]
 8007114:	4632      	mov	r2, r6
 8007116:	4649      	mov	r1, r9
 8007118:	4640      	mov	r0, r8
 800711a:	47d0      	blx	sl
 800711c:	3001      	adds	r0, #1
 800711e:	d0ad      	beq.n	800707c <_printf_i+0x15c>
 8007120:	6823      	ldr	r3, [r4, #0]
 8007122:	079b      	lsls	r3, r3, #30
 8007124:	d413      	bmi.n	800714e <_printf_i+0x22e>
 8007126:	68e0      	ldr	r0, [r4, #12]
 8007128:	9b03      	ldr	r3, [sp, #12]
 800712a:	4298      	cmp	r0, r3
 800712c:	bfb8      	it	lt
 800712e:	4618      	movlt	r0, r3
 8007130:	e7a6      	b.n	8007080 <_printf_i+0x160>
 8007132:	2301      	movs	r3, #1
 8007134:	4632      	mov	r2, r6
 8007136:	4649      	mov	r1, r9
 8007138:	4640      	mov	r0, r8
 800713a:	47d0      	blx	sl
 800713c:	3001      	adds	r0, #1
 800713e:	d09d      	beq.n	800707c <_printf_i+0x15c>
 8007140:	3501      	adds	r5, #1
 8007142:	68e3      	ldr	r3, [r4, #12]
 8007144:	9903      	ldr	r1, [sp, #12]
 8007146:	1a5b      	subs	r3, r3, r1
 8007148:	42ab      	cmp	r3, r5
 800714a:	dcf2      	bgt.n	8007132 <_printf_i+0x212>
 800714c:	e7eb      	b.n	8007126 <_printf_i+0x206>
 800714e:	2500      	movs	r5, #0
 8007150:	f104 0619 	add.w	r6, r4, #25
 8007154:	e7f5      	b.n	8007142 <_printf_i+0x222>
 8007156:	bf00      	nop
 8007158:	08009a5b 	.word	0x08009a5b
 800715c:	08009a6c 	.word	0x08009a6c

08007160 <std>:
 8007160:	2300      	movs	r3, #0
 8007162:	b510      	push	{r4, lr}
 8007164:	4604      	mov	r4, r0
 8007166:	e9c0 3300 	strd	r3, r3, [r0]
 800716a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800716e:	6083      	str	r3, [r0, #8]
 8007170:	8181      	strh	r1, [r0, #12]
 8007172:	6643      	str	r3, [r0, #100]	@ 0x64
 8007174:	81c2      	strh	r2, [r0, #14]
 8007176:	6183      	str	r3, [r0, #24]
 8007178:	4619      	mov	r1, r3
 800717a:	2208      	movs	r2, #8
 800717c:	305c      	adds	r0, #92	@ 0x5c
 800717e:	f000 fa2d 	bl	80075dc <memset>
 8007182:	4b0d      	ldr	r3, [pc, #52]	@ (80071b8 <std+0x58>)
 8007184:	6263      	str	r3, [r4, #36]	@ 0x24
 8007186:	4b0d      	ldr	r3, [pc, #52]	@ (80071bc <std+0x5c>)
 8007188:	62a3      	str	r3, [r4, #40]	@ 0x28
 800718a:	4b0d      	ldr	r3, [pc, #52]	@ (80071c0 <std+0x60>)
 800718c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800718e:	4b0d      	ldr	r3, [pc, #52]	@ (80071c4 <std+0x64>)
 8007190:	6323      	str	r3, [r4, #48]	@ 0x30
 8007192:	4b0d      	ldr	r3, [pc, #52]	@ (80071c8 <std+0x68>)
 8007194:	6224      	str	r4, [r4, #32]
 8007196:	429c      	cmp	r4, r3
 8007198:	d006      	beq.n	80071a8 <std+0x48>
 800719a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800719e:	4294      	cmp	r4, r2
 80071a0:	d002      	beq.n	80071a8 <std+0x48>
 80071a2:	33d0      	adds	r3, #208	@ 0xd0
 80071a4:	429c      	cmp	r4, r3
 80071a6:	d105      	bne.n	80071b4 <std+0x54>
 80071a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80071ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071b0:	f000 ba90 	b.w	80076d4 <__retarget_lock_init_recursive>
 80071b4:	bd10      	pop	{r4, pc}
 80071b6:	bf00      	nop
 80071b8:	0800742d 	.word	0x0800742d
 80071bc:	0800744f 	.word	0x0800744f
 80071c0:	08007487 	.word	0x08007487
 80071c4:	080074ab 	.word	0x080074ab
 80071c8:	20000a30 	.word	0x20000a30

080071cc <stdio_exit_handler>:
 80071cc:	4a02      	ldr	r2, [pc, #8]	@ (80071d8 <stdio_exit_handler+0xc>)
 80071ce:	4903      	ldr	r1, [pc, #12]	@ (80071dc <stdio_exit_handler+0x10>)
 80071d0:	4803      	ldr	r0, [pc, #12]	@ (80071e0 <stdio_exit_handler+0x14>)
 80071d2:	f000 b869 	b.w	80072a8 <_fwalk_sglue>
 80071d6:	bf00      	nop
 80071d8:	20000010 	.word	0x20000010
 80071dc:	080092b9 	.word	0x080092b9
 80071e0:	20000020 	.word	0x20000020

080071e4 <cleanup_stdio>:
 80071e4:	6841      	ldr	r1, [r0, #4]
 80071e6:	4b0c      	ldr	r3, [pc, #48]	@ (8007218 <cleanup_stdio+0x34>)
 80071e8:	4299      	cmp	r1, r3
 80071ea:	b510      	push	{r4, lr}
 80071ec:	4604      	mov	r4, r0
 80071ee:	d001      	beq.n	80071f4 <cleanup_stdio+0x10>
 80071f0:	f002 f862 	bl	80092b8 <_fflush_r>
 80071f4:	68a1      	ldr	r1, [r4, #8]
 80071f6:	4b09      	ldr	r3, [pc, #36]	@ (800721c <cleanup_stdio+0x38>)
 80071f8:	4299      	cmp	r1, r3
 80071fa:	d002      	beq.n	8007202 <cleanup_stdio+0x1e>
 80071fc:	4620      	mov	r0, r4
 80071fe:	f002 f85b 	bl	80092b8 <_fflush_r>
 8007202:	68e1      	ldr	r1, [r4, #12]
 8007204:	4b06      	ldr	r3, [pc, #24]	@ (8007220 <cleanup_stdio+0x3c>)
 8007206:	4299      	cmp	r1, r3
 8007208:	d004      	beq.n	8007214 <cleanup_stdio+0x30>
 800720a:	4620      	mov	r0, r4
 800720c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007210:	f002 b852 	b.w	80092b8 <_fflush_r>
 8007214:	bd10      	pop	{r4, pc}
 8007216:	bf00      	nop
 8007218:	20000a30 	.word	0x20000a30
 800721c:	20000a98 	.word	0x20000a98
 8007220:	20000b00 	.word	0x20000b00

08007224 <global_stdio_init.part.0>:
 8007224:	b510      	push	{r4, lr}
 8007226:	4b0b      	ldr	r3, [pc, #44]	@ (8007254 <global_stdio_init.part.0+0x30>)
 8007228:	4c0b      	ldr	r4, [pc, #44]	@ (8007258 <global_stdio_init.part.0+0x34>)
 800722a:	4a0c      	ldr	r2, [pc, #48]	@ (800725c <global_stdio_init.part.0+0x38>)
 800722c:	601a      	str	r2, [r3, #0]
 800722e:	4620      	mov	r0, r4
 8007230:	2200      	movs	r2, #0
 8007232:	2104      	movs	r1, #4
 8007234:	f7ff ff94 	bl	8007160 <std>
 8007238:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800723c:	2201      	movs	r2, #1
 800723e:	2109      	movs	r1, #9
 8007240:	f7ff ff8e 	bl	8007160 <std>
 8007244:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007248:	2202      	movs	r2, #2
 800724a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800724e:	2112      	movs	r1, #18
 8007250:	f7ff bf86 	b.w	8007160 <std>
 8007254:	20000b68 	.word	0x20000b68
 8007258:	20000a30 	.word	0x20000a30
 800725c:	080071cd 	.word	0x080071cd

08007260 <__sfp_lock_acquire>:
 8007260:	4801      	ldr	r0, [pc, #4]	@ (8007268 <__sfp_lock_acquire+0x8>)
 8007262:	f000 ba38 	b.w	80076d6 <__retarget_lock_acquire_recursive>
 8007266:	bf00      	nop
 8007268:	20000b71 	.word	0x20000b71

0800726c <__sfp_lock_release>:
 800726c:	4801      	ldr	r0, [pc, #4]	@ (8007274 <__sfp_lock_release+0x8>)
 800726e:	f000 ba33 	b.w	80076d8 <__retarget_lock_release_recursive>
 8007272:	bf00      	nop
 8007274:	20000b71 	.word	0x20000b71

08007278 <__sinit>:
 8007278:	b510      	push	{r4, lr}
 800727a:	4604      	mov	r4, r0
 800727c:	f7ff fff0 	bl	8007260 <__sfp_lock_acquire>
 8007280:	6a23      	ldr	r3, [r4, #32]
 8007282:	b11b      	cbz	r3, 800728c <__sinit+0x14>
 8007284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007288:	f7ff bff0 	b.w	800726c <__sfp_lock_release>
 800728c:	4b04      	ldr	r3, [pc, #16]	@ (80072a0 <__sinit+0x28>)
 800728e:	6223      	str	r3, [r4, #32]
 8007290:	4b04      	ldr	r3, [pc, #16]	@ (80072a4 <__sinit+0x2c>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d1f5      	bne.n	8007284 <__sinit+0xc>
 8007298:	f7ff ffc4 	bl	8007224 <global_stdio_init.part.0>
 800729c:	e7f2      	b.n	8007284 <__sinit+0xc>
 800729e:	bf00      	nop
 80072a0:	080071e5 	.word	0x080071e5
 80072a4:	20000b68 	.word	0x20000b68

080072a8 <_fwalk_sglue>:
 80072a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072ac:	4607      	mov	r7, r0
 80072ae:	4688      	mov	r8, r1
 80072b0:	4614      	mov	r4, r2
 80072b2:	2600      	movs	r6, #0
 80072b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80072b8:	f1b9 0901 	subs.w	r9, r9, #1
 80072bc:	d505      	bpl.n	80072ca <_fwalk_sglue+0x22>
 80072be:	6824      	ldr	r4, [r4, #0]
 80072c0:	2c00      	cmp	r4, #0
 80072c2:	d1f7      	bne.n	80072b4 <_fwalk_sglue+0xc>
 80072c4:	4630      	mov	r0, r6
 80072c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072ca:	89ab      	ldrh	r3, [r5, #12]
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d907      	bls.n	80072e0 <_fwalk_sglue+0x38>
 80072d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80072d4:	3301      	adds	r3, #1
 80072d6:	d003      	beq.n	80072e0 <_fwalk_sglue+0x38>
 80072d8:	4629      	mov	r1, r5
 80072da:	4638      	mov	r0, r7
 80072dc:	47c0      	blx	r8
 80072de:	4306      	orrs	r6, r0
 80072e0:	3568      	adds	r5, #104	@ 0x68
 80072e2:	e7e9      	b.n	80072b8 <_fwalk_sglue+0x10>

080072e4 <iprintf>:
 80072e4:	b40f      	push	{r0, r1, r2, r3}
 80072e6:	b507      	push	{r0, r1, r2, lr}
 80072e8:	4906      	ldr	r1, [pc, #24]	@ (8007304 <iprintf+0x20>)
 80072ea:	ab04      	add	r3, sp, #16
 80072ec:	6808      	ldr	r0, [r1, #0]
 80072ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80072f2:	6881      	ldr	r1, [r0, #8]
 80072f4:	9301      	str	r3, [sp, #4]
 80072f6:	f001 fe43 	bl	8008f80 <_vfiprintf_r>
 80072fa:	b003      	add	sp, #12
 80072fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007300:	b004      	add	sp, #16
 8007302:	4770      	bx	lr
 8007304:	2000001c 	.word	0x2000001c

08007308 <_puts_r>:
 8007308:	6a03      	ldr	r3, [r0, #32]
 800730a:	b570      	push	{r4, r5, r6, lr}
 800730c:	6884      	ldr	r4, [r0, #8]
 800730e:	4605      	mov	r5, r0
 8007310:	460e      	mov	r6, r1
 8007312:	b90b      	cbnz	r3, 8007318 <_puts_r+0x10>
 8007314:	f7ff ffb0 	bl	8007278 <__sinit>
 8007318:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800731a:	07db      	lsls	r3, r3, #31
 800731c:	d405      	bmi.n	800732a <_puts_r+0x22>
 800731e:	89a3      	ldrh	r3, [r4, #12]
 8007320:	0598      	lsls	r0, r3, #22
 8007322:	d402      	bmi.n	800732a <_puts_r+0x22>
 8007324:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007326:	f000 f9d6 	bl	80076d6 <__retarget_lock_acquire_recursive>
 800732a:	89a3      	ldrh	r3, [r4, #12]
 800732c:	0719      	lsls	r1, r3, #28
 800732e:	d502      	bpl.n	8007336 <_puts_r+0x2e>
 8007330:	6923      	ldr	r3, [r4, #16]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d135      	bne.n	80073a2 <_puts_r+0x9a>
 8007336:	4621      	mov	r1, r4
 8007338:	4628      	mov	r0, r5
 800733a:	f000 f8f9 	bl	8007530 <__swsetup_r>
 800733e:	b380      	cbz	r0, 80073a2 <_puts_r+0x9a>
 8007340:	f04f 35ff 	mov.w	r5, #4294967295
 8007344:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007346:	07da      	lsls	r2, r3, #31
 8007348:	d405      	bmi.n	8007356 <_puts_r+0x4e>
 800734a:	89a3      	ldrh	r3, [r4, #12]
 800734c:	059b      	lsls	r3, r3, #22
 800734e:	d402      	bmi.n	8007356 <_puts_r+0x4e>
 8007350:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007352:	f000 f9c1 	bl	80076d8 <__retarget_lock_release_recursive>
 8007356:	4628      	mov	r0, r5
 8007358:	bd70      	pop	{r4, r5, r6, pc}
 800735a:	2b00      	cmp	r3, #0
 800735c:	da04      	bge.n	8007368 <_puts_r+0x60>
 800735e:	69a2      	ldr	r2, [r4, #24]
 8007360:	429a      	cmp	r2, r3
 8007362:	dc17      	bgt.n	8007394 <_puts_r+0x8c>
 8007364:	290a      	cmp	r1, #10
 8007366:	d015      	beq.n	8007394 <_puts_r+0x8c>
 8007368:	6823      	ldr	r3, [r4, #0]
 800736a:	1c5a      	adds	r2, r3, #1
 800736c:	6022      	str	r2, [r4, #0]
 800736e:	7019      	strb	r1, [r3, #0]
 8007370:	68a3      	ldr	r3, [r4, #8]
 8007372:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007376:	3b01      	subs	r3, #1
 8007378:	60a3      	str	r3, [r4, #8]
 800737a:	2900      	cmp	r1, #0
 800737c:	d1ed      	bne.n	800735a <_puts_r+0x52>
 800737e:	2b00      	cmp	r3, #0
 8007380:	da11      	bge.n	80073a6 <_puts_r+0x9e>
 8007382:	4622      	mov	r2, r4
 8007384:	210a      	movs	r1, #10
 8007386:	4628      	mov	r0, r5
 8007388:	f000 f893 	bl	80074b2 <__swbuf_r>
 800738c:	3001      	adds	r0, #1
 800738e:	d0d7      	beq.n	8007340 <_puts_r+0x38>
 8007390:	250a      	movs	r5, #10
 8007392:	e7d7      	b.n	8007344 <_puts_r+0x3c>
 8007394:	4622      	mov	r2, r4
 8007396:	4628      	mov	r0, r5
 8007398:	f000 f88b 	bl	80074b2 <__swbuf_r>
 800739c:	3001      	adds	r0, #1
 800739e:	d1e7      	bne.n	8007370 <_puts_r+0x68>
 80073a0:	e7ce      	b.n	8007340 <_puts_r+0x38>
 80073a2:	3e01      	subs	r6, #1
 80073a4:	e7e4      	b.n	8007370 <_puts_r+0x68>
 80073a6:	6823      	ldr	r3, [r4, #0]
 80073a8:	1c5a      	adds	r2, r3, #1
 80073aa:	6022      	str	r2, [r4, #0]
 80073ac:	220a      	movs	r2, #10
 80073ae:	701a      	strb	r2, [r3, #0]
 80073b0:	e7ee      	b.n	8007390 <_puts_r+0x88>
	...

080073b4 <puts>:
 80073b4:	4b02      	ldr	r3, [pc, #8]	@ (80073c0 <puts+0xc>)
 80073b6:	4601      	mov	r1, r0
 80073b8:	6818      	ldr	r0, [r3, #0]
 80073ba:	f7ff bfa5 	b.w	8007308 <_puts_r>
 80073be:	bf00      	nop
 80073c0:	2000001c 	.word	0x2000001c

080073c4 <sniprintf>:
 80073c4:	b40c      	push	{r2, r3}
 80073c6:	b530      	push	{r4, r5, lr}
 80073c8:	4b17      	ldr	r3, [pc, #92]	@ (8007428 <sniprintf+0x64>)
 80073ca:	1e0c      	subs	r4, r1, #0
 80073cc:	681d      	ldr	r5, [r3, #0]
 80073ce:	b09d      	sub	sp, #116	@ 0x74
 80073d0:	da08      	bge.n	80073e4 <sniprintf+0x20>
 80073d2:	238b      	movs	r3, #139	@ 0x8b
 80073d4:	602b      	str	r3, [r5, #0]
 80073d6:	f04f 30ff 	mov.w	r0, #4294967295
 80073da:	b01d      	add	sp, #116	@ 0x74
 80073dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073e0:	b002      	add	sp, #8
 80073e2:	4770      	bx	lr
 80073e4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80073e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80073ec:	bf14      	ite	ne
 80073ee:	f104 33ff 	addne.w	r3, r4, #4294967295
 80073f2:	4623      	moveq	r3, r4
 80073f4:	9304      	str	r3, [sp, #16]
 80073f6:	9307      	str	r3, [sp, #28]
 80073f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80073fc:	9002      	str	r0, [sp, #8]
 80073fe:	9006      	str	r0, [sp, #24]
 8007400:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007404:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007406:	ab21      	add	r3, sp, #132	@ 0x84
 8007408:	a902      	add	r1, sp, #8
 800740a:	4628      	mov	r0, r5
 800740c:	9301      	str	r3, [sp, #4]
 800740e:	f001 fc91 	bl	8008d34 <_svfiprintf_r>
 8007412:	1c43      	adds	r3, r0, #1
 8007414:	bfbc      	itt	lt
 8007416:	238b      	movlt	r3, #139	@ 0x8b
 8007418:	602b      	strlt	r3, [r5, #0]
 800741a:	2c00      	cmp	r4, #0
 800741c:	d0dd      	beq.n	80073da <sniprintf+0x16>
 800741e:	9b02      	ldr	r3, [sp, #8]
 8007420:	2200      	movs	r2, #0
 8007422:	701a      	strb	r2, [r3, #0]
 8007424:	e7d9      	b.n	80073da <sniprintf+0x16>
 8007426:	bf00      	nop
 8007428:	2000001c 	.word	0x2000001c

0800742c <__sread>:
 800742c:	b510      	push	{r4, lr}
 800742e:	460c      	mov	r4, r1
 8007430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007434:	f000 f900 	bl	8007638 <_read_r>
 8007438:	2800      	cmp	r0, #0
 800743a:	bfab      	itete	ge
 800743c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800743e:	89a3      	ldrhlt	r3, [r4, #12]
 8007440:	181b      	addge	r3, r3, r0
 8007442:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007446:	bfac      	ite	ge
 8007448:	6563      	strge	r3, [r4, #84]	@ 0x54
 800744a:	81a3      	strhlt	r3, [r4, #12]
 800744c:	bd10      	pop	{r4, pc}

0800744e <__swrite>:
 800744e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007452:	461f      	mov	r7, r3
 8007454:	898b      	ldrh	r3, [r1, #12]
 8007456:	05db      	lsls	r3, r3, #23
 8007458:	4605      	mov	r5, r0
 800745a:	460c      	mov	r4, r1
 800745c:	4616      	mov	r6, r2
 800745e:	d505      	bpl.n	800746c <__swrite+0x1e>
 8007460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007464:	2302      	movs	r3, #2
 8007466:	2200      	movs	r2, #0
 8007468:	f000 f8d4 	bl	8007614 <_lseek_r>
 800746c:	89a3      	ldrh	r3, [r4, #12]
 800746e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007472:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007476:	81a3      	strh	r3, [r4, #12]
 8007478:	4632      	mov	r2, r6
 800747a:	463b      	mov	r3, r7
 800747c:	4628      	mov	r0, r5
 800747e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007482:	f000 b8eb 	b.w	800765c <_write_r>

08007486 <__sseek>:
 8007486:	b510      	push	{r4, lr}
 8007488:	460c      	mov	r4, r1
 800748a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800748e:	f000 f8c1 	bl	8007614 <_lseek_r>
 8007492:	1c43      	adds	r3, r0, #1
 8007494:	89a3      	ldrh	r3, [r4, #12]
 8007496:	bf15      	itete	ne
 8007498:	6560      	strne	r0, [r4, #84]	@ 0x54
 800749a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800749e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80074a2:	81a3      	strheq	r3, [r4, #12]
 80074a4:	bf18      	it	ne
 80074a6:	81a3      	strhne	r3, [r4, #12]
 80074a8:	bd10      	pop	{r4, pc}

080074aa <__sclose>:
 80074aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074ae:	f000 b8a1 	b.w	80075f4 <_close_r>

080074b2 <__swbuf_r>:
 80074b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074b4:	460e      	mov	r6, r1
 80074b6:	4614      	mov	r4, r2
 80074b8:	4605      	mov	r5, r0
 80074ba:	b118      	cbz	r0, 80074c4 <__swbuf_r+0x12>
 80074bc:	6a03      	ldr	r3, [r0, #32]
 80074be:	b90b      	cbnz	r3, 80074c4 <__swbuf_r+0x12>
 80074c0:	f7ff feda 	bl	8007278 <__sinit>
 80074c4:	69a3      	ldr	r3, [r4, #24]
 80074c6:	60a3      	str	r3, [r4, #8]
 80074c8:	89a3      	ldrh	r3, [r4, #12]
 80074ca:	071a      	lsls	r2, r3, #28
 80074cc:	d501      	bpl.n	80074d2 <__swbuf_r+0x20>
 80074ce:	6923      	ldr	r3, [r4, #16]
 80074d0:	b943      	cbnz	r3, 80074e4 <__swbuf_r+0x32>
 80074d2:	4621      	mov	r1, r4
 80074d4:	4628      	mov	r0, r5
 80074d6:	f000 f82b 	bl	8007530 <__swsetup_r>
 80074da:	b118      	cbz	r0, 80074e4 <__swbuf_r+0x32>
 80074dc:	f04f 37ff 	mov.w	r7, #4294967295
 80074e0:	4638      	mov	r0, r7
 80074e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074e4:	6823      	ldr	r3, [r4, #0]
 80074e6:	6922      	ldr	r2, [r4, #16]
 80074e8:	1a98      	subs	r0, r3, r2
 80074ea:	6963      	ldr	r3, [r4, #20]
 80074ec:	b2f6      	uxtb	r6, r6
 80074ee:	4283      	cmp	r3, r0
 80074f0:	4637      	mov	r7, r6
 80074f2:	dc05      	bgt.n	8007500 <__swbuf_r+0x4e>
 80074f4:	4621      	mov	r1, r4
 80074f6:	4628      	mov	r0, r5
 80074f8:	f001 fede 	bl	80092b8 <_fflush_r>
 80074fc:	2800      	cmp	r0, #0
 80074fe:	d1ed      	bne.n	80074dc <__swbuf_r+0x2a>
 8007500:	68a3      	ldr	r3, [r4, #8]
 8007502:	3b01      	subs	r3, #1
 8007504:	60a3      	str	r3, [r4, #8]
 8007506:	6823      	ldr	r3, [r4, #0]
 8007508:	1c5a      	adds	r2, r3, #1
 800750a:	6022      	str	r2, [r4, #0]
 800750c:	701e      	strb	r6, [r3, #0]
 800750e:	6962      	ldr	r2, [r4, #20]
 8007510:	1c43      	adds	r3, r0, #1
 8007512:	429a      	cmp	r2, r3
 8007514:	d004      	beq.n	8007520 <__swbuf_r+0x6e>
 8007516:	89a3      	ldrh	r3, [r4, #12]
 8007518:	07db      	lsls	r3, r3, #31
 800751a:	d5e1      	bpl.n	80074e0 <__swbuf_r+0x2e>
 800751c:	2e0a      	cmp	r6, #10
 800751e:	d1df      	bne.n	80074e0 <__swbuf_r+0x2e>
 8007520:	4621      	mov	r1, r4
 8007522:	4628      	mov	r0, r5
 8007524:	f001 fec8 	bl	80092b8 <_fflush_r>
 8007528:	2800      	cmp	r0, #0
 800752a:	d0d9      	beq.n	80074e0 <__swbuf_r+0x2e>
 800752c:	e7d6      	b.n	80074dc <__swbuf_r+0x2a>
	...

08007530 <__swsetup_r>:
 8007530:	b538      	push	{r3, r4, r5, lr}
 8007532:	4b29      	ldr	r3, [pc, #164]	@ (80075d8 <__swsetup_r+0xa8>)
 8007534:	4605      	mov	r5, r0
 8007536:	6818      	ldr	r0, [r3, #0]
 8007538:	460c      	mov	r4, r1
 800753a:	b118      	cbz	r0, 8007544 <__swsetup_r+0x14>
 800753c:	6a03      	ldr	r3, [r0, #32]
 800753e:	b90b      	cbnz	r3, 8007544 <__swsetup_r+0x14>
 8007540:	f7ff fe9a 	bl	8007278 <__sinit>
 8007544:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007548:	0719      	lsls	r1, r3, #28
 800754a:	d422      	bmi.n	8007592 <__swsetup_r+0x62>
 800754c:	06da      	lsls	r2, r3, #27
 800754e:	d407      	bmi.n	8007560 <__swsetup_r+0x30>
 8007550:	2209      	movs	r2, #9
 8007552:	602a      	str	r2, [r5, #0]
 8007554:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007558:	81a3      	strh	r3, [r4, #12]
 800755a:	f04f 30ff 	mov.w	r0, #4294967295
 800755e:	e033      	b.n	80075c8 <__swsetup_r+0x98>
 8007560:	0758      	lsls	r0, r3, #29
 8007562:	d512      	bpl.n	800758a <__swsetup_r+0x5a>
 8007564:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007566:	b141      	cbz	r1, 800757a <__swsetup_r+0x4a>
 8007568:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800756c:	4299      	cmp	r1, r3
 800756e:	d002      	beq.n	8007576 <__swsetup_r+0x46>
 8007570:	4628      	mov	r0, r5
 8007572:	f000 ff01 	bl	8008378 <_free_r>
 8007576:	2300      	movs	r3, #0
 8007578:	6363      	str	r3, [r4, #52]	@ 0x34
 800757a:	89a3      	ldrh	r3, [r4, #12]
 800757c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007580:	81a3      	strh	r3, [r4, #12]
 8007582:	2300      	movs	r3, #0
 8007584:	6063      	str	r3, [r4, #4]
 8007586:	6923      	ldr	r3, [r4, #16]
 8007588:	6023      	str	r3, [r4, #0]
 800758a:	89a3      	ldrh	r3, [r4, #12]
 800758c:	f043 0308 	orr.w	r3, r3, #8
 8007590:	81a3      	strh	r3, [r4, #12]
 8007592:	6923      	ldr	r3, [r4, #16]
 8007594:	b94b      	cbnz	r3, 80075aa <__swsetup_r+0x7a>
 8007596:	89a3      	ldrh	r3, [r4, #12]
 8007598:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800759c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075a0:	d003      	beq.n	80075aa <__swsetup_r+0x7a>
 80075a2:	4621      	mov	r1, r4
 80075a4:	4628      	mov	r0, r5
 80075a6:	f001 fed5 	bl	8009354 <__smakebuf_r>
 80075aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075ae:	f013 0201 	ands.w	r2, r3, #1
 80075b2:	d00a      	beq.n	80075ca <__swsetup_r+0x9a>
 80075b4:	2200      	movs	r2, #0
 80075b6:	60a2      	str	r2, [r4, #8]
 80075b8:	6962      	ldr	r2, [r4, #20]
 80075ba:	4252      	negs	r2, r2
 80075bc:	61a2      	str	r2, [r4, #24]
 80075be:	6922      	ldr	r2, [r4, #16]
 80075c0:	b942      	cbnz	r2, 80075d4 <__swsetup_r+0xa4>
 80075c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80075c6:	d1c5      	bne.n	8007554 <__swsetup_r+0x24>
 80075c8:	bd38      	pop	{r3, r4, r5, pc}
 80075ca:	0799      	lsls	r1, r3, #30
 80075cc:	bf58      	it	pl
 80075ce:	6962      	ldrpl	r2, [r4, #20]
 80075d0:	60a2      	str	r2, [r4, #8]
 80075d2:	e7f4      	b.n	80075be <__swsetup_r+0x8e>
 80075d4:	2000      	movs	r0, #0
 80075d6:	e7f7      	b.n	80075c8 <__swsetup_r+0x98>
 80075d8:	2000001c 	.word	0x2000001c

080075dc <memset>:
 80075dc:	4402      	add	r2, r0
 80075de:	4603      	mov	r3, r0
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d100      	bne.n	80075e6 <memset+0xa>
 80075e4:	4770      	bx	lr
 80075e6:	f803 1b01 	strb.w	r1, [r3], #1
 80075ea:	e7f9      	b.n	80075e0 <memset+0x4>

080075ec <_localeconv_r>:
 80075ec:	4800      	ldr	r0, [pc, #0]	@ (80075f0 <_localeconv_r+0x4>)
 80075ee:	4770      	bx	lr
 80075f0:	2000015c 	.word	0x2000015c

080075f4 <_close_r>:
 80075f4:	b538      	push	{r3, r4, r5, lr}
 80075f6:	4d06      	ldr	r5, [pc, #24]	@ (8007610 <_close_r+0x1c>)
 80075f8:	2300      	movs	r3, #0
 80075fa:	4604      	mov	r4, r0
 80075fc:	4608      	mov	r0, r1
 80075fe:	602b      	str	r3, [r5, #0]
 8007600:	f7fb f852 	bl	80026a8 <_close>
 8007604:	1c43      	adds	r3, r0, #1
 8007606:	d102      	bne.n	800760e <_close_r+0x1a>
 8007608:	682b      	ldr	r3, [r5, #0]
 800760a:	b103      	cbz	r3, 800760e <_close_r+0x1a>
 800760c:	6023      	str	r3, [r4, #0]
 800760e:	bd38      	pop	{r3, r4, r5, pc}
 8007610:	20000b6c 	.word	0x20000b6c

08007614 <_lseek_r>:
 8007614:	b538      	push	{r3, r4, r5, lr}
 8007616:	4d07      	ldr	r5, [pc, #28]	@ (8007634 <_lseek_r+0x20>)
 8007618:	4604      	mov	r4, r0
 800761a:	4608      	mov	r0, r1
 800761c:	4611      	mov	r1, r2
 800761e:	2200      	movs	r2, #0
 8007620:	602a      	str	r2, [r5, #0]
 8007622:	461a      	mov	r2, r3
 8007624:	f7fb f867 	bl	80026f6 <_lseek>
 8007628:	1c43      	adds	r3, r0, #1
 800762a:	d102      	bne.n	8007632 <_lseek_r+0x1e>
 800762c:	682b      	ldr	r3, [r5, #0]
 800762e:	b103      	cbz	r3, 8007632 <_lseek_r+0x1e>
 8007630:	6023      	str	r3, [r4, #0]
 8007632:	bd38      	pop	{r3, r4, r5, pc}
 8007634:	20000b6c 	.word	0x20000b6c

08007638 <_read_r>:
 8007638:	b538      	push	{r3, r4, r5, lr}
 800763a:	4d07      	ldr	r5, [pc, #28]	@ (8007658 <_read_r+0x20>)
 800763c:	4604      	mov	r4, r0
 800763e:	4608      	mov	r0, r1
 8007640:	4611      	mov	r1, r2
 8007642:	2200      	movs	r2, #0
 8007644:	602a      	str	r2, [r5, #0]
 8007646:	461a      	mov	r2, r3
 8007648:	f7fa fff5 	bl	8002636 <_read>
 800764c:	1c43      	adds	r3, r0, #1
 800764e:	d102      	bne.n	8007656 <_read_r+0x1e>
 8007650:	682b      	ldr	r3, [r5, #0]
 8007652:	b103      	cbz	r3, 8007656 <_read_r+0x1e>
 8007654:	6023      	str	r3, [r4, #0]
 8007656:	bd38      	pop	{r3, r4, r5, pc}
 8007658:	20000b6c 	.word	0x20000b6c

0800765c <_write_r>:
 800765c:	b538      	push	{r3, r4, r5, lr}
 800765e:	4d07      	ldr	r5, [pc, #28]	@ (800767c <_write_r+0x20>)
 8007660:	4604      	mov	r4, r0
 8007662:	4608      	mov	r0, r1
 8007664:	4611      	mov	r1, r2
 8007666:	2200      	movs	r2, #0
 8007668:	602a      	str	r2, [r5, #0]
 800766a:	461a      	mov	r2, r3
 800766c:	f7fb f800 	bl	8002670 <_write>
 8007670:	1c43      	adds	r3, r0, #1
 8007672:	d102      	bne.n	800767a <_write_r+0x1e>
 8007674:	682b      	ldr	r3, [r5, #0]
 8007676:	b103      	cbz	r3, 800767a <_write_r+0x1e>
 8007678:	6023      	str	r3, [r4, #0]
 800767a:	bd38      	pop	{r3, r4, r5, pc}
 800767c:	20000b6c 	.word	0x20000b6c

08007680 <__errno>:
 8007680:	4b01      	ldr	r3, [pc, #4]	@ (8007688 <__errno+0x8>)
 8007682:	6818      	ldr	r0, [r3, #0]
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop
 8007688:	2000001c 	.word	0x2000001c

0800768c <__libc_init_array>:
 800768c:	b570      	push	{r4, r5, r6, lr}
 800768e:	4d0d      	ldr	r5, [pc, #52]	@ (80076c4 <__libc_init_array+0x38>)
 8007690:	4c0d      	ldr	r4, [pc, #52]	@ (80076c8 <__libc_init_array+0x3c>)
 8007692:	1b64      	subs	r4, r4, r5
 8007694:	10a4      	asrs	r4, r4, #2
 8007696:	2600      	movs	r6, #0
 8007698:	42a6      	cmp	r6, r4
 800769a:	d109      	bne.n	80076b0 <__libc_init_array+0x24>
 800769c:	4d0b      	ldr	r5, [pc, #44]	@ (80076cc <__libc_init_array+0x40>)
 800769e:	4c0c      	ldr	r4, [pc, #48]	@ (80076d0 <__libc_init_array+0x44>)
 80076a0:	f001 ffd4 	bl	800964c <_init>
 80076a4:	1b64      	subs	r4, r4, r5
 80076a6:	10a4      	asrs	r4, r4, #2
 80076a8:	2600      	movs	r6, #0
 80076aa:	42a6      	cmp	r6, r4
 80076ac:	d105      	bne.n	80076ba <__libc_init_array+0x2e>
 80076ae:	bd70      	pop	{r4, r5, r6, pc}
 80076b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80076b4:	4798      	blx	r3
 80076b6:	3601      	adds	r6, #1
 80076b8:	e7ee      	b.n	8007698 <__libc_init_array+0xc>
 80076ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80076be:	4798      	blx	r3
 80076c0:	3601      	adds	r6, #1
 80076c2:	e7f2      	b.n	80076aa <__libc_init_array+0x1e>
 80076c4:	08009cc0 	.word	0x08009cc0
 80076c8:	08009cc0 	.word	0x08009cc0
 80076cc:	08009cc0 	.word	0x08009cc0
 80076d0:	08009cc4 	.word	0x08009cc4

080076d4 <__retarget_lock_init_recursive>:
 80076d4:	4770      	bx	lr

080076d6 <__retarget_lock_acquire_recursive>:
 80076d6:	4770      	bx	lr

080076d8 <__retarget_lock_release_recursive>:
 80076d8:	4770      	bx	lr

080076da <quorem>:
 80076da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076de:	6903      	ldr	r3, [r0, #16]
 80076e0:	690c      	ldr	r4, [r1, #16]
 80076e2:	42a3      	cmp	r3, r4
 80076e4:	4607      	mov	r7, r0
 80076e6:	db7e      	blt.n	80077e6 <quorem+0x10c>
 80076e8:	3c01      	subs	r4, #1
 80076ea:	f101 0814 	add.w	r8, r1, #20
 80076ee:	00a3      	lsls	r3, r4, #2
 80076f0:	f100 0514 	add.w	r5, r0, #20
 80076f4:	9300      	str	r3, [sp, #0]
 80076f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076fa:	9301      	str	r3, [sp, #4]
 80076fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007700:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007704:	3301      	adds	r3, #1
 8007706:	429a      	cmp	r2, r3
 8007708:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800770c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007710:	d32e      	bcc.n	8007770 <quorem+0x96>
 8007712:	f04f 0a00 	mov.w	sl, #0
 8007716:	46c4      	mov	ip, r8
 8007718:	46ae      	mov	lr, r5
 800771a:	46d3      	mov	fp, sl
 800771c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007720:	b298      	uxth	r0, r3
 8007722:	fb06 a000 	mla	r0, r6, r0, sl
 8007726:	0c02      	lsrs	r2, r0, #16
 8007728:	0c1b      	lsrs	r3, r3, #16
 800772a:	fb06 2303 	mla	r3, r6, r3, r2
 800772e:	f8de 2000 	ldr.w	r2, [lr]
 8007732:	b280      	uxth	r0, r0
 8007734:	b292      	uxth	r2, r2
 8007736:	1a12      	subs	r2, r2, r0
 8007738:	445a      	add	r2, fp
 800773a:	f8de 0000 	ldr.w	r0, [lr]
 800773e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007742:	b29b      	uxth	r3, r3
 8007744:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007748:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800774c:	b292      	uxth	r2, r2
 800774e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007752:	45e1      	cmp	r9, ip
 8007754:	f84e 2b04 	str.w	r2, [lr], #4
 8007758:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800775c:	d2de      	bcs.n	800771c <quorem+0x42>
 800775e:	9b00      	ldr	r3, [sp, #0]
 8007760:	58eb      	ldr	r3, [r5, r3]
 8007762:	b92b      	cbnz	r3, 8007770 <quorem+0x96>
 8007764:	9b01      	ldr	r3, [sp, #4]
 8007766:	3b04      	subs	r3, #4
 8007768:	429d      	cmp	r5, r3
 800776a:	461a      	mov	r2, r3
 800776c:	d32f      	bcc.n	80077ce <quorem+0xf4>
 800776e:	613c      	str	r4, [r7, #16]
 8007770:	4638      	mov	r0, r7
 8007772:	f001 f97b 	bl	8008a6c <__mcmp>
 8007776:	2800      	cmp	r0, #0
 8007778:	db25      	blt.n	80077c6 <quorem+0xec>
 800777a:	4629      	mov	r1, r5
 800777c:	2000      	movs	r0, #0
 800777e:	f858 2b04 	ldr.w	r2, [r8], #4
 8007782:	f8d1 c000 	ldr.w	ip, [r1]
 8007786:	fa1f fe82 	uxth.w	lr, r2
 800778a:	fa1f f38c 	uxth.w	r3, ip
 800778e:	eba3 030e 	sub.w	r3, r3, lr
 8007792:	4403      	add	r3, r0
 8007794:	0c12      	lsrs	r2, r2, #16
 8007796:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800779a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800779e:	b29b      	uxth	r3, r3
 80077a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077a4:	45c1      	cmp	r9, r8
 80077a6:	f841 3b04 	str.w	r3, [r1], #4
 80077aa:	ea4f 4022 	mov.w	r0, r2, asr #16
 80077ae:	d2e6      	bcs.n	800777e <quorem+0xa4>
 80077b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80077b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80077b8:	b922      	cbnz	r2, 80077c4 <quorem+0xea>
 80077ba:	3b04      	subs	r3, #4
 80077bc:	429d      	cmp	r5, r3
 80077be:	461a      	mov	r2, r3
 80077c0:	d30b      	bcc.n	80077da <quorem+0x100>
 80077c2:	613c      	str	r4, [r7, #16]
 80077c4:	3601      	adds	r6, #1
 80077c6:	4630      	mov	r0, r6
 80077c8:	b003      	add	sp, #12
 80077ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ce:	6812      	ldr	r2, [r2, #0]
 80077d0:	3b04      	subs	r3, #4
 80077d2:	2a00      	cmp	r2, #0
 80077d4:	d1cb      	bne.n	800776e <quorem+0x94>
 80077d6:	3c01      	subs	r4, #1
 80077d8:	e7c6      	b.n	8007768 <quorem+0x8e>
 80077da:	6812      	ldr	r2, [r2, #0]
 80077dc:	3b04      	subs	r3, #4
 80077de:	2a00      	cmp	r2, #0
 80077e0:	d1ef      	bne.n	80077c2 <quorem+0xe8>
 80077e2:	3c01      	subs	r4, #1
 80077e4:	e7ea      	b.n	80077bc <quorem+0xe2>
 80077e6:	2000      	movs	r0, #0
 80077e8:	e7ee      	b.n	80077c8 <quorem+0xee>
 80077ea:	0000      	movs	r0, r0
 80077ec:	0000      	movs	r0, r0
	...

080077f0 <_dtoa_r>:
 80077f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077f4:	69c7      	ldr	r7, [r0, #28]
 80077f6:	b099      	sub	sp, #100	@ 0x64
 80077f8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80077fc:	ec55 4b10 	vmov	r4, r5, d0
 8007800:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007802:	9109      	str	r1, [sp, #36]	@ 0x24
 8007804:	4683      	mov	fp, r0
 8007806:	920e      	str	r2, [sp, #56]	@ 0x38
 8007808:	9313      	str	r3, [sp, #76]	@ 0x4c
 800780a:	b97f      	cbnz	r7, 800782c <_dtoa_r+0x3c>
 800780c:	2010      	movs	r0, #16
 800780e:	f000 fdfd 	bl	800840c <malloc>
 8007812:	4602      	mov	r2, r0
 8007814:	f8cb 001c 	str.w	r0, [fp, #28]
 8007818:	b920      	cbnz	r0, 8007824 <_dtoa_r+0x34>
 800781a:	4ba7      	ldr	r3, [pc, #668]	@ (8007ab8 <_dtoa_r+0x2c8>)
 800781c:	21ef      	movs	r1, #239	@ 0xef
 800781e:	48a7      	ldr	r0, [pc, #668]	@ (8007abc <_dtoa_r+0x2cc>)
 8007820:	f001 fe2e 	bl	8009480 <__assert_func>
 8007824:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007828:	6007      	str	r7, [r0, #0]
 800782a:	60c7      	str	r7, [r0, #12]
 800782c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007830:	6819      	ldr	r1, [r3, #0]
 8007832:	b159      	cbz	r1, 800784c <_dtoa_r+0x5c>
 8007834:	685a      	ldr	r2, [r3, #4]
 8007836:	604a      	str	r2, [r1, #4]
 8007838:	2301      	movs	r3, #1
 800783a:	4093      	lsls	r3, r2
 800783c:	608b      	str	r3, [r1, #8]
 800783e:	4658      	mov	r0, fp
 8007840:	f000 feda 	bl	80085f8 <_Bfree>
 8007844:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007848:	2200      	movs	r2, #0
 800784a:	601a      	str	r2, [r3, #0]
 800784c:	1e2b      	subs	r3, r5, #0
 800784e:	bfb9      	ittee	lt
 8007850:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007854:	9303      	strlt	r3, [sp, #12]
 8007856:	2300      	movge	r3, #0
 8007858:	6033      	strge	r3, [r6, #0]
 800785a:	9f03      	ldr	r7, [sp, #12]
 800785c:	4b98      	ldr	r3, [pc, #608]	@ (8007ac0 <_dtoa_r+0x2d0>)
 800785e:	bfbc      	itt	lt
 8007860:	2201      	movlt	r2, #1
 8007862:	6032      	strlt	r2, [r6, #0]
 8007864:	43bb      	bics	r3, r7
 8007866:	d112      	bne.n	800788e <_dtoa_r+0x9e>
 8007868:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800786a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800786e:	6013      	str	r3, [r2, #0]
 8007870:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007874:	4323      	orrs	r3, r4
 8007876:	f000 854d 	beq.w	8008314 <_dtoa_r+0xb24>
 800787a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800787c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007ad4 <_dtoa_r+0x2e4>
 8007880:	2b00      	cmp	r3, #0
 8007882:	f000 854f 	beq.w	8008324 <_dtoa_r+0xb34>
 8007886:	f10a 0303 	add.w	r3, sl, #3
 800788a:	f000 bd49 	b.w	8008320 <_dtoa_r+0xb30>
 800788e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007892:	2200      	movs	r2, #0
 8007894:	ec51 0b17 	vmov	r0, r1, d7
 8007898:	2300      	movs	r3, #0
 800789a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800789e:	f7f9 f913 	bl	8000ac8 <__aeabi_dcmpeq>
 80078a2:	4680      	mov	r8, r0
 80078a4:	b158      	cbz	r0, 80078be <_dtoa_r+0xce>
 80078a6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80078a8:	2301      	movs	r3, #1
 80078aa:	6013      	str	r3, [r2, #0]
 80078ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80078ae:	b113      	cbz	r3, 80078b6 <_dtoa_r+0xc6>
 80078b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80078b2:	4b84      	ldr	r3, [pc, #528]	@ (8007ac4 <_dtoa_r+0x2d4>)
 80078b4:	6013      	str	r3, [r2, #0]
 80078b6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007ad8 <_dtoa_r+0x2e8>
 80078ba:	f000 bd33 	b.w	8008324 <_dtoa_r+0xb34>
 80078be:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80078c2:	aa16      	add	r2, sp, #88	@ 0x58
 80078c4:	a917      	add	r1, sp, #92	@ 0x5c
 80078c6:	4658      	mov	r0, fp
 80078c8:	f001 f980 	bl	8008bcc <__d2b>
 80078cc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80078d0:	4681      	mov	r9, r0
 80078d2:	2e00      	cmp	r6, #0
 80078d4:	d077      	beq.n	80079c6 <_dtoa_r+0x1d6>
 80078d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80078d8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80078dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80078e4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80078e8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80078ec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80078f0:	4619      	mov	r1, r3
 80078f2:	2200      	movs	r2, #0
 80078f4:	4b74      	ldr	r3, [pc, #464]	@ (8007ac8 <_dtoa_r+0x2d8>)
 80078f6:	f7f8 fcc7 	bl	8000288 <__aeabi_dsub>
 80078fa:	a369      	add	r3, pc, #420	@ (adr r3, 8007aa0 <_dtoa_r+0x2b0>)
 80078fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007900:	f7f8 fe7a 	bl	80005f8 <__aeabi_dmul>
 8007904:	a368      	add	r3, pc, #416	@ (adr r3, 8007aa8 <_dtoa_r+0x2b8>)
 8007906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800790a:	f7f8 fcbf 	bl	800028c <__adddf3>
 800790e:	4604      	mov	r4, r0
 8007910:	4630      	mov	r0, r6
 8007912:	460d      	mov	r5, r1
 8007914:	f7f8 fe06 	bl	8000524 <__aeabi_i2d>
 8007918:	a365      	add	r3, pc, #404	@ (adr r3, 8007ab0 <_dtoa_r+0x2c0>)
 800791a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791e:	f7f8 fe6b 	bl	80005f8 <__aeabi_dmul>
 8007922:	4602      	mov	r2, r0
 8007924:	460b      	mov	r3, r1
 8007926:	4620      	mov	r0, r4
 8007928:	4629      	mov	r1, r5
 800792a:	f7f8 fcaf 	bl	800028c <__adddf3>
 800792e:	4604      	mov	r4, r0
 8007930:	460d      	mov	r5, r1
 8007932:	f7f9 f911 	bl	8000b58 <__aeabi_d2iz>
 8007936:	2200      	movs	r2, #0
 8007938:	4607      	mov	r7, r0
 800793a:	2300      	movs	r3, #0
 800793c:	4620      	mov	r0, r4
 800793e:	4629      	mov	r1, r5
 8007940:	f7f9 f8cc 	bl	8000adc <__aeabi_dcmplt>
 8007944:	b140      	cbz	r0, 8007958 <_dtoa_r+0x168>
 8007946:	4638      	mov	r0, r7
 8007948:	f7f8 fdec 	bl	8000524 <__aeabi_i2d>
 800794c:	4622      	mov	r2, r4
 800794e:	462b      	mov	r3, r5
 8007950:	f7f9 f8ba 	bl	8000ac8 <__aeabi_dcmpeq>
 8007954:	b900      	cbnz	r0, 8007958 <_dtoa_r+0x168>
 8007956:	3f01      	subs	r7, #1
 8007958:	2f16      	cmp	r7, #22
 800795a:	d851      	bhi.n	8007a00 <_dtoa_r+0x210>
 800795c:	4b5b      	ldr	r3, [pc, #364]	@ (8007acc <_dtoa_r+0x2dc>)
 800795e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007966:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800796a:	f7f9 f8b7 	bl	8000adc <__aeabi_dcmplt>
 800796e:	2800      	cmp	r0, #0
 8007970:	d048      	beq.n	8007a04 <_dtoa_r+0x214>
 8007972:	3f01      	subs	r7, #1
 8007974:	2300      	movs	r3, #0
 8007976:	9312      	str	r3, [sp, #72]	@ 0x48
 8007978:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800797a:	1b9b      	subs	r3, r3, r6
 800797c:	1e5a      	subs	r2, r3, #1
 800797e:	bf44      	itt	mi
 8007980:	f1c3 0801 	rsbmi	r8, r3, #1
 8007984:	2300      	movmi	r3, #0
 8007986:	9208      	str	r2, [sp, #32]
 8007988:	bf54      	ite	pl
 800798a:	f04f 0800 	movpl.w	r8, #0
 800798e:	9308      	strmi	r3, [sp, #32]
 8007990:	2f00      	cmp	r7, #0
 8007992:	db39      	blt.n	8007a08 <_dtoa_r+0x218>
 8007994:	9b08      	ldr	r3, [sp, #32]
 8007996:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007998:	443b      	add	r3, r7
 800799a:	9308      	str	r3, [sp, #32]
 800799c:	2300      	movs	r3, #0
 800799e:	930a      	str	r3, [sp, #40]	@ 0x28
 80079a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079a2:	2b09      	cmp	r3, #9
 80079a4:	d864      	bhi.n	8007a70 <_dtoa_r+0x280>
 80079a6:	2b05      	cmp	r3, #5
 80079a8:	bfc4      	itt	gt
 80079aa:	3b04      	subgt	r3, #4
 80079ac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80079ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079b0:	f1a3 0302 	sub.w	r3, r3, #2
 80079b4:	bfcc      	ite	gt
 80079b6:	2400      	movgt	r4, #0
 80079b8:	2401      	movle	r4, #1
 80079ba:	2b03      	cmp	r3, #3
 80079bc:	d863      	bhi.n	8007a86 <_dtoa_r+0x296>
 80079be:	e8df f003 	tbb	[pc, r3]
 80079c2:	372a      	.short	0x372a
 80079c4:	5535      	.short	0x5535
 80079c6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80079ca:	441e      	add	r6, r3
 80079cc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80079d0:	2b20      	cmp	r3, #32
 80079d2:	bfc1      	itttt	gt
 80079d4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80079d8:	409f      	lslgt	r7, r3
 80079da:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80079de:	fa24 f303 	lsrgt.w	r3, r4, r3
 80079e2:	bfd6      	itet	le
 80079e4:	f1c3 0320 	rsble	r3, r3, #32
 80079e8:	ea47 0003 	orrgt.w	r0, r7, r3
 80079ec:	fa04 f003 	lslle.w	r0, r4, r3
 80079f0:	f7f8 fd88 	bl	8000504 <__aeabi_ui2d>
 80079f4:	2201      	movs	r2, #1
 80079f6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80079fa:	3e01      	subs	r6, #1
 80079fc:	9214      	str	r2, [sp, #80]	@ 0x50
 80079fe:	e777      	b.n	80078f0 <_dtoa_r+0x100>
 8007a00:	2301      	movs	r3, #1
 8007a02:	e7b8      	b.n	8007976 <_dtoa_r+0x186>
 8007a04:	9012      	str	r0, [sp, #72]	@ 0x48
 8007a06:	e7b7      	b.n	8007978 <_dtoa_r+0x188>
 8007a08:	427b      	negs	r3, r7
 8007a0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	eba8 0807 	sub.w	r8, r8, r7
 8007a12:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007a14:	e7c4      	b.n	80079a0 <_dtoa_r+0x1b0>
 8007a16:	2300      	movs	r3, #0
 8007a18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	dc35      	bgt.n	8007a8c <_dtoa_r+0x29c>
 8007a20:	2301      	movs	r3, #1
 8007a22:	9300      	str	r3, [sp, #0]
 8007a24:	9307      	str	r3, [sp, #28]
 8007a26:	461a      	mov	r2, r3
 8007a28:	920e      	str	r2, [sp, #56]	@ 0x38
 8007a2a:	e00b      	b.n	8007a44 <_dtoa_r+0x254>
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e7f3      	b.n	8007a18 <_dtoa_r+0x228>
 8007a30:	2300      	movs	r3, #0
 8007a32:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a36:	18fb      	adds	r3, r7, r3
 8007a38:	9300      	str	r3, [sp, #0]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	9307      	str	r3, [sp, #28]
 8007a40:	bfb8      	it	lt
 8007a42:	2301      	movlt	r3, #1
 8007a44:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007a48:	2100      	movs	r1, #0
 8007a4a:	2204      	movs	r2, #4
 8007a4c:	f102 0514 	add.w	r5, r2, #20
 8007a50:	429d      	cmp	r5, r3
 8007a52:	d91f      	bls.n	8007a94 <_dtoa_r+0x2a4>
 8007a54:	6041      	str	r1, [r0, #4]
 8007a56:	4658      	mov	r0, fp
 8007a58:	f000 fd8e 	bl	8008578 <_Balloc>
 8007a5c:	4682      	mov	sl, r0
 8007a5e:	2800      	cmp	r0, #0
 8007a60:	d13c      	bne.n	8007adc <_dtoa_r+0x2ec>
 8007a62:	4b1b      	ldr	r3, [pc, #108]	@ (8007ad0 <_dtoa_r+0x2e0>)
 8007a64:	4602      	mov	r2, r0
 8007a66:	f240 11af 	movw	r1, #431	@ 0x1af
 8007a6a:	e6d8      	b.n	800781e <_dtoa_r+0x2e>
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e7e0      	b.n	8007a32 <_dtoa_r+0x242>
 8007a70:	2401      	movs	r4, #1
 8007a72:	2300      	movs	r3, #0
 8007a74:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a76:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007a78:	f04f 33ff 	mov.w	r3, #4294967295
 8007a7c:	9300      	str	r3, [sp, #0]
 8007a7e:	9307      	str	r3, [sp, #28]
 8007a80:	2200      	movs	r2, #0
 8007a82:	2312      	movs	r3, #18
 8007a84:	e7d0      	b.n	8007a28 <_dtoa_r+0x238>
 8007a86:	2301      	movs	r3, #1
 8007a88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a8a:	e7f5      	b.n	8007a78 <_dtoa_r+0x288>
 8007a8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a8e:	9300      	str	r3, [sp, #0]
 8007a90:	9307      	str	r3, [sp, #28]
 8007a92:	e7d7      	b.n	8007a44 <_dtoa_r+0x254>
 8007a94:	3101      	adds	r1, #1
 8007a96:	0052      	lsls	r2, r2, #1
 8007a98:	e7d8      	b.n	8007a4c <_dtoa_r+0x25c>
 8007a9a:	bf00      	nop
 8007a9c:	f3af 8000 	nop.w
 8007aa0:	636f4361 	.word	0x636f4361
 8007aa4:	3fd287a7 	.word	0x3fd287a7
 8007aa8:	8b60c8b3 	.word	0x8b60c8b3
 8007aac:	3fc68a28 	.word	0x3fc68a28
 8007ab0:	509f79fb 	.word	0x509f79fb
 8007ab4:	3fd34413 	.word	0x3fd34413
 8007ab8:	08009a8a 	.word	0x08009a8a
 8007abc:	08009aa1 	.word	0x08009aa1
 8007ac0:	7ff00000 	.word	0x7ff00000
 8007ac4:	08009a5a 	.word	0x08009a5a
 8007ac8:	3ff80000 	.word	0x3ff80000
 8007acc:	08009b98 	.word	0x08009b98
 8007ad0:	08009af9 	.word	0x08009af9
 8007ad4:	08009a86 	.word	0x08009a86
 8007ad8:	08009a59 	.word	0x08009a59
 8007adc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007ae0:	6018      	str	r0, [r3, #0]
 8007ae2:	9b07      	ldr	r3, [sp, #28]
 8007ae4:	2b0e      	cmp	r3, #14
 8007ae6:	f200 80a4 	bhi.w	8007c32 <_dtoa_r+0x442>
 8007aea:	2c00      	cmp	r4, #0
 8007aec:	f000 80a1 	beq.w	8007c32 <_dtoa_r+0x442>
 8007af0:	2f00      	cmp	r7, #0
 8007af2:	dd33      	ble.n	8007b5c <_dtoa_r+0x36c>
 8007af4:	4bad      	ldr	r3, [pc, #692]	@ (8007dac <_dtoa_r+0x5bc>)
 8007af6:	f007 020f 	and.w	r2, r7, #15
 8007afa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007afe:	ed93 7b00 	vldr	d7, [r3]
 8007b02:	05f8      	lsls	r0, r7, #23
 8007b04:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007b08:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007b0c:	d516      	bpl.n	8007b3c <_dtoa_r+0x34c>
 8007b0e:	4ba8      	ldr	r3, [pc, #672]	@ (8007db0 <_dtoa_r+0x5c0>)
 8007b10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007b18:	f7f8 fe98 	bl	800084c <__aeabi_ddiv>
 8007b1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b20:	f004 040f 	and.w	r4, r4, #15
 8007b24:	2603      	movs	r6, #3
 8007b26:	4da2      	ldr	r5, [pc, #648]	@ (8007db0 <_dtoa_r+0x5c0>)
 8007b28:	b954      	cbnz	r4, 8007b40 <_dtoa_r+0x350>
 8007b2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b32:	f7f8 fe8b 	bl	800084c <__aeabi_ddiv>
 8007b36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b3a:	e028      	b.n	8007b8e <_dtoa_r+0x39e>
 8007b3c:	2602      	movs	r6, #2
 8007b3e:	e7f2      	b.n	8007b26 <_dtoa_r+0x336>
 8007b40:	07e1      	lsls	r1, r4, #31
 8007b42:	d508      	bpl.n	8007b56 <_dtoa_r+0x366>
 8007b44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b48:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007b4c:	f7f8 fd54 	bl	80005f8 <__aeabi_dmul>
 8007b50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b54:	3601      	adds	r6, #1
 8007b56:	1064      	asrs	r4, r4, #1
 8007b58:	3508      	adds	r5, #8
 8007b5a:	e7e5      	b.n	8007b28 <_dtoa_r+0x338>
 8007b5c:	f000 80d2 	beq.w	8007d04 <_dtoa_r+0x514>
 8007b60:	427c      	negs	r4, r7
 8007b62:	4b92      	ldr	r3, [pc, #584]	@ (8007dac <_dtoa_r+0x5bc>)
 8007b64:	4d92      	ldr	r5, [pc, #584]	@ (8007db0 <_dtoa_r+0x5c0>)
 8007b66:	f004 020f 	and.w	r2, r4, #15
 8007b6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b72:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b76:	f7f8 fd3f 	bl	80005f8 <__aeabi_dmul>
 8007b7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b7e:	1124      	asrs	r4, r4, #4
 8007b80:	2300      	movs	r3, #0
 8007b82:	2602      	movs	r6, #2
 8007b84:	2c00      	cmp	r4, #0
 8007b86:	f040 80b2 	bne.w	8007cee <_dtoa_r+0x4fe>
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d1d3      	bne.n	8007b36 <_dtoa_r+0x346>
 8007b8e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007b90:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f000 80b7 	beq.w	8007d08 <_dtoa_r+0x518>
 8007b9a:	4b86      	ldr	r3, [pc, #536]	@ (8007db4 <_dtoa_r+0x5c4>)
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	4629      	mov	r1, r5
 8007ba2:	f7f8 ff9b 	bl	8000adc <__aeabi_dcmplt>
 8007ba6:	2800      	cmp	r0, #0
 8007ba8:	f000 80ae 	beq.w	8007d08 <_dtoa_r+0x518>
 8007bac:	9b07      	ldr	r3, [sp, #28]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f000 80aa 	beq.w	8007d08 <_dtoa_r+0x518>
 8007bb4:	9b00      	ldr	r3, [sp, #0]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	dd37      	ble.n	8007c2a <_dtoa_r+0x43a>
 8007bba:	1e7b      	subs	r3, r7, #1
 8007bbc:	9304      	str	r3, [sp, #16]
 8007bbe:	4620      	mov	r0, r4
 8007bc0:	4b7d      	ldr	r3, [pc, #500]	@ (8007db8 <_dtoa_r+0x5c8>)
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	4629      	mov	r1, r5
 8007bc6:	f7f8 fd17 	bl	80005f8 <__aeabi_dmul>
 8007bca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bce:	9c00      	ldr	r4, [sp, #0]
 8007bd0:	3601      	adds	r6, #1
 8007bd2:	4630      	mov	r0, r6
 8007bd4:	f7f8 fca6 	bl	8000524 <__aeabi_i2d>
 8007bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007bdc:	f7f8 fd0c 	bl	80005f8 <__aeabi_dmul>
 8007be0:	4b76      	ldr	r3, [pc, #472]	@ (8007dbc <_dtoa_r+0x5cc>)
 8007be2:	2200      	movs	r2, #0
 8007be4:	f7f8 fb52 	bl	800028c <__adddf3>
 8007be8:	4605      	mov	r5, r0
 8007bea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007bee:	2c00      	cmp	r4, #0
 8007bf0:	f040 808d 	bne.w	8007d0e <_dtoa_r+0x51e>
 8007bf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bf8:	4b71      	ldr	r3, [pc, #452]	@ (8007dc0 <_dtoa_r+0x5d0>)
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f7f8 fb44 	bl	8000288 <__aeabi_dsub>
 8007c00:	4602      	mov	r2, r0
 8007c02:	460b      	mov	r3, r1
 8007c04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007c08:	462a      	mov	r2, r5
 8007c0a:	4633      	mov	r3, r6
 8007c0c:	f7f8 ff84 	bl	8000b18 <__aeabi_dcmpgt>
 8007c10:	2800      	cmp	r0, #0
 8007c12:	f040 828b 	bne.w	800812c <_dtoa_r+0x93c>
 8007c16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c1a:	462a      	mov	r2, r5
 8007c1c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007c20:	f7f8 ff5c 	bl	8000adc <__aeabi_dcmplt>
 8007c24:	2800      	cmp	r0, #0
 8007c26:	f040 8128 	bne.w	8007e7a <_dtoa_r+0x68a>
 8007c2a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007c2e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007c32:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	f2c0 815a 	blt.w	8007eee <_dtoa_r+0x6fe>
 8007c3a:	2f0e      	cmp	r7, #14
 8007c3c:	f300 8157 	bgt.w	8007eee <_dtoa_r+0x6fe>
 8007c40:	4b5a      	ldr	r3, [pc, #360]	@ (8007dac <_dtoa_r+0x5bc>)
 8007c42:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007c46:	ed93 7b00 	vldr	d7, [r3]
 8007c4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	ed8d 7b00 	vstr	d7, [sp]
 8007c52:	da03      	bge.n	8007c5c <_dtoa_r+0x46c>
 8007c54:	9b07      	ldr	r3, [sp, #28]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	f340 8101 	ble.w	8007e5e <_dtoa_r+0x66e>
 8007c5c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007c60:	4656      	mov	r6, sl
 8007c62:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c66:	4620      	mov	r0, r4
 8007c68:	4629      	mov	r1, r5
 8007c6a:	f7f8 fdef 	bl	800084c <__aeabi_ddiv>
 8007c6e:	f7f8 ff73 	bl	8000b58 <__aeabi_d2iz>
 8007c72:	4680      	mov	r8, r0
 8007c74:	f7f8 fc56 	bl	8000524 <__aeabi_i2d>
 8007c78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c7c:	f7f8 fcbc 	bl	80005f8 <__aeabi_dmul>
 8007c80:	4602      	mov	r2, r0
 8007c82:	460b      	mov	r3, r1
 8007c84:	4620      	mov	r0, r4
 8007c86:	4629      	mov	r1, r5
 8007c88:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007c8c:	f7f8 fafc 	bl	8000288 <__aeabi_dsub>
 8007c90:	f806 4b01 	strb.w	r4, [r6], #1
 8007c94:	9d07      	ldr	r5, [sp, #28]
 8007c96:	eba6 040a 	sub.w	r4, r6, sl
 8007c9a:	42a5      	cmp	r5, r4
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	f040 8117 	bne.w	8007ed2 <_dtoa_r+0x6e2>
 8007ca4:	f7f8 faf2 	bl	800028c <__adddf3>
 8007ca8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007cac:	4604      	mov	r4, r0
 8007cae:	460d      	mov	r5, r1
 8007cb0:	f7f8 ff32 	bl	8000b18 <__aeabi_dcmpgt>
 8007cb4:	2800      	cmp	r0, #0
 8007cb6:	f040 80f9 	bne.w	8007eac <_dtoa_r+0x6bc>
 8007cba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	4629      	mov	r1, r5
 8007cc2:	f7f8 ff01 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cc6:	b118      	cbz	r0, 8007cd0 <_dtoa_r+0x4e0>
 8007cc8:	f018 0f01 	tst.w	r8, #1
 8007ccc:	f040 80ee 	bne.w	8007eac <_dtoa_r+0x6bc>
 8007cd0:	4649      	mov	r1, r9
 8007cd2:	4658      	mov	r0, fp
 8007cd4:	f000 fc90 	bl	80085f8 <_Bfree>
 8007cd8:	2300      	movs	r3, #0
 8007cda:	7033      	strb	r3, [r6, #0]
 8007cdc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007cde:	3701      	adds	r7, #1
 8007ce0:	601f      	str	r7, [r3, #0]
 8007ce2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	f000 831d 	beq.w	8008324 <_dtoa_r+0xb34>
 8007cea:	601e      	str	r6, [r3, #0]
 8007cec:	e31a      	b.n	8008324 <_dtoa_r+0xb34>
 8007cee:	07e2      	lsls	r2, r4, #31
 8007cf0:	d505      	bpl.n	8007cfe <_dtoa_r+0x50e>
 8007cf2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007cf6:	f7f8 fc7f 	bl	80005f8 <__aeabi_dmul>
 8007cfa:	3601      	adds	r6, #1
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	1064      	asrs	r4, r4, #1
 8007d00:	3508      	adds	r5, #8
 8007d02:	e73f      	b.n	8007b84 <_dtoa_r+0x394>
 8007d04:	2602      	movs	r6, #2
 8007d06:	e742      	b.n	8007b8e <_dtoa_r+0x39e>
 8007d08:	9c07      	ldr	r4, [sp, #28]
 8007d0a:	9704      	str	r7, [sp, #16]
 8007d0c:	e761      	b.n	8007bd2 <_dtoa_r+0x3e2>
 8007d0e:	4b27      	ldr	r3, [pc, #156]	@ (8007dac <_dtoa_r+0x5bc>)
 8007d10:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007d12:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007d16:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007d1a:	4454      	add	r4, sl
 8007d1c:	2900      	cmp	r1, #0
 8007d1e:	d053      	beq.n	8007dc8 <_dtoa_r+0x5d8>
 8007d20:	4928      	ldr	r1, [pc, #160]	@ (8007dc4 <_dtoa_r+0x5d4>)
 8007d22:	2000      	movs	r0, #0
 8007d24:	f7f8 fd92 	bl	800084c <__aeabi_ddiv>
 8007d28:	4633      	mov	r3, r6
 8007d2a:	462a      	mov	r2, r5
 8007d2c:	f7f8 faac 	bl	8000288 <__aeabi_dsub>
 8007d30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007d34:	4656      	mov	r6, sl
 8007d36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d3a:	f7f8 ff0d 	bl	8000b58 <__aeabi_d2iz>
 8007d3e:	4605      	mov	r5, r0
 8007d40:	f7f8 fbf0 	bl	8000524 <__aeabi_i2d>
 8007d44:	4602      	mov	r2, r0
 8007d46:	460b      	mov	r3, r1
 8007d48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d4c:	f7f8 fa9c 	bl	8000288 <__aeabi_dsub>
 8007d50:	3530      	adds	r5, #48	@ 0x30
 8007d52:	4602      	mov	r2, r0
 8007d54:	460b      	mov	r3, r1
 8007d56:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d5a:	f806 5b01 	strb.w	r5, [r6], #1
 8007d5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007d62:	f7f8 febb 	bl	8000adc <__aeabi_dcmplt>
 8007d66:	2800      	cmp	r0, #0
 8007d68:	d171      	bne.n	8007e4e <_dtoa_r+0x65e>
 8007d6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d6e:	4911      	ldr	r1, [pc, #68]	@ (8007db4 <_dtoa_r+0x5c4>)
 8007d70:	2000      	movs	r0, #0
 8007d72:	f7f8 fa89 	bl	8000288 <__aeabi_dsub>
 8007d76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007d7a:	f7f8 feaf 	bl	8000adc <__aeabi_dcmplt>
 8007d7e:	2800      	cmp	r0, #0
 8007d80:	f040 8095 	bne.w	8007eae <_dtoa_r+0x6be>
 8007d84:	42a6      	cmp	r6, r4
 8007d86:	f43f af50 	beq.w	8007c2a <_dtoa_r+0x43a>
 8007d8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8007db8 <_dtoa_r+0x5c8>)
 8007d90:	2200      	movs	r2, #0
 8007d92:	f7f8 fc31 	bl	80005f8 <__aeabi_dmul>
 8007d96:	4b08      	ldr	r3, [pc, #32]	@ (8007db8 <_dtoa_r+0x5c8>)
 8007d98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007da2:	f7f8 fc29 	bl	80005f8 <__aeabi_dmul>
 8007da6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007daa:	e7c4      	b.n	8007d36 <_dtoa_r+0x546>
 8007dac:	08009b98 	.word	0x08009b98
 8007db0:	08009b70 	.word	0x08009b70
 8007db4:	3ff00000 	.word	0x3ff00000
 8007db8:	40240000 	.word	0x40240000
 8007dbc:	401c0000 	.word	0x401c0000
 8007dc0:	40140000 	.word	0x40140000
 8007dc4:	3fe00000 	.word	0x3fe00000
 8007dc8:	4631      	mov	r1, r6
 8007dca:	4628      	mov	r0, r5
 8007dcc:	f7f8 fc14 	bl	80005f8 <__aeabi_dmul>
 8007dd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007dd4:	9415      	str	r4, [sp, #84]	@ 0x54
 8007dd6:	4656      	mov	r6, sl
 8007dd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ddc:	f7f8 febc 	bl	8000b58 <__aeabi_d2iz>
 8007de0:	4605      	mov	r5, r0
 8007de2:	f7f8 fb9f 	bl	8000524 <__aeabi_i2d>
 8007de6:	4602      	mov	r2, r0
 8007de8:	460b      	mov	r3, r1
 8007dea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dee:	f7f8 fa4b 	bl	8000288 <__aeabi_dsub>
 8007df2:	3530      	adds	r5, #48	@ 0x30
 8007df4:	f806 5b01 	strb.w	r5, [r6], #1
 8007df8:	4602      	mov	r2, r0
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	42a6      	cmp	r6, r4
 8007dfe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e02:	f04f 0200 	mov.w	r2, #0
 8007e06:	d124      	bne.n	8007e52 <_dtoa_r+0x662>
 8007e08:	4bac      	ldr	r3, [pc, #688]	@ (80080bc <_dtoa_r+0x8cc>)
 8007e0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007e0e:	f7f8 fa3d 	bl	800028c <__adddf3>
 8007e12:	4602      	mov	r2, r0
 8007e14:	460b      	mov	r3, r1
 8007e16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e1a:	f7f8 fe7d 	bl	8000b18 <__aeabi_dcmpgt>
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	d145      	bne.n	8007eae <_dtoa_r+0x6be>
 8007e22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007e26:	49a5      	ldr	r1, [pc, #660]	@ (80080bc <_dtoa_r+0x8cc>)
 8007e28:	2000      	movs	r0, #0
 8007e2a:	f7f8 fa2d 	bl	8000288 <__aeabi_dsub>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	460b      	mov	r3, r1
 8007e32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e36:	f7f8 fe51 	bl	8000adc <__aeabi_dcmplt>
 8007e3a:	2800      	cmp	r0, #0
 8007e3c:	f43f aef5 	beq.w	8007c2a <_dtoa_r+0x43a>
 8007e40:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007e42:	1e73      	subs	r3, r6, #1
 8007e44:	9315      	str	r3, [sp, #84]	@ 0x54
 8007e46:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007e4a:	2b30      	cmp	r3, #48	@ 0x30
 8007e4c:	d0f8      	beq.n	8007e40 <_dtoa_r+0x650>
 8007e4e:	9f04      	ldr	r7, [sp, #16]
 8007e50:	e73e      	b.n	8007cd0 <_dtoa_r+0x4e0>
 8007e52:	4b9b      	ldr	r3, [pc, #620]	@ (80080c0 <_dtoa_r+0x8d0>)
 8007e54:	f7f8 fbd0 	bl	80005f8 <__aeabi_dmul>
 8007e58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e5c:	e7bc      	b.n	8007dd8 <_dtoa_r+0x5e8>
 8007e5e:	d10c      	bne.n	8007e7a <_dtoa_r+0x68a>
 8007e60:	4b98      	ldr	r3, [pc, #608]	@ (80080c4 <_dtoa_r+0x8d4>)
 8007e62:	2200      	movs	r2, #0
 8007e64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e68:	f7f8 fbc6 	bl	80005f8 <__aeabi_dmul>
 8007e6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e70:	f7f8 fe48 	bl	8000b04 <__aeabi_dcmpge>
 8007e74:	2800      	cmp	r0, #0
 8007e76:	f000 8157 	beq.w	8008128 <_dtoa_r+0x938>
 8007e7a:	2400      	movs	r4, #0
 8007e7c:	4625      	mov	r5, r4
 8007e7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e80:	43db      	mvns	r3, r3
 8007e82:	9304      	str	r3, [sp, #16]
 8007e84:	4656      	mov	r6, sl
 8007e86:	2700      	movs	r7, #0
 8007e88:	4621      	mov	r1, r4
 8007e8a:	4658      	mov	r0, fp
 8007e8c:	f000 fbb4 	bl	80085f8 <_Bfree>
 8007e90:	2d00      	cmp	r5, #0
 8007e92:	d0dc      	beq.n	8007e4e <_dtoa_r+0x65e>
 8007e94:	b12f      	cbz	r7, 8007ea2 <_dtoa_r+0x6b2>
 8007e96:	42af      	cmp	r7, r5
 8007e98:	d003      	beq.n	8007ea2 <_dtoa_r+0x6b2>
 8007e9a:	4639      	mov	r1, r7
 8007e9c:	4658      	mov	r0, fp
 8007e9e:	f000 fbab 	bl	80085f8 <_Bfree>
 8007ea2:	4629      	mov	r1, r5
 8007ea4:	4658      	mov	r0, fp
 8007ea6:	f000 fba7 	bl	80085f8 <_Bfree>
 8007eaa:	e7d0      	b.n	8007e4e <_dtoa_r+0x65e>
 8007eac:	9704      	str	r7, [sp, #16]
 8007eae:	4633      	mov	r3, r6
 8007eb0:	461e      	mov	r6, r3
 8007eb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007eb6:	2a39      	cmp	r2, #57	@ 0x39
 8007eb8:	d107      	bne.n	8007eca <_dtoa_r+0x6da>
 8007eba:	459a      	cmp	sl, r3
 8007ebc:	d1f8      	bne.n	8007eb0 <_dtoa_r+0x6c0>
 8007ebe:	9a04      	ldr	r2, [sp, #16]
 8007ec0:	3201      	adds	r2, #1
 8007ec2:	9204      	str	r2, [sp, #16]
 8007ec4:	2230      	movs	r2, #48	@ 0x30
 8007ec6:	f88a 2000 	strb.w	r2, [sl]
 8007eca:	781a      	ldrb	r2, [r3, #0]
 8007ecc:	3201      	adds	r2, #1
 8007ece:	701a      	strb	r2, [r3, #0]
 8007ed0:	e7bd      	b.n	8007e4e <_dtoa_r+0x65e>
 8007ed2:	4b7b      	ldr	r3, [pc, #492]	@ (80080c0 <_dtoa_r+0x8d0>)
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f7f8 fb8f 	bl	80005f8 <__aeabi_dmul>
 8007eda:	2200      	movs	r2, #0
 8007edc:	2300      	movs	r3, #0
 8007ede:	4604      	mov	r4, r0
 8007ee0:	460d      	mov	r5, r1
 8007ee2:	f7f8 fdf1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ee6:	2800      	cmp	r0, #0
 8007ee8:	f43f aebb 	beq.w	8007c62 <_dtoa_r+0x472>
 8007eec:	e6f0      	b.n	8007cd0 <_dtoa_r+0x4e0>
 8007eee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007ef0:	2a00      	cmp	r2, #0
 8007ef2:	f000 80db 	beq.w	80080ac <_dtoa_r+0x8bc>
 8007ef6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ef8:	2a01      	cmp	r2, #1
 8007efa:	f300 80bf 	bgt.w	800807c <_dtoa_r+0x88c>
 8007efe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007f00:	2a00      	cmp	r2, #0
 8007f02:	f000 80b7 	beq.w	8008074 <_dtoa_r+0x884>
 8007f06:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007f0a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007f0c:	4646      	mov	r6, r8
 8007f0e:	9a08      	ldr	r2, [sp, #32]
 8007f10:	2101      	movs	r1, #1
 8007f12:	441a      	add	r2, r3
 8007f14:	4658      	mov	r0, fp
 8007f16:	4498      	add	r8, r3
 8007f18:	9208      	str	r2, [sp, #32]
 8007f1a:	f000 fc21 	bl	8008760 <__i2b>
 8007f1e:	4605      	mov	r5, r0
 8007f20:	b15e      	cbz	r6, 8007f3a <_dtoa_r+0x74a>
 8007f22:	9b08      	ldr	r3, [sp, #32]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	dd08      	ble.n	8007f3a <_dtoa_r+0x74a>
 8007f28:	42b3      	cmp	r3, r6
 8007f2a:	9a08      	ldr	r2, [sp, #32]
 8007f2c:	bfa8      	it	ge
 8007f2e:	4633      	movge	r3, r6
 8007f30:	eba8 0803 	sub.w	r8, r8, r3
 8007f34:	1af6      	subs	r6, r6, r3
 8007f36:	1ad3      	subs	r3, r2, r3
 8007f38:	9308      	str	r3, [sp, #32]
 8007f3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f3c:	b1f3      	cbz	r3, 8007f7c <_dtoa_r+0x78c>
 8007f3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	f000 80b7 	beq.w	80080b4 <_dtoa_r+0x8c4>
 8007f46:	b18c      	cbz	r4, 8007f6c <_dtoa_r+0x77c>
 8007f48:	4629      	mov	r1, r5
 8007f4a:	4622      	mov	r2, r4
 8007f4c:	4658      	mov	r0, fp
 8007f4e:	f000 fcc7 	bl	80088e0 <__pow5mult>
 8007f52:	464a      	mov	r2, r9
 8007f54:	4601      	mov	r1, r0
 8007f56:	4605      	mov	r5, r0
 8007f58:	4658      	mov	r0, fp
 8007f5a:	f000 fc17 	bl	800878c <__multiply>
 8007f5e:	4649      	mov	r1, r9
 8007f60:	9004      	str	r0, [sp, #16]
 8007f62:	4658      	mov	r0, fp
 8007f64:	f000 fb48 	bl	80085f8 <_Bfree>
 8007f68:	9b04      	ldr	r3, [sp, #16]
 8007f6a:	4699      	mov	r9, r3
 8007f6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f6e:	1b1a      	subs	r2, r3, r4
 8007f70:	d004      	beq.n	8007f7c <_dtoa_r+0x78c>
 8007f72:	4649      	mov	r1, r9
 8007f74:	4658      	mov	r0, fp
 8007f76:	f000 fcb3 	bl	80088e0 <__pow5mult>
 8007f7a:	4681      	mov	r9, r0
 8007f7c:	2101      	movs	r1, #1
 8007f7e:	4658      	mov	r0, fp
 8007f80:	f000 fbee 	bl	8008760 <__i2b>
 8007f84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f86:	4604      	mov	r4, r0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	f000 81cf 	beq.w	800832c <_dtoa_r+0xb3c>
 8007f8e:	461a      	mov	r2, r3
 8007f90:	4601      	mov	r1, r0
 8007f92:	4658      	mov	r0, fp
 8007f94:	f000 fca4 	bl	80088e0 <__pow5mult>
 8007f98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	4604      	mov	r4, r0
 8007f9e:	f300 8095 	bgt.w	80080cc <_dtoa_r+0x8dc>
 8007fa2:	9b02      	ldr	r3, [sp, #8]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	f040 8087 	bne.w	80080b8 <_dtoa_r+0x8c8>
 8007faa:	9b03      	ldr	r3, [sp, #12]
 8007fac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	f040 8089 	bne.w	80080c8 <_dtoa_r+0x8d8>
 8007fb6:	9b03      	ldr	r3, [sp, #12]
 8007fb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007fbc:	0d1b      	lsrs	r3, r3, #20
 8007fbe:	051b      	lsls	r3, r3, #20
 8007fc0:	b12b      	cbz	r3, 8007fce <_dtoa_r+0x7de>
 8007fc2:	9b08      	ldr	r3, [sp, #32]
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	9308      	str	r3, [sp, #32]
 8007fc8:	f108 0801 	add.w	r8, r8, #1
 8007fcc:	2301      	movs	r3, #1
 8007fce:	930a      	str	r3, [sp, #40]	@ 0x28
 8007fd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	f000 81b0 	beq.w	8008338 <_dtoa_r+0xb48>
 8007fd8:	6923      	ldr	r3, [r4, #16]
 8007fda:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007fde:	6918      	ldr	r0, [r3, #16]
 8007fe0:	f000 fb72 	bl	80086c8 <__hi0bits>
 8007fe4:	f1c0 0020 	rsb	r0, r0, #32
 8007fe8:	9b08      	ldr	r3, [sp, #32]
 8007fea:	4418      	add	r0, r3
 8007fec:	f010 001f 	ands.w	r0, r0, #31
 8007ff0:	d077      	beq.n	80080e2 <_dtoa_r+0x8f2>
 8007ff2:	f1c0 0320 	rsb	r3, r0, #32
 8007ff6:	2b04      	cmp	r3, #4
 8007ff8:	dd6b      	ble.n	80080d2 <_dtoa_r+0x8e2>
 8007ffa:	9b08      	ldr	r3, [sp, #32]
 8007ffc:	f1c0 001c 	rsb	r0, r0, #28
 8008000:	4403      	add	r3, r0
 8008002:	4480      	add	r8, r0
 8008004:	4406      	add	r6, r0
 8008006:	9308      	str	r3, [sp, #32]
 8008008:	f1b8 0f00 	cmp.w	r8, #0
 800800c:	dd05      	ble.n	800801a <_dtoa_r+0x82a>
 800800e:	4649      	mov	r1, r9
 8008010:	4642      	mov	r2, r8
 8008012:	4658      	mov	r0, fp
 8008014:	f000 fcbe 	bl	8008994 <__lshift>
 8008018:	4681      	mov	r9, r0
 800801a:	9b08      	ldr	r3, [sp, #32]
 800801c:	2b00      	cmp	r3, #0
 800801e:	dd05      	ble.n	800802c <_dtoa_r+0x83c>
 8008020:	4621      	mov	r1, r4
 8008022:	461a      	mov	r2, r3
 8008024:	4658      	mov	r0, fp
 8008026:	f000 fcb5 	bl	8008994 <__lshift>
 800802a:	4604      	mov	r4, r0
 800802c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800802e:	2b00      	cmp	r3, #0
 8008030:	d059      	beq.n	80080e6 <_dtoa_r+0x8f6>
 8008032:	4621      	mov	r1, r4
 8008034:	4648      	mov	r0, r9
 8008036:	f000 fd19 	bl	8008a6c <__mcmp>
 800803a:	2800      	cmp	r0, #0
 800803c:	da53      	bge.n	80080e6 <_dtoa_r+0x8f6>
 800803e:	1e7b      	subs	r3, r7, #1
 8008040:	9304      	str	r3, [sp, #16]
 8008042:	4649      	mov	r1, r9
 8008044:	2300      	movs	r3, #0
 8008046:	220a      	movs	r2, #10
 8008048:	4658      	mov	r0, fp
 800804a:	f000 faf7 	bl	800863c <__multadd>
 800804e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008050:	4681      	mov	r9, r0
 8008052:	2b00      	cmp	r3, #0
 8008054:	f000 8172 	beq.w	800833c <_dtoa_r+0xb4c>
 8008058:	2300      	movs	r3, #0
 800805a:	4629      	mov	r1, r5
 800805c:	220a      	movs	r2, #10
 800805e:	4658      	mov	r0, fp
 8008060:	f000 faec 	bl	800863c <__multadd>
 8008064:	9b00      	ldr	r3, [sp, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	4605      	mov	r5, r0
 800806a:	dc67      	bgt.n	800813c <_dtoa_r+0x94c>
 800806c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800806e:	2b02      	cmp	r3, #2
 8008070:	dc41      	bgt.n	80080f6 <_dtoa_r+0x906>
 8008072:	e063      	b.n	800813c <_dtoa_r+0x94c>
 8008074:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008076:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800807a:	e746      	b.n	8007f0a <_dtoa_r+0x71a>
 800807c:	9b07      	ldr	r3, [sp, #28]
 800807e:	1e5c      	subs	r4, r3, #1
 8008080:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008082:	42a3      	cmp	r3, r4
 8008084:	bfbf      	itttt	lt
 8008086:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008088:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800808a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800808c:	1ae3      	sublt	r3, r4, r3
 800808e:	bfb4      	ite	lt
 8008090:	18d2      	addlt	r2, r2, r3
 8008092:	1b1c      	subge	r4, r3, r4
 8008094:	9b07      	ldr	r3, [sp, #28]
 8008096:	bfbc      	itt	lt
 8008098:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800809a:	2400      	movlt	r4, #0
 800809c:	2b00      	cmp	r3, #0
 800809e:	bfb5      	itete	lt
 80080a0:	eba8 0603 	sublt.w	r6, r8, r3
 80080a4:	9b07      	ldrge	r3, [sp, #28]
 80080a6:	2300      	movlt	r3, #0
 80080a8:	4646      	movge	r6, r8
 80080aa:	e730      	b.n	8007f0e <_dtoa_r+0x71e>
 80080ac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80080ae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80080b0:	4646      	mov	r6, r8
 80080b2:	e735      	b.n	8007f20 <_dtoa_r+0x730>
 80080b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80080b6:	e75c      	b.n	8007f72 <_dtoa_r+0x782>
 80080b8:	2300      	movs	r3, #0
 80080ba:	e788      	b.n	8007fce <_dtoa_r+0x7de>
 80080bc:	3fe00000 	.word	0x3fe00000
 80080c0:	40240000 	.word	0x40240000
 80080c4:	40140000 	.word	0x40140000
 80080c8:	9b02      	ldr	r3, [sp, #8]
 80080ca:	e780      	b.n	8007fce <_dtoa_r+0x7de>
 80080cc:	2300      	movs	r3, #0
 80080ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80080d0:	e782      	b.n	8007fd8 <_dtoa_r+0x7e8>
 80080d2:	d099      	beq.n	8008008 <_dtoa_r+0x818>
 80080d4:	9a08      	ldr	r2, [sp, #32]
 80080d6:	331c      	adds	r3, #28
 80080d8:	441a      	add	r2, r3
 80080da:	4498      	add	r8, r3
 80080dc:	441e      	add	r6, r3
 80080de:	9208      	str	r2, [sp, #32]
 80080e0:	e792      	b.n	8008008 <_dtoa_r+0x818>
 80080e2:	4603      	mov	r3, r0
 80080e4:	e7f6      	b.n	80080d4 <_dtoa_r+0x8e4>
 80080e6:	9b07      	ldr	r3, [sp, #28]
 80080e8:	9704      	str	r7, [sp, #16]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	dc20      	bgt.n	8008130 <_dtoa_r+0x940>
 80080ee:	9300      	str	r3, [sp, #0]
 80080f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080f2:	2b02      	cmp	r3, #2
 80080f4:	dd1e      	ble.n	8008134 <_dtoa_r+0x944>
 80080f6:	9b00      	ldr	r3, [sp, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	f47f aec0 	bne.w	8007e7e <_dtoa_r+0x68e>
 80080fe:	4621      	mov	r1, r4
 8008100:	2205      	movs	r2, #5
 8008102:	4658      	mov	r0, fp
 8008104:	f000 fa9a 	bl	800863c <__multadd>
 8008108:	4601      	mov	r1, r0
 800810a:	4604      	mov	r4, r0
 800810c:	4648      	mov	r0, r9
 800810e:	f000 fcad 	bl	8008a6c <__mcmp>
 8008112:	2800      	cmp	r0, #0
 8008114:	f77f aeb3 	ble.w	8007e7e <_dtoa_r+0x68e>
 8008118:	4656      	mov	r6, sl
 800811a:	2331      	movs	r3, #49	@ 0x31
 800811c:	f806 3b01 	strb.w	r3, [r6], #1
 8008120:	9b04      	ldr	r3, [sp, #16]
 8008122:	3301      	adds	r3, #1
 8008124:	9304      	str	r3, [sp, #16]
 8008126:	e6ae      	b.n	8007e86 <_dtoa_r+0x696>
 8008128:	9c07      	ldr	r4, [sp, #28]
 800812a:	9704      	str	r7, [sp, #16]
 800812c:	4625      	mov	r5, r4
 800812e:	e7f3      	b.n	8008118 <_dtoa_r+0x928>
 8008130:	9b07      	ldr	r3, [sp, #28]
 8008132:	9300      	str	r3, [sp, #0]
 8008134:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008136:	2b00      	cmp	r3, #0
 8008138:	f000 8104 	beq.w	8008344 <_dtoa_r+0xb54>
 800813c:	2e00      	cmp	r6, #0
 800813e:	dd05      	ble.n	800814c <_dtoa_r+0x95c>
 8008140:	4629      	mov	r1, r5
 8008142:	4632      	mov	r2, r6
 8008144:	4658      	mov	r0, fp
 8008146:	f000 fc25 	bl	8008994 <__lshift>
 800814a:	4605      	mov	r5, r0
 800814c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800814e:	2b00      	cmp	r3, #0
 8008150:	d05a      	beq.n	8008208 <_dtoa_r+0xa18>
 8008152:	6869      	ldr	r1, [r5, #4]
 8008154:	4658      	mov	r0, fp
 8008156:	f000 fa0f 	bl	8008578 <_Balloc>
 800815a:	4606      	mov	r6, r0
 800815c:	b928      	cbnz	r0, 800816a <_dtoa_r+0x97a>
 800815e:	4b84      	ldr	r3, [pc, #528]	@ (8008370 <_dtoa_r+0xb80>)
 8008160:	4602      	mov	r2, r0
 8008162:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008166:	f7ff bb5a 	b.w	800781e <_dtoa_r+0x2e>
 800816a:	692a      	ldr	r2, [r5, #16]
 800816c:	3202      	adds	r2, #2
 800816e:	0092      	lsls	r2, r2, #2
 8008170:	f105 010c 	add.w	r1, r5, #12
 8008174:	300c      	adds	r0, #12
 8008176:	f001 f975 	bl	8009464 <memcpy>
 800817a:	2201      	movs	r2, #1
 800817c:	4631      	mov	r1, r6
 800817e:	4658      	mov	r0, fp
 8008180:	f000 fc08 	bl	8008994 <__lshift>
 8008184:	f10a 0301 	add.w	r3, sl, #1
 8008188:	9307      	str	r3, [sp, #28]
 800818a:	9b00      	ldr	r3, [sp, #0]
 800818c:	4453      	add	r3, sl
 800818e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008190:	9b02      	ldr	r3, [sp, #8]
 8008192:	f003 0301 	and.w	r3, r3, #1
 8008196:	462f      	mov	r7, r5
 8008198:	930a      	str	r3, [sp, #40]	@ 0x28
 800819a:	4605      	mov	r5, r0
 800819c:	9b07      	ldr	r3, [sp, #28]
 800819e:	4621      	mov	r1, r4
 80081a0:	3b01      	subs	r3, #1
 80081a2:	4648      	mov	r0, r9
 80081a4:	9300      	str	r3, [sp, #0]
 80081a6:	f7ff fa98 	bl	80076da <quorem>
 80081aa:	4639      	mov	r1, r7
 80081ac:	9002      	str	r0, [sp, #8]
 80081ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80081b2:	4648      	mov	r0, r9
 80081b4:	f000 fc5a 	bl	8008a6c <__mcmp>
 80081b8:	462a      	mov	r2, r5
 80081ba:	9008      	str	r0, [sp, #32]
 80081bc:	4621      	mov	r1, r4
 80081be:	4658      	mov	r0, fp
 80081c0:	f000 fc70 	bl	8008aa4 <__mdiff>
 80081c4:	68c2      	ldr	r2, [r0, #12]
 80081c6:	4606      	mov	r6, r0
 80081c8:	bb02      	cbnz	r2, 800820c <_dtoa_r+0xa1c>
 80081ca:	4601      	mov	r1, r0
 80081cc:	4648      	mov	r0, r9
 80081ce:	f000 fc4d 	bl	8008a6c <__mcmp>
 80081d2:	4602      	mov	r2, r0
 80081d4:	4631      	mov	r1, r6
 80081d6:	4658      	mov	r0, fp
 80081d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80081da:	f000 fa0d 	bl	80085f8 <_Bfree>
 80081de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80081e2:	9e07      	ldr	r6, [sp, #28]
 80081e4:	ea43 0102 	orr.w	r1, r3, r2
 80081e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081ea:	4319      	orrs	r1, r3
 80081ec:	d110      	bne.n	8008210 <_dtoa_r+0xa20>
 80081ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80081f2:	d029      	beq.n	8008248 <_dtoa_r+0xa58>
 80081f4:	9b08      	ldr	r3, [sp, #32]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	dd02      	ble.n	8008200 <_dtoa_r+0xa10>
 80081fa:	9b02      	ldr	r3, [sp, #8]
 80081fc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008200:	9b00      	ldr	r3, [sp, #0]
 8008202:	f883 8000 	strb.w	r8, [r3]
 8008206:	e63f      	b.n	8007e88 <_dtoa_r+0x698>
 8008208:	4628      	mov	r0, r5
 800820a:	e7bb      	b.n	8008184 <_dtoa_r+0x994>
 800820c:	2201      	movs	r2, #1
 800820e:	e7e1      	b.n	80081d4 <_dtoa_r+0x9e4>
 8008210:	9b08      	ldr	r3, [sp, #32]
 8008212:	2b00      	cmp	r3, #0
 8008214:	db04      	blt.n	8008220 <_dtoa_r+0xa30>
 8008216:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008218:	430b      	orrs	r3, r1
 800821a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800821c:	430b      	orrs	r3, r1
 800821e:	d120      	bne.n	8008262 <_dtoa_r+0xa72>
 8008220:	2a00      	cmp	r2, #0
 8008222:	dded      	ble.n	8008200 <_dtoa_r+0xa10>
 8008224:	4649      	mov	r1, r9
 8008226:	2201      	movs	r2, #1
 8008228:	4658      	mov	r0, fp
 800822a:	f000 fbb3 	bl	8008994 <__lshift>
 800822e:	4621      	mov	r1, r4
 8008230:	4681      	mov	r9, r0
 8008232:	f000 fc1b 	bl	8008a6c <__mcmp>
 8008236:	2800      	cmp	r0, #0
 8008238:	dc03      	bgt.n	8008242 <_dtoa_r+0xa52>
 800823a:	d1e1      	bne.n	8008200 <_dtoa_r+0xa10>
 800823c:	f018 0f01 	tst.w	r8, #1
 8008240:	d0de      	beq.n	8008200 <_dtoa_r+0xa10>
 8008242:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008246:	d1d8      	bne.n	80081fa <_dtoa_r+0xa0a>
 8008248:	9a00      	ldr	r2, [sp, #0]
 800824a:	2339      	movs	r3, #57	@ 0x39
 800824c:	7013      	strb	r3, [r2, #0]
 800824e:	4633      	mov	r3, r6
 8008250:	461e      	mov	r6, r3
 8008252:	3b01      	subs	r3, #1
 8008254:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008258:	2a39      	cmp	r2, #57	@ 0x39
 800825a:	d052      	beq.n	8008302 <_dtoa_r+0xb12>
 800825c:	3201      	adds	r2, #1
 800825e:	701a      	strb	r2, [r3, #0]
 8008260:	e612      	b.n	8007e88 <_dtoa_r+0x698>
 8008262:	2a00      	cmp	r2, #0
 8008264:	dd07      	ble.n	8008276 <_dtoa_r+0xa86>
 8008266:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800826a:	d0ed      	beq.n	8008248 <_dtoa_r+0xa58>
 800826c:	9a00      	ldr	r2, [sp, #0]
 800826e:	f108 0301 	add.w	r3, r8, #1
 8008272:	7013      	strb	r3, [r2, #0]
 8008274:	e608      	b.n	8007e88 <_dtoa_r+0x698>
 8008276:	9b07      	ldr	r3, [sp, #28]
 8008278:	9a07      	ldr	r2, [sp, #28]
 800827a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800827e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008280:	4293      	cmp	r3, r2
 8008282:	d028      	beq.n	80082d6 <_dtoa_r+0xae6>
 8008284:	4649      	mov	r1, r9
 8008286:	2300      	movs	r3, #0
 8008288:	220a      	movs	r2, #10
 800828a:	4658      	mov	r0, fp
 800828c:	f000 f9d6 	bl	800863c <__multadd>
 8008290:	42af      	cmp	r7, r5
 8008292:	4681      	mov	r9, r0
 8008294:	f04f 0300 	mov.w	r3, #0
 8008298:	f04f 020a 	mov.w	r2, #10
 800829c:	4639      	mov	r1, r7
 800829e:	4658      	mov	r0, fp
 80082a0:	d107      	bne.n	80082b2 <_dtoa_r+0xac2>
 80082a2:	f000 f9cb 	bl	800863c <__multadd>
 80082a6:	4607      	mov	r7, r0
 80082a8:	4605      	mov	r5, r0
 80082aa:	9b07      	ldr	r3, [sp, #28]
 80082ac:	3301      	adds	r3, #1
 80082ae:	9307      	str	r3, [sp, #28]
 80082b0:	e774      	b.n	800819c <_dtoa_r+0x9ac>
 80082b2:	f000 f9c3 	bl	800863c <__multadd>
 80082b6:	4629      	mov	r1, r5
 80082b8:	4607      	mov	r7, r0
 80082ba:	2300      	movs	r3, #0
 80082bc:	220a      	movs	r2, #10
 80082be:	4658      	mov	r0, fp
 80082c0:	f000 f9bc 	bl	800863c <__multadd>
 80082c4:	4605      	mov	r5, r0
 80082c6:	e7f0      	b.n	80082aa <_dtoa_r+0xaba>
 80082c8:	9b00      	ldr	r3, [sp, #0]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	bfcc      	ite	gt
 80082ce:	461e      	movgt	r6, r3
 80082d0:	2601      	movle	r6, #1
 80082d2:	4456      	add	r6, sl
 80082d4:	2700      	movs	r7, #0
 80082d6:	4649      	mov	r1, r9
 80082d8:	2201      	movs	r2, #1
 80082da:	4658      	mov	r0, fp
 80082dc:	f000 fb5a 	bl	8008994 <__lshift>
 80082e0:	4621      	mov	r1, r4
 80082e2:	4681      	mov	r9, r0
 80082e4:	f000 fbc2 	bl	8008a6c <__mcmp>
 80082e8:	2800      	cmp	r0, #0
 80082ea:	dcb0      	bgt.n	800824e <_dtoa_r+0xa5e>
 80082ec:	d102      	bne.n	80082f4 <_dtoa_r+0xb04>
 80082ee:	f018 0f01 	tst.w	r8, #1
 80082f2:	d1ac      	bne.n	800824e <_dtoa_r+0xa5e>
 80082f4:	4633      	mov	r3, r6
 80082f6:	461e      	mov	r6, r3
 80082f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082fc:	2a30      	cmp	r2, #48	@ 0x30
 80082fe:	d0fa      	beq.n	80082f6 <_dtoa_r+0xb06>
 8008300:	e5c2      	b.n	8007e88 <_dtoa_r+0x698>
 8008302:	459a      	cmp	sl, r3
 8008304:	d1a4      	bne.n	8008250 <_dtoa_r+0xa60>
 8008306:	9b04      	ldr	r3, [sp, #16]
 8008308:	3301      	adds	r3, #1
 800830a:	9304      	str	r3, [sp, #16]
 800830c:	2331      	movs	r3, #49	@ 0x31
 800830e:	f88a 3000 	strb.w	r3, [sl]
 8008312:	e5b9      	b.n	8007e88 <_dtoa_r+0x698>
 8008314:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008316:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008374 <_dtoa_r+0xb84>
 800831a:	b11b      	cbz	r3, 8008324 <_dtoa_r+0xb34>
 800831c:	f10a 0308 	add.w	r3, sl, #8
 8008320:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008322:	6013      	str	r3, [r2, #0]
 8008324:	4650      	mov	r0, sl
 8008326:	b019      	add	sp, #100	@ 0x64
 8008328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800832c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800832e:	2b01      	cmp	r3, #1
 8008330:	f77f ae37 	ble.w	8007fa2 <_dtoa_r+0x7b2>
 8008334:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008336:	930a      	str	r3, [sp, #40]	@ 0x28
 8008338:	2001      	movs	r0, #1
 800833a:	e655      	b.n	8007fe8 <_dtoa_r+0x7f8>
 800833c:	9b00      	ldr	r3, [sp, #0]
 800833e:	2b00      	cmp	r3, #0
 8008340:	f77f aed6 	ble.w	80080f0 <_dtoa_r+0x900>
 8008344:	4656      	mov	r6, sl
 8008346:	4621      	mov	r1, r4
 8008348:	4648      	mov	r0, r9
 800834a:	f7ff f9c6 	bl	80076da <quorem>
 800834e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008352:	f806 8b01 	strb.w	r8, [r6], #1
 8008356:	9b00      	ldr	r3, [sp, #0]
 8008358:	eba6 020a 	sub.w	r2, r6, sl
 800835c:	4293      	cmp	r3, r2
 800835e:	ddb3      	ble.n	80082c8 <_dtoa_r+0xad8>
 8008360:	4649      	mov	r1, r9
 8008362:	2300      	movs	r3, #0
 8008364:	220a      	movs	r2, #10
 8008366:	4658      	mov	r0, fp
 8008368:	f000 f968 	bl	800863c <__multadd>
 800836c:	4681      	mov	r9, r0
 800836e:	e7ea      	b.n	8008346 <_dtoa_r+0xb56>
 8008370:	08009af9 	.word	0x08009af9
 8008374:	08009a7d 	.word	0x08009a7d

08008378 <_free_r>:
 8008378:	b538      	push	{r3, r4, r5, lr}
 800837a:	4605      	mov	r5, r0
 800837c:	2900      	cmp	r1, #0
 800837e:	d041      	beq.n	8008404 <_free_r+0x8c>
 8008380:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008384:	1f0c      	subs	r4, r1, #4
 8008386:	2b00      	cmp	r3, #0
 8008388:	bfb8      	it	lt
 800838a:	18e4      	addlt	r4, r4, r3
 800838c:	f000 f8e8 	bl	8008560 <__malloc_lock>
 8008390:	4a1d      	ldr	r2, [pc, #116]	@ (8008408 <_free_r+0x90>)
 8008392:	6813      	ldr	r3, [r2, #0]
 8008394:	b933      	cbnz	r3, 80083a4 <_free_r+0x2c>
 8008396:	6063      	str	r3, [r4, #4]
 8008398:	6014      	str	r4, [r2, #0]
 800839a:	4628      	mov	r0, r5
 800839c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083a0:	f000 b8e4 	b.w	800856c <__malloc_unlock>
 80083a4:	42a3      	cmp	r3, r4
 80083a6:	d908      	bls.n	80083ba <_free_r+0x42>
 80083a8:	6820      	ldr	r0, [r4, #0]
 80083aa:	1821      	adds	r1, r4, r0
 80083ac:	428b      	cmp	r3, r1
 80083ae:	bf01      	itttt	eq
 80083b0:	6819      	ldreq	r1, [r3, #0]
 80083b2:	685b      	ldreq	r3, [r3, #4]
 80083b4:	1809      	addeq	r1, r1, r0
 80083b6:	6021      	streq	r1, [r4, #0]
 80083b8:	e7ed      	b.n	8008396 <_free_r+0x1e>
 80083ba:	461a      	mov	r2, r3
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	b10b      	cbz	r3, 80083c4 <_free_r+0x4c>
 80083c0:	42a3      	cmp	r3, r4
 80083c2:	d9fa      	bls.n	80083ba <_free_r+0x42>
 80083c4:	6811      	ldr	r1, [r2, #0]
 80083c6:	1850      	adds	r0, r2, r1
 80083c8:	42a0      	cmp	r0, r4
 80083ca:	d10b      	bne.n	80083e4 <_free_r+0x6c>
 80083cc:	6820      	ldr	r0, [r4, #0]
 80083ce:	4401      	add	r1, r0
 80083d0:	1850      	adds	r0, r2, r1
 80083d2:	4283      	cmp	r3, r0
 80083d4:	6011      	str	r1, [r2, #0]
 80083d6:	d1e0      	bne.n	800839a <_free_r+0x22>
 80083d8:	6818      	ldr	r0, [r3, #0]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	6053      	str	r3, [r2, #4]
 80083de:	4408      	add	r0, r1
 80083e0:	6010      	str	r0, [r2, #0]
 80083e2:	e7da      	b.n	800839a <_free_r+0x22>
 80083e4:	d902      	bls.n	80083ec <_free_r+0x74>
 80083e6:	230c      	movs	r3, #12
 80083e8:	602b      	str	r3, [r5, #0]
 80083ea:	e7d6      	b.n	800839a <_free_r+0x22>
 80083ec:	6820      	ldr	r0, [r4, #0]
 80083ee:	1821      	adds	r1, r4, r0
 80083f0:	428b      	cmp	r3, r1
 80083f2:	bf04      	itt	eq
 80083f4:	6819      	ldreq	r1, [r3, #0]
 80083f6:	685b      	ldreq	r3, [r3, #4]
 80083f8:	6063      	str	r3, [r4, #4]
 80083fa:	bf04      	itt	eq
 80083fc:	1809      	addeq	r1, r1, r0
 80083fe:	6021      	streq	r1, [r4, #0]
 8008400:	6054      	str	r4, [r2, #4]
 8008402:	e7ca      	b.n	800839a <_free_r+0x22>
 8008404:	bd38      	pop	{r3, r4, r5, pc}
 8008406:	bf00      	nop
 8008408:	20000b78 	.word	0x20000b78

0800840c <malloc>:
 800840c:	4b02      	ldr	r3, [pc, #8]	@ (8008418 <malloc+0xc>)
 800840e:	4601      	mov	r1, r0
 8008410:	6818      	ldr	r0, [r3, #0]
 8008412:	f000 b825 	b.w	8008460 <_malloc_r>
 8008416:	bf00      	nop
 8008418:	2000001c 	.word	0x2000001c

0800841c <sbrk_aligned>:
 800841c:	b570      	push	{r4, r5, r6, lr}
 800841e:	4e0f      	ldr	r6, [pc, #60]	@ (800845c <sbrk_aligned+0x40>)
 8008420:	460c      	mov	r4, r1
 8008422:	6831      	ldr	r1, [r6, #0]
 8008424:	4605      	mov	r5, r0
 8008426:	b911      	cbnz	r1, 800842e <sbrk_aligned+0x12>
 8008428:	f001 f80c 	bl	8009444 <_sbrk_r>
 800842c:	6030      	str	r0, [r6, #0]
 800842e:	4621      	mov	r1, r4
 8008430:	4628      	mov	r0, r5
 8008432:	f001 f807 	bl	8009444 <_sbrk_r>
 8008436:	1c43      	adds	r3, r0, #1
 8008438:	d103      	bne.n	8008442 <sbrk_aligned+0x26>
 800843a:	f04f 34ff 	mov.w	r4, #4294967295
 800843e:	4620      	mov	r0, r4
 8008440:	bd70      	pop	{r4, r5, r6, pc}
 8008442:	1cc4      	adds	r4, r0, #3
 8008444:	f024 0403 	bic.w	r4, r4, #3
 8008448:	42a0      	cmp	r0, r4
 800844a:	d0f8      	beq.n	800843e <sbrk_aligned+0x22>
 800844c:	1a21      	subs	r1, r4, r0
 800844e:	4628      	mov	r0, r5
 8008450:	f000 fff8 	bl	8009444 <_sbrk_r>
 8008454:	3001      	adds	r0, #1
 8008456:	d1f2      	bne.n	800843e <sbrk_aligned+0x22>
 8008458:	e7ef      	b.n	800843a <sbrk_aligned+0x1e>
 800845a:	bf00      	nop
 800845c:	20000b74 	.word	0x20000b74

08008460 <_malloc_r>:
 8008460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008464:	1ccd      	adds	r5, r1, #3
 8008466:	f025 0503 	bic.w	r5, r5, #3
 800846a:	3508      	adds	r5, #8
 800846c:	2d0c      	cmp	r5, #12
 800846e:	bf38      	it	cc
 8008470:	250c      	movcc	r5, #12
 8008472:	2d00      	cmp	r5, #0
 8008474:	4606      	mov	r6, r0
 8008476:	db01      	blt.n	800847c <_malloc_r+0x1c>
 8008478:	42a9      	cmp	r1, r5
 800847a:	d904      	bls.n	8008486 <_malloc_r+0x26>
 800847c:	230c      	movs	r3, #12
 800847e:	6033      	str	r3, [r6, #0]
 8008480:	2000      	movs	r0, #0
 8008482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008486:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800855c <_malloc_r+0xfc>
 800848a:	f000 f869 	bl	8008560 <__malloc_lock>
 800848e:	f8d8 3000 	ldr.w	r3, [r8]
 8008492:	461c      	mov	r4, r3
 8008494:	bb44      	cbnz	r4, 80084e8 <_malloc_r+0x88>
 8008496:	4629      	mov	r1, r5
 8008498:	4630      	mov	r0, r6
 800849a:	f7ff ffbf 	bl	800841c <sbrk_aligned>
 800849e:	1c43      	adds	r3, r0, #1
 80084a0:	4604      	mov	r4, r0
 80084a2:	d158      	bne.n	8008556 <_malloc_r+0xf6>
 80084a4:	f8d8 4000 	ldr.w	r4, [r8]
 80084a8:	4627      	mov	r7, r4
 80084aa:	2f00      	cmp	r7, #0
 80084ac:	d143      	bne.n	8008536 <_malloc_r+0xd6>
 80084ae:	2c00      	cmp	r4, #0
 80084b0:	d04b      	beq.n	800854a <_malloc_r+0xea>
 80084b2:	6823      	ldr	r3, [r4, #0]
 80084b4:	4639      	mov	r1, r7
 80084b6:	4630      	mov	r0, r6
 80084b8:	eb04 0903 	add.w	r9, r4, r3
 80084bc:	f000 ffc2 	bl	8009444 <_sbrk_r>
 80084c0:	4581      	cmp	r9, r0
 80084c2:	d142      	bne.n	800854a <_malloc_r+0xea>
 80084c4:	6821      	ldr	r1, [r4, #0]
 80084c6:	1a6d      	subs	r5, r5, r1
 80084c8:	4629      	mov	r1, r5
 80084ca:	4630      	mov	r0, r6
 80084cc:	f7ff ffa6 	bl	800841c <sbrk_aligned>
 80084d0:	3001      	adds	r0, #1
 80084d2:	d03a      	beq.n	800854a <_malloc_r+0xea>
 80084d4:	6823      	ldr	r3, [r4, #0]
 80084d6:	442b      	add	r3, r5
 80084d8:	6023      	str	r3, [r4, #0]
 80084da:	f8d8 3000 	ldr.w	r3, [r8]
 80084de:	685a      	ldr	r2, [r3, #4]
 80084e0:	bb62      	cbnz	r2, 800853c <_malloc_r+0xdc>
 80084e2:	f8c8 7000 	str.w	r7, [r8]
 80084e6:	e00f      	b.n	8008508 <_malloc_r+0xa8>
 80084e8:	6822      	ldr	r2, [r4, #0]
 80084ea:	1b52      	subs	r2, r2, r5
 80084ec:	d420      	bmi.n	8008530 <_malloc_r+0xd0>
 80084ee:	2a0b      	cmp	r2, #11
 80084f0:	d917      	bls.n	8008522 <_malloc_r+0xc2>
 80084f2:	1961      	adds	r1, r4, r5
 80084f4:	42a3      	cmp	r3, r4
 80084f6:	6025      	str	r5, [r4, #0]
 80084f8:	bf18      	it	ne
 80084fa:	6059      	strne	r1, [r3, #4]
 80084fc:	6863      	ldr	r3, [r4, #4]
 80084fe:	bf08      	it	eq
 8008500:	f8c8 1000 	streq.w	r1, [r8]
 8008504:	5162      	str	r2, [r4, r5]
 8008506:	604b      	str	r3, [r1, #4]
 8008508:	4630      	mov	r0, r6
 800850a:	f000 f82f 	bl	800856c <__malloc_unlock>
 800850e:	f104 000b 	add.w	r0, r4, #11
 8008512:	1d23      	adds	r3, r4, #4
 8008514:	f020 0007 	bic.w	r0, r0, #7
 8008518:	1ac2      	subs	r2, r0, r3
 800851a:	bf1c      	itt	ne
 800851c:	1a1b      	subne	r3, r3, r0
 800851e:	50a3      	strne	r3, [r4, r2]
 8008520:	e7af      	b.n	8008482 <_malloc_r+0x22>
 8008522:	6862      	ldr	r2, [r4, #4]
 8008524:	42a3      	cmp	r3, r4
 8008526:	bf0c      	ite	eq
 8008528:	f8c8 2000 	streq.w	r2, [r8]
 800852c:	605a      	strne	r2, [r3, #4]
 800852e:	e7eb      	b.n	8008508 <_malloc_r+0xa8>
 8008530:	4623      	mov	r3, r4
 8008532:	6864      	ldr	r4, [r4, #4]
 8008534:	e7ae      	b.n	8008494 <_malloc_r+0x34>
 8008536:	463c      	mov	r4, r7
 8008538:	687f      	ldr	r7, [r7, #4]
 800853a:	e7b6      	b.n	80084aa <_malloc_r+0x4a>
 800853c:	461a      	mov	r2, r3
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	42a3      	cmp	r3, r4
 8008542:	d1fb      	bne.n	800853c <_malloc_r+0xdc>
 8008544:	2300      	movs	r3, #0
 8008546:	6053      	str	r3, [r2, #4]
 8008548:	e7de      	b.n	8008508 <_malloc_r+0xa8>
 800854a:	230c      	movs	r3, #12
 800854c:	6033      	str	r3, [r6, #0]
 800854e:	4630      	mov	r0, r6
 8008550:	f000 f80c 	bl	800856c <__malloc_unlock>
 8008554:	e794      	b.n	8008480 <_malloc_r+0x20>
 8008556:	6005      	str	r5, [r0, #0]
 8008558:	e7d6      	b.n	8008508 <_malloc_r+0xa8>
 800855a:	bf00      	nop
 800855c:	20000b78 	.word	0x20000b78

08008560 <__malloc_lock>:
 8008560:	4801      	ldr	r0, [pc, #4]	@ (8008568 <__malloc_lock+0x8>)
 8008562:	f7ff b8b8 	b.w	80076d6 <__retarget_lock_acquire_recursive>
 8008566:	bf00      	nop
 8008568:	20000b70 	.word	0x20000b70

0800856c <__malloc_unlock>:
 800856c:	4801      	ldr	r0, [pc, #4]	@ (8008574 <__malloc_unlock+0x8>)
 800856e:	f7ff b8b3 	b.w	80076d8 <__retarget_lock_release_recursive>
 8008572:	bf00      	nop
 8008574:	20000b70 	.word	0x20000b70

08008578 <_Balloc>:
 8008578:	b570      	push	{r4, r5, r6, lr}
 800857a:	69c6      	ldr	r6, [r0, #28]
 800857c:	4604      	mov	r4, r0
 800857e:	460d      	mov	r5, r1
 8008580:	b976      	cbnz	r6, 80085a0 <_Balloc+0x28>
 8008582:	2010      	movs	r0, #16
 8008584:	f7ff ff42 	bl	800840c <malloc>
 8008588:	4602      	mov	r2, r0
 800858a:	61e0      	str	r0, [r4, #28]
 800858c:	b920      	cbnz	r0, 8008598 <_Balloc+0x20>
 800858e:	4b18      	ldr	r3, [pc, #96]	@ (80085f0 <_Balloc+0x78>)
 8008590:	4818      	ldr	r0, [pc, #96]	@ (80085f4 <_Balloc+0x7c>)
 8008592:	216b      	movs	r1, #107	@ 0x6b
 8008594:	f000 ff74 	bl	8009480 <__assert_func>
 8008598:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800859c:	6006      	str	r6, [r0, #0]
 800859e:	60c6      	str	r6, [r0, #12]
 80085a0:	69e6      	ldr	r6, [r4, #28]
 80085a2:	68f3      	ldr	r3, [r6, #12]
 80085a4:	b183      	cbz	r3, 80085c8 <_Balloc+0x50>
 80085a6:	69e3      	ldr	r3, [r4, #28]
 80085a8:	68db      	ldr	r3, [r3, #12]
 80085aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80085ae:	b9b8      	cbnz	r0, 80085e0 <_Balloc+0x68>
 80085b0:	2101      	movs	r1, #1
 80085b2:	fa01 f605 	lsl.w	r6, r1, r5
 80085b6:	1d72      	adds	r2, r6, #5
 80085b8:	0092      	lsls	r2, r2, #2
 80085ba:	4620      	mov	r0, r4
 80085bc:	f000 ff7e 	bl	80094bc <_calloc_r>
 80085c0:	b160      	cbz	r0, 80085dc <_Balloc+0x64>
 80085c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80085c6:	e00e      	b.n	80085e6 <_Balloc+0x6e>
 80085c8:	2221      	movs	r2, #33	@ 0x21
 80085ca:	2104      	movs	r1, #4
 80085cc:	4620      	mov	r0, r4
 80085ce:	f000 ff75 	bl	80094bc <_calloc_r>
 80085d2:	69e3      	ldr	r3, [r4, #28]
 80085d4:	60f0      	str	r0, [r6, #12]
 80085d6:	68db      	ldr	r3, [r3, #12]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d1e4      	bne.n	80085a6 <_Balloc+0x2e>
 80085dc:	2000      	movs	r0, #0
 80085de:	bd70      	pop	{r4, r5, r6, pc}
 80085e0:	6802      	ldr	r2, [r0, #0]
 80085e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80085e6:	2300      	movs	r3, #0
 80085e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80085ec:	e7f7      	b.n	80085de <_Balloc+0x66>
 80085ee:	bf00      	nop
 80085f0:	08009a8a 	.word	0x08009a8a
 80085f4:	08009b0a 	.word	0x08009b0a

080085f8 <_Bfree>:
 80085f8:	b570      	push	{r4, r5, r6, lr}
 80085fa:	69c6      	ldr	r6, [r0, #28]
 80085fc:	4605      	mov	r5, r0
 80085fe:	460c      	mov	r4, r1
 8008600:	b976      	cbnz	r6, 8008620 <_Bfree+0x28>
 8008602:	2010      	movs	r0, #16
 8008604:	f7ff ff02 	bl	800840c <malloc>
 8008608:	4602      	mov	r2, r0
 800860a:	61e8      	str	r0, [r5, #28]
 800860c:	b920      	cbnz	r0, 8008618 <_Bfree+0x20>
 800860e:	4b09      	ldr	r3, [pc, #36]	@ (8008634 <_Bfree+0x3c>)
 8008610:	4809      	ldr	r0, [pc, #36]	@ (8008638 <_Bfree+0x40>)
 8008612:	218f      	movs	r1, #143	@ 0x8f
 8008614:	f000 ff34 	bl	8009480 <__assert_func>
 8008618:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800861c:	6006      	str	r6, [r0, #0]
 800861e:	60c6      	str	r6, [r0, #12]
 8008620:	b13c      	cbz	r4, 8008632 <_Bfree+0x3a>
 8008622:	69eb      	ldr	r3, [r5, #28]
 8008624:	6862      	ldr	r2, [r4, #4]
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800862c:	6021      	str	r1, [r4, #0]
 800862e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008632:	bd70      	pop	{r4, r5, r6, pc}
 8008634:	08009a8a 	.word	0x08009a8a
 8008638:	08009b0a 	.word	0x08009b0a

0800863c <__multadd>:
 800863c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008640:	690d      	ldr	r5, [r1, #16]
 8008642:	4607      	mov	r7, r0
 8008644:	460c      	mov	r4, r1
 8008646:	461e      	mov	r6, r3
 8008648:	f101 0c14 	add.w	ip, r1, #20
 800864c:	2000      	movs	r0, #0
 800864e:	f8dc 3000 	ldr.w	r3, [ip]
 8008652:	b299      	uxth	r1, r3
 8008654:	fb02 6101 	mla	r1, r2, r1, r6
 8008658:	0c1e      	lsrs	r6, r3, #16
 800865a:	0c0b      	lsrs	r3, r1, #16
 800865c:	fb02 3306 	mla	r3, r2, r6, r3
 8008660:	b289      	uxth	r1, r1
 8008662:	3001      	adds	r0, #1
 8008664:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008668:	4285      	cmp	r5, r0
 800866a:	f84c 1b04 	str.w	r1, [ip], #4
 800866e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008672:	dcec      	bgt.n	800864e <__multadd+0x12>
 8008674:	b30e      	cbz	r6, 80086ba <__multadd+0x7e>
 8008676:	68a3      	ldr	r3, [r4, #8]
 8008678:	42ab      	cmp	r3, r5
 800867a:	dc19      	bgt.n	80086b0 <__multadd+0x74>
 800867c:	6861      	ldr	r1, [r4, #4]
 800867e:	4638      	mov	r0, r7
 8008680:	3101      	adds	r1, #1
 8008682:	f7ff ff79 	bl	8008578 <_Balloc>
 8008686:	4680      	mov	r8, r0
 8008688:	b928      	cbnz	r0, 8008696 <__multadd+0x5a>
 800868a:	4602      	mov	r2, r0
 800868c:	4b0c      	ldr	r3, [pc, #48]	@ (80086c0 <__multadd+0x84>)
 800868e:	480d      	ldr	r0, [pc, #52]	@ (80086c4 <__multadd+0x88>)
 8008690:	21ba      	movs	r1, #186	@ 0xba
 8008692:	f000 fef5 	bl	8009480 <__assert_func>
 8008696:	6922      	ldr	r2, [r4, #16]
 8008698:	3202      	adds	r2, #2
 800869a:	f104 010c 	add.w	r1, r4, #12
 800869e:	0092      	lsls	r2, r2, #2
 80086a0:	300c      	adds	r0, #12
 80086a2:	f000 fedf 	bl	8009464 <memcpy>
 80086a6:	4621      	mov	r1, r4
 80086a8:	4638      	mov	r0, r7
 80086aa:	f7ff ffa5 	bl	80085f8 <_Bfree>
 80086ae:	4644      	mov	r4, r8
 80086b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80086b4:	3501      	adds	r5, #1
 80086b6:	615e      	str	r6, [r3, #20]
 80086b8:	6125      	str	r5, [r4, #16]
 80086ba:	4620      	mov	r0, r4
 80086bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086c0:	08009af9 	.word	0x08009af9
 80086c4:	08009b0a 	.word	0x08009b0a

080086c8 <__hi0bits>:
 80086c8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80086cc:	4603      	mov	r3, r0
 80086ce:	bf36      	itet	cc
 80086d0:	0403      	lslcc	r3, r0, #16
 80086d2:	2000      	movcs	r0, #0
 80086d4:	2010      	movcc	r0, #16
 80086d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80086da:	bf3c      	itt	cc
 80086dc:	021b      	lslcc	r3, r3, #8
 80086de:	3008      	addcc	r0, #8
 80086e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086e4:	bf3c      	itt	cc
 80086e6:	011b      	lslcc	r3, r3, #4
 80086e8:	3004      	addcc	r0, #4
 80086ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086ee:	bf3c      	itt	cc
 80086f0:	009b      	lslcc	r3, r3, #2
 80086f2:	3002      	addcc	r0, #2
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	db05      	blt.n	8008704 <__hi0bits+0x3c>
 80086f8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80086fc:	f100 0001 	add.w	r0, r0, #1
 8008700:	bf08      	it	eq
 8008702:	2020      	moveq	r0, #32
 8008704:	4770      	bx	lr

08008706 <__lo0bits>:
 8008706:	6803      	ldr	r3, [r0, #0]
 8008708:	4602      	mov	r2, r0
 800870a:	f013 0007 	ands.w	r0, r3, #7
 800870e:	d00b      	beq.n	8008728 <__lo0bits+0x22>
 8008710:	07d9      	lsls	r1, r3, #31
 8008712:	d421      	bmi.n	8008758 <__lo0bits+0x52>
 8008714:	0798      	lsls	r0, r3, #30
 8008716:	bf49      	itett	mi
 8008718:	085b      	lsrmi	r3, r3, #1
 800871a:	089b      	lsrpl	r3, r3, #2
 800871c:	2001      	movmi	r0, #1
 800871e:	6013      	strmi	r3, [r2, #0]
 8008720:	bf5c      	itt	pl
 8008722:	6013      	strpl	r3, [r2, #0]
 8008724:	2002      	movpl	r0, #2
 8008726:	4770      	bx	lr
 8008728:	b299      	uxth	r1, r3
 800872a:	b909      	cbnz	r1, 8008730 <__lo0bits+0x2a>
 800872c:	0c1b      	lsrs	r3, r3, #16
 800872e:	2010      	movs	r0, #16
 8008730:	b2d9      	uxtb	r1, r3
 8008732:	b909      	cbnz	r1, 8008738 <__lo0bits+0x32>
 8008734:	3008      	adds	r0, #8
 8008736:	0a1b      	lsrs	r3, r3, #8
 8008738:	0719      	lsls	r1, r3, #28
 800873a:	bf04      	itt	eq
 800873c:	091b      	lsreq	r3, r3, #4
 800873e:	3004      	addeq	r0, #4
 8008740:	0799      	lsls	r1, r3, #30
 8008742:	bf04      	itt	eq
 8008744:	089b      	lsreq	r3, r3, #2
 8008746:	3002      	addeq	r0, #2
 8008748:	07d9      	lsls	r1, r3, #31
 800874a:	d403      	bmi.n	8008754 <__lo0bits+0x4e>
 800874c:	085b      	lsrs	r3, r3, #1
 800874e:	f100 0001 	add.w	r0, r0, #1
 8008752:	d003      	beq.n	800875c <__lo0bits+0x56>
 8008754:	6013      	str	r3, [r2, #0]
 8008756:	4770      	bx	lr
 8008758:	2000      	movs	r0, #0
 800875a:	4770      	bx	lr
 800875c:	2020      	movs	r0, #32
 800875e:	4770      	bx	lr

08008760 <__i2b>:
 8008760:	b510      	push	{r4, lr}
 8008762:	460c      	mov	r4, r1
 8008764:	2101      	movs	r1, #1
 8008766:	f7ff ff07 	bl	8008578 <_Balloc>
 800876a:	4602      	mov	r2, r0
 800876c:	b928      	cbnz	r0, 800877a <__i2b+0x1a>
 800876e:	4b05      	ldr	r3, [pc, #20]	@ (8008784 <__i2b+0x24>)
 8008770:	4805      	ldr	r0, [pc, #20]	@ (8008788 <__i2b+0x28>)
 8008772:	f240 1145 	movw	r1, #325	@ 0x145
 8008776:	f000 fe83 	bl	8009480 <__assert_func>
 800877a:	2301      	movs	r3, #1
 800877c:	6144      	str	r4, [r0, #20]
 800877e:	6103      	str	r3, [r0, #16]
 8008780:	bd10      	pop	{r4, pc}
 8008782:	bf00      	nop
 8008784:	08009af9 	.word	0x08009af9
 8008788:	08009b0a 	.word	0x08009b0a

0800878c <__multiply>:
 800878c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008790:	4614      	mov	r4, r2
 8008792:	690a      	ldr	r2, [r1, #16]
 8008794:	6923      	ldr	r3, [r4, #16]
 8008796:	429a      	cmp	r2, r3
 8008798:	bfa8      	it	ge
 800879a:	4623      	movge	r3, r4
 800879c:	460f      	mov	r7, r1
 800879e:	bfa4      	itt	ge
 80087a0:	460c      	movge	r4, r1
 80087a2:	461f      	movge	r7, r3
 80087a4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80087a8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80087ac:	68a3      	ldr	r3, [r4, #8]
 80087ae:	6861      	ldr	r1, [r4, #4]
 80087b0:	eb0a 0609 	add.w	r6, sl, r9
 80087b4:	42b3      	cmp	r3, r6
 80087b6:	b085      	sub	sp, #20
 80087b8:	bfb8      	it	lt
 80087ba:	3101      	addlt	r1, #1
 80087bc:	f7ff fedc 	bl	8008578 <_Balloc>
 80087c0:	b930      	cbnz	r0, 80087d0 <__multiply+0x44>
 80087c2:	4602      	mov	r2, r0
 80087c4:	4b44      	ldr	r3, [pc, #272]	@ (80088d8 <__multiply+0x14c>)
 80087c6:	4845      	ldr	r0, [pc, #276]	@ (80088dc <__multiply+0x150>)
 80087c8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80087cc:	f000 fe58 	bl	8009480 <__assert_func>
 80087d0:	f100 0514 	add.w	r5, r0, #20
 80087d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80087d8:	462b      	mov	r3, r5
 80087da:	2200      	movs	r2, #0
 80087dc:	4543      	cmp	r3, r8
 80087de:	d321      	bcc.n	8008824 <__multiply+0x98>
 80087e0:	f107 0114 	add.w	r1, r7, #20
 80087e4:	f104 0214 	add.w	r2, r4, #20
 80087e8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80087ec:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80087f0:	9302      	str	r3, [sp, #8]
 80087f2:	1b13      	subs	r3, r2, r4
 80087f4:	3b15      	subs	r3, #21
 80087f6:	f023 0303 	bic.w	r3, r3, #3
 80087fa:	3304      	adds	r3, #4
 80087fc:	f104 0715 	add.w	r7, r4, #21
 8008800:	42ba      	cmp	r2, r7
 8008802:	bf38      	it	cc
 8008804:	2304      	movcc	r3, #4
 8008806:	9301      	str	r3, [sp, #4]
 8008808:	9b02      	ldr	r3, [sp, #8]
 800880a:	9103      	str	r1, [sp, #12]
 800880c:	428b      	cmp	r3, r1
 800880e:	d80c      	bhi.n	800882a <__multiply+0x9e>
 8008810:	2e00      	cmp	r6, #0
 8008812:	dd03      	ble.n	800881c <__multiply+0x90>
 8008814:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008818:	2b00      	cmp	r3, #0
 800881a:	d05b      	beq.n	80088d4 <__multiply+0x148>
 800881c:	6106      	str	r6, [r0, #16]
 800881e:	b005      	add	sp, #20
 8008820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008824:	f843 2b04 	str.w	r2, [r3], #4
 8008828:	e7d8      	b.n	80087dc <__multiply+0x50>
 800882a:	f8b1 a000 	ldrh.w	sl, [r1]
 800882e:	f1ba 0f00 	cmp.w	sl, #0
 8008832:	d024      	beq.n	800887e <__multiply+0xf2>
 8008834:	f104 0e14 	add.w	lr, r4, #20
 8008838:	46a9      	mov	r9, r5
 800883a:	f04f 0c00 	mov.w	ip, #0
 800883e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008842:	f8d9 3000 	ldr.w	r3, [r9]
 8008846:	fa1f fb87 	uxth.w	fp, r7
 800884a:	b29b      	uxth	r3, r3
 800884c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008850:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008854:	f8d9 7000 	ldr.w	r7, [r9]
 8008858:	4463      	add	r3, ip
 800885a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800885e:	fb0a c70b 	mla	r7, sl, fp, ip
 8008862:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008866:	b29b      	uxth	r3, r3
 8008868:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800886c:	4572      	cmp	r2, lr
 800886e:	f849 3b04 	str.w	r3, [r9], #4
 8008872:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008876:	d8e2      	bhi.n	800883e <__multiply+0xb2>
 8008878:	9b01      	ldr	r3, [sp, #4]
 800887a:	f845 c003 	str.w	ip, [r5, r3]
 800887e:	9b03      	ldr	r3, [sp, #12]
 8008880:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008884:	3104      	adds	r1, #4
 8008886:	f1b9 0f00 	cmp.w	r9, #0
 800888a:	d021      	beq.n	80088d0 <__multiply+0x144>
 800888c:	682b      	ldr	r3, [r5, #0]
 800888e:	f104 0c14 	add.w	ip, r4, #20
 8008892:	46ae      	mov	lr, r5
 8008894:	f04f 0a00 	mov.w	sl, #0
 8008898:	f8bc b000 	ldrh.w	fp, [ip]
 800889c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80088a0:	fb09 770b 	mla	r7, r9, fp, r7
 80088a4:	4457      	add	r7, sl
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80088ac:	f84e 3b04 	str.w	r3, [lr], #4
 80088b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80088b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80088b8:	f8be 3000 	ldrh.w	r3, [lr]
 80088bc:	fb09 330a 	mla	r3, r9, sl, r3
 80088c0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80088c4:	4562      	cmp	r2, ip
 80088c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80088ca:	d8e5      	bhi.n	8008898 <__multiply+0x10c>
 80088cc:	9f01      	ldr	r7, [sp, #4]
 80088ce:	51eb      	str	r3, [r5, r7]
 80088d0:	3504      	adds	r5, #4
 80088d2:	e799      	b.n	8008808 <__multiply+0x7c>
 80088d4:	3e01      	subs	r6, #1
 80088d6:	e79b      	b.n	8008810 <__multiply+0x84>
 80088d8:	08009af9 	.word	0x08009af9
 80088dc:	08009b0a 	.word	0x08009b0a

080088e0 <__pow5mult>:
 80088e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088e4:	4615      	mov	r5, r2
 80088e6:	f012 0203 	ands.w	r2, r2, #3
 80088ea:	4607      	mov	r7, r0
 80088ec:	460e      	mov	r6, r1
 80088ee:	d007      	beq.n	8008900 <__pow5mult+0x20>
 80088f0:	4c25      	ldr	r4, [pc, #148]	@ (8008988 <__pow5mult+0xa8>)
 80088f2:	3a01      	subs	r2, #1
 80088f4:	2300      	movs	r3, #0
 80088f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80088fa:	f7ff fe9f 	bl	800863c <__multadd>
 80088fe:	4606      	mov	r6, r0
 8008900:	10ad      	asrs	r5, r5, #2
 8008902:	d03d      	beq.n	8008980 <__pow5mult+0xa0>
 8008904:	69fc      	ldr	r4, [r7, #28]
 8008906:	b97c      	cbnz	r4, 8008928 <__pow5mult+0x48>
 8008908:	2010      	movs	r0, #16
 800890a:	f7ff fd7f 	bl	800840c <malloc>
 800890e:	4602      	mov	r2, r0
 8008910:	61f8      	str	r0, [r7, #28]
 8008912:	b928      	cbnz	r0, 8008920 <__pow5mult+0x40>
 8008914:	4b1d      	ldr	r3, [pc, #116]	@ (800898c <__pow5mult+0xac>)
 8008916:	481e      	ldr	r0, [pc, #120]	@ (8008990 <__pow5mult+0xb0>)
 8008918:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800891c:	f000 fdb0 	bl	8009480 <__assert_func>
 8008920:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008924:	6004      	str	r4, [r0, #0]
 8008926:	60c4      	str	r4, [r0, #12]
 8008928:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800892c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008930:	b94c      	cbnz	r4, 8008946 <__pow5mult+0x66>
 8008932:	f240 2171 	movw	r1, #625	@ 0x271
 8008936:	4638      	mov	r0, r7
 8008938:	f7ff ff12 	bl	8008760 <__i2b>
 800893c:	2300      	movs	r3, #0
 800893e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008942:	4604      	mov	r4, r0
 8008944:	6003      	str	r3, [r0, #0]
 8008946:	f04f 0900 	mov.w	r9, #0
 800894a:	07eb      	lsls	r3, r5, #31
 800894c:	d50a      	bpl.n	8008964 <__pow5mult+0x84>
 800894e:	4631      	mov	r1, r6
 8008950:	4622      	mov	r2, r4
 8008952:	4638      	mov	r0, r7
 8008954:	f7ff ff1a 	bl	800878c <__multiply>
 8008958:	4631      	mov	r1, r6
 800895a:	4680      	mov	r8, r0
 800895c:	4638      	mov	r0, r7
 800895e:	f7ff fe4b 	bl	80085f8 <_Bfree>
 8008962:	4646      	mov	r6, r8
 8008964:	106d      	asrs	r5, r5, #1
 8008966:	d00b      	beq.n	8008980 <__pow5mult+0xa0>
 8008968:	6820      	ldr	r0, [r4, #0]
 800896a:	b938      	cbnz	r0, 800897c <__pow5mult+0x9c>
 800896c:	4622      	mov	r2, r4
 800896e:	4621      	mov	r1, r4
 8008970:	4638      	mov	r0, r7
 8008972:	f7ff ff0b 	bl	800878c <__multiply>
 8008976:	6020      	str	r0, [r4, #0]
 8008978:	f8c0 9000 	str.w	r9, [r0]
 800897c:	4604      	mov	r4, r0
 800897e:	e7e4      	b.n	800894a <__pow5mult+0x6a>
 8008980:	4630      	mov	r0, r6
 8008982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008986:	bf00      	nop
 8008988:	08009b64 	.word	0x08009b64
 800898c:	08009a8a 	.word	0x08009a8a
 8008990:	08009b0a 	.word	0x08009b0a

08008994 <__lshift>:
 8008994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008998:	460c      	mov	r4, r1
 800899a:	6849      	ldr	r1, [r1, #4]
 800899c:	6923      	ldr	r3, [r4, #16]
 800899e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80089a2:	68a3      	ldr	r3, [r4, #8]
 80089a4:	4607      	mov	r7, r0
 80089a6:	4691      	mov	r9, r2
 80089a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80089ac:	f108 0601 	add.w	r6, r8, #1
 80089b0:	42b3      	cmp	r3, r6
 80089b2:	db0b      	blt.n	80089cc <__lshift+0x38>
 80089b4:	4638      	mov	r0, r7
 80089b6:	f7ff fddf 	bl	8008578 <_Balloc>
 80089ba:	4605      	mov	r5, r0
 80089bc:	b948      	cbnz	r0, 80089d2 <__lshift+0x3e>
 80089be:	4602      	mov	r2, r0
 80089c0:	4b28      	ldr	r3, [pc, #160]	@ (8008a64 <__lshift+0xd0>)
 80089c2:	4829      	ldr	r0, [pc, #164]	@ (8008a68 <__lshift+0xd4>)
 80089c4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80089c8:	f000 fd5a 	bl	8009480 <__assert_func>
 80089cc:	3101      	adds	r1, #1
 80089ce:	005b      	lsls	r3, r3, #1
 80089d0:	e7ee      	b.n	80089b0 <__lshift+0x1c>
 80089d2:	2300      	movs	r3, #0
 80089d4:	f100 0114 	add.w	r1, r0, #20
 80089d8:	f100 0210 	add.w	r2, r0, #16
 80089dc:	4618      	mov	r0, r3
 80089de:	4553      	cmp	r3, sl
 80089e0:	db33      	blt.n	8008a4a <__lshift+0xb6>
 80089e2:	6920      	ldr	r0, [r4, #16]
 80089e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80089e8:	f104 0314 	add.w	r3, r4, #20
 80089ec:	f019 091f 	ands.w	r9, r9, #31
 80089f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80089f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80089f8:	d02b      	beq.n	8008a52 <__lshift+0xbe>
 80089fa:	f1c9 0e20 	rsb	lr, r9, #32
 80089fe:	468a      	mov	sl, r1
 8008a00:	2200      	movs	r2, #0
 8008a02:	6818      	ldr	r0, [r3, #0]
 8008a04:	fa00 f009 	lsl.w	r0, r0, r9
 8008a08:	4310      	orrs	r0, r2
 8008a0a:	f84a 0b04 	str.w	r0, [sl], #4
 8008a0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a12:	459c      	cmp	ip, r3
 8008a14:	fa22 f20e 	lsr.w	r2, r2, lr
 8008a18:	d8f3      	bhi.n	8008a02 <__lshift+0x6e>
 8008a1a:	ebac 0304 	sub.w	r3, ip, r4
 8008a1e:	3b15      	subs	r3, #21
 8008a20:	f023 0303 	bic.w	r3, r3, #3
 8008a24:	3304      	adds	r3, #4
 8008a26:	f104 0015 	add.w	r0, r4, #21
 8008a2a:	4584      	cmp	ip, r0
 8008a2c:	bf38      	it	cc
 8008a2e:	2304      	movcc	r3, #4
 8008a30:	50ca      	str	r2, [r1, r3]
 8008a32:	b10a      	cbz	r2, 8008a38 <__lshift+0xa4>
 8008a34:	f108 0602 	add.w	r6, r8, #2
 8008a38:	3e01      	subs	r6, #1
 8008a3a:	4638      	mov	r0, r7
 8008a3c:	612e      	str	r6, [r5, #16]
 8008a3e:	4621      	mov	r1, r4
 8008a40:	f7ff fdda 	bl	80085f8 <_Bfree>
 8008a44:	4628      	mov	r0, r5
 8008a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a4a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a4e:	3301      	adds	r3, #1
 8008a50:	e7c5      	b.n	80089de <__lshift+0x4a>
 8008a52:	3904      	subs	r1, #4
 8008a54:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a58:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a5c:	459c      	cmp	ip, r3
 8008a5e:	d8f9      	bhi.n	8008a54 <__lshift+0xc0>
 8008a60:	e7ea      	b.n	8008a38 <__lshift+0xa4>
 8008a62:	bf00      	nop
 8008a64:	08009af9 	.word	0x08009af9
 8008a68:	08009b0a 	.word	0x08009b0a

08008a6c <__mcmp>:
 8008a6c:	690a      	ldr	r2, [r1, #16]
 8008a6e:	4603      	mov	r3, r0
 8008a70:	6900      	ldr	r0, [r0, #16]
 8008a72:	1a80      	subs	r0, r0, r2
 8008a74:	b530      	push	{r4, r5, lr}
 8008a76:	d10e      	bne.n	8008a96 <__mcmp+0x2a>
 8008a78:	3314      	adds	r3, #20
 8008a7a:	3114      	adds	r1, #20
 8008a7c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008a80:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008a84:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008a88:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008a8c:	4295      	cmp	r5, r2
 8008a8e:	d003      	beq.n	8008a98 <__mcmp+0x2c>
 8008a90:	d205      	bcs.n	8008a9e <__mcmp+0x32>
 8008a92:	f04f 30ff 	mov.w	r0, #4294967295
 8008a96:	bd30      	pop	{r4, r5, pc}
 8008a98:	42a3      	cmp	r3, r4
 8008a9a:	d3f3      	bcc.n	8008a84 <__mcmp+0x18>
 8008a9c:	e7fb      	b.n	8008a96 <__mcmp+0x2a>
 8008a9e:	2001      	movs	r0, #1
 8008aa0:	e7f9      	b.n	8008a96 <__mcmp+0x2a>
	...

08008aa4 <__mdiff>:
 8008aa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aa8:	4689      	mov	r9, r1
 8008aaa:	4606      	mov	r6, r0
 8008aac:	4611      	mov	r1, r2
 8008aae:	4648      	mov	r0, r9
 8008ab0:	4614      	mov	r4, r2
 8008ab2:	f7ff ffdb 	bl	8008a6c <__mcmp>
 8008ab6:	1e05      	subs	r5, r0, #0
 8008ab8:	d112      	bne.n	8008ae0 <__mdiff+0x3c>
 8008aba:	4629      	mov	r1, r5
 8008abc:	4630      	mov	r0, r6
 8008abe:	f7ff fd5b 	bl	8008578 <_Balloc>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	b928      	cbnz	r0, 8008ad2 <__mdiff+0x2e>
 8008ac6:	4b3f      	ldr	r3, [pc, #252]	@ (8008bc4 <__mdiff+0x120>)
 8008ac8:	f240 2137 	movw	r1, #567	@ 0x237
 8008acc:	483e      	ldr	r0, [pc, #248]	@ (8008bc8 <__mdiff+0x124>)
 8008ace:	f000 fcd7 	bl	8009480 <__assert_func>
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ad8:	4610      	mov	r0, r2
 8008ada:	b003      	add	sp, #12
 8008adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ae0:	bfbc      	itt	lt
 8008ae2:	464b      	movlt	r3, r9
 8008ae4:	46a1      	movlt	r9, r4
 8008ae6:	4630      	mov	r0, r6
 8008ae8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008aec:	bfba      	itte	lt
 8008aee:	461c      	movlt	r4, r3
 8008af0:	2501      	movlt	r5, #1
 8008af2:	2500      	movge	r5, #0
 8008af4:	f7ff fd40 	bl	8008578 <_Balloc>
 8008af8:	4602      	mov	r2, r0
 8008afa:	b918      	cbnz	r0, 8008b04 <__mdiff+0x60>
 8008afc:	4b31      	ldr	r3, [pc, #196]	@ (8008bc4 <__mdiff+0x120>)
 8008afe:	f240 2145 	movw	r1, #581	@ 0x245
 8008b02:	e7e3      	b.n	8008acc <__mdiff+0x28>
 8008b04:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008b08:	6926      	ldr	r6, [r4, #16]
 8008b0a:	60c5      	str	r5, [r0, #12]
 8008b0c:	f109 0310 	add.w	r3, r9, #16
 8008b10:	f109 0514 	add.w	r5, r9, #20
 8008b14:	f104 0e14 	add.w	lr, r4, #20
 8008b18:	f100 0b14 	add.w	fp, r0, #20
 8008b1c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008b20:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008b24:	9301      	str	r3, [sp, #4]
 8008b26:	46d9      	mov	r9, fp
 8008b28:	f04f 0c00 	mov.w	ip, #0
 8008b2c:	9b01      	ldr	r3, [sp, #4]
 8008b2e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008b32:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008b36:	9301      	str	r3, [sp, #4]
 8008b38:	fa1f f38a 	uxth.w	r3, sl
 8008b3c:	4619      	mov	r1, r3
 8008b3e:	b283      	uxth	r3, r0
 8008b40:	1acb      	subs	r3, r1, r3
 8008b42:	0c00      	lsrs	r0, r0, #16
 8008b44:	4463      	add	r3, ip
 8008b46:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008b4a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008b54:	4576      	cmp	r6, lr
 8008b56:	f849 3b04 	str.w	r3, [r9], #4
 8008b5a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b5e:	d8e5      	bhi.n	8008b2c <__mdiff+0x88>
 8008b60:	1b33      	subs	r3, r6, r4
 8008b62:	3b15      	subs	r3, #21
 8008b64:	f023 0303 	bic.w	r3, r3, #3
 8008b68:	3415      	adds	r4, #21
 8008b6a:	3304      	adds	r3, #4
 8008b6c:	42a6      	cmp	r6, r4
 8008b6e:	bf38      	it	cc
 8008b70:	2304      	movcc	r3, #4
 8008b72:	441d      	add	r5, r3
 8008b74:	445b      	add	r3, fp
 8008b76:	461e      	mov	r6, r3
 8008b78:	462c      	mov	r4, r5
 8008b7a:	4544      	cmp	r4, r8
 8008b7c:	d30e      	bcc.n	8008b9c <__mdiff+0xf8>
 8008b7e:	f108 0103 	add.w	r1, r8, #3
 8008b82:	1b49      	subs	r1, r1, r5
 8008b84:	f021 0103 	bic.w	r1, r1, #3
 8008b88:	3d03      	subs	r5, #3
 8008b8a:	45a8      	cmp	r8, r5
 8008b8c:	bf38      	it	cc
 8008b8e:	2100      	movcc	r1, #0
 8008b90:	440b      	add	r3, r1
 8008b92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008b96:	b191      	cbz	r1, 8008bbe <__mdiff+0x11a>
 8008b98:	6117      	str	r7, [r2, #16]
 8008b9a:	e79d      	b.n	8008ad8 <__mdiff+0x34>
 8008b9c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008ba0:	46e6      	mov	lr, ip
 8008ba2:	0c08      	lsrs	r0, r1, #16
 8008ba4:	fa1c fc81 	uxtah	ip, ip, r1
 8008ba8:	4471      	add	r1, lr
 8008baa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008bae:	b289      	uxth	r1, r1
 8008bb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008bb4:	f846 1b04 	str.w	r1, [r6], #4
 8008bb8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008bbc:	e7dd      	b.n	8008b7a <__mdiff+0xd6>
 8008bbe:	3f01      	subs	r7, #1
 8008bc0:	e7e7      	b.n	8008b92 <__mdiff+0xee>
 8008bc2:	bf00      	nop
 8008bc4:	08009af9 	.word	0x08009af9
 8008bc8:	08009b0a 	.word	0x08009b0a

08008bcc <__d2b>:
 8008bcc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008bd0:	460f      	mov	r7, r1
 8008bd2:	2101      	movs	r1, #1
 8008bd4:	ec59 8b10 	vmov	r8, r9, d0
 8008bd8:	4616      	mov	r6, r2
 8008bda:	f7ff fccd 	bl	8008578 <_Balloc>
 8008bde:	4604      	mov	r4, r0
 8008be0:	b930      	cbnz	r0, 8008bf0 <__d2b+0x24>
 8008be2:	4602      	mov	r2, r0
 8008be4:	4b23      	ldr	r3, [pc, #140]	@ (8008c74 <__d2b+0xa8>)
 8008be6:	4824      	ldr	r0, [pc, #144]	@ (8008c78 <__d2b+0xac>)
 8008be8:	f240 310f 	movw	r1, #783	@ 0x30f
 8008bec:	f000 fc48 	bl	8009480 <__assert_func>
 8008bf0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008bf4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008bf8:	b10d      	cbz	r5, 8008bfe <__d2b+0x32>
 8008bfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008bfe:	9301      	str	r3, [sp, #4]
 8008c00:	f1b8 0300 	subs.w	r3, r8, #0
 8008c04:	d023      	beq.n	8008c4e <__d2b+0x82>
 8008c06:	4668      	mov	r0, sp
 8008c08:	9300      	str	r3, [sp, #0]
 8008c0a:	f7ff fd7c 	bl	8008706 <__lo0bits>
 8008c0e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008c12:	b1d0      	cbz	r0, 8008c4a <__d2b+0x7e>
 8008c14:	f1c0 0320 	rsb	r3, r0, #32
 8008c18:	fa02 f303 	lsl.w	r3, r2, r3
 8008c1c:	430b      	orrs	r3, r1
 8008c1e:	40c2      	lsrs	r2, r0
 8008c20:	6163      	str	r3, [r4, #20]
 8008c22:	9201      	str	r2, [sp, #4]
 8008c24:	9b01      	ldr	r3, [sp, #4]
 8008c26:	61a3      	str	r3, [r4, #24]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	bf0c      	ite	eq
 8008c2c:	2201      	moveq	r2, #1
 8008c2e:	2202      	movne	r2, #2
 8008c30:	6122      	str	r2, [r4, #16]
 8008c32:	b1a5      	cbz	r5, 8008c5e <__d2b+0x92>
 8008c34:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008c38:	4405      	add	r5, r0
 8008c3a:	603d      	str	r5, [r7, #0]
 8008c3c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008c40:	6030      	str	r0, [r6, #0]
 8008c42:	4620      	mov	r0, r4
 8008c44:	b003      	add	sp, #12
 8008c46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c4a:	6161      	str	r1, [r4, #20]
 8008c4c:	e7ea      	b.n	8008c24 <__d2b+0x58>
 8008c4e:	a801      	add	r0, sp, #4
 8008c50:	f7ff fd59 	bl	8008706 <__lo0bits>
 8008c54:	9b01      	ldr	r3, [sp, #4]
 8008c56:	6163      	str	r3, [r4, #20]
 8008c58:	3020      	adds	r0, #32
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	e7e8      	b.n	8008c30 <__d2b+0x64>
 8008c5e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c62:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008c66:	6038      	str	r0, [r7, #0]
 8008c68:	6918      	ldr	r0, [r3, #16]
 8008c6a:	f7ff fd2d 	bl	80086c8 <__hi0bits>
 8008c6e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008c72:	e7e5      	b.n	8008c40 <__d2b+0x74>
 8008c74:	08009af9 	.word	0x08009af9
 8008c78:	08009b0a 	.word	0x08009b0a

08008c7c <__ssputs_r>:
 8008c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c80:	688e      	ldr	r6, [r1, #8]
 8008c82:	461f      	mov	r7, r3
 8008c84:	42be      	cmp	r6, r7
 8008c86:	680b      	ldr	r3, [r1, #0]
 8008c88:	4682      	mov	sl, r0
 8008c8a:	460c      	mov	r4, r1
 8008c8c:	4690      	mov	r8, r2
 8008c8e:	d82d      	bhi.n	8008cec <__ssputs_r+0x70>
 8008c90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008c98:	d026      	beq.n	8008ce8 <__ssputs_r+0x6c>
 8008c9a:	6965      	ldr	r5, [r4, #20]
 8008c9c:	6909      	ldr	r1, [r1, #16]
 8008c9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ca2:	eba3 0901 	sub.w	r9, r3, r1
 8008ca6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008caa:	1c7b      	adds	r3, r7, #1
 8008cac:	444b      	add	r3, r9
 8008cae:	106d      	asrs	r5, r5, #1
 8008cb0:	429d      	cmp	r5, r3
 8008cb2:	bf38      	it	cc
 8008cb4:	461d      	movcc	r5, r3
 8008cb6:	0553      	lsls	r3, r2, #21
 8008cb8:	d527      	bpl.n	8008d0a <__ssputs_r+0x8e>
 8008cba:	4629      	mov	r1, r5
 8008cbc:	f7ff fbd0 	bl	8008460 <_malloc_r>
 8008cc0:	4606      	mov	r6, r0
 8008cc2:	b360      	cbz	r0, 8008d1e <__ssputs_r+0xa2>
 8008cc4:	6921      	ldr	r1, [r4, #16]
 8008cc6:	464a      	mov	r2, r9
 8008cc8:	f000 fbcc 	bl	8009464 <memcpy>
 8008ccc:	89a3      	ldrh	r3, [r4, #12]
 8008cce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008cd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cd6:	81a3      	strh	r3, [r4, #12]
 8008cd8:	6126      	str	r6, [r4, #16]
 8008cda:	6165      	str	r5, [r4, #20]
 8008cdc:	444e      	add	r6, r9
 8008cde:	eba5 0509 	sub.w	r5, r5, r9
 8008ce2:	6026      	str	r6, [r4, #0]
 8008ce4:	60a5      	str	r5, [r4, #8]
 8008ce6:	463e      	mov	r6, r7
 8008ce8:	42be      	cmp	r6, r7
 8008cea:	d900      	bls.n	8008cee <__ssputs_r+0x72>
 8008cec:	463e      	mov	r6, r7
 8008cee:	6820      	ldr	r0, [r4, #0]
 8008cf0:	4632      	mov	r2, r6
 8008cf2:	4641      	mov	r1, r8
 8008cf4:	f000 fb6a 	bl	80093cc <memmove>
 8008cf8:	68a3      	ldr	r3, [r4, #8]
 8008cfa:	1b9b      	subs	r3, r3, r6
 8008cfc:	60a3      	str	r3, [r4, #8]
 8008cfe:	6823      	ldr	r3, [r4, #0]
 8008d00:	4433      	add	r3, r6
 8008d02:	6023      	str	r3, [r4, #0]
 8008d04:	2000      	movs	r0, #0
 8008d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d0a:	462a      	mov	r2, r5
 8008d0c:	f000 fbfc 	bl	8009508 <_realloc_r>
 8008d10:	4606      	mov	r6, r0
 8008d12:	2800      	cmp	r0, #0
 8008d14:	d1e0      	bne.n	8008cd8 <__ssputs_r+0x5c>
 8008d16:	6921      	ldr	r1, [r4, #16]
 8008d18:	4650      	mov	r0, sl
 8008d1a:	f7ff fb2d 	bl	8008378 <_free_r>
 8008d1e:	230c      	movs	r3, #12
 8008d20:	f8ca 3000 	str.w	r3, [sl]
 8008d24:	89a3      	ldrh	r3, [r4, #12]
 8008d26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d2a:	81a3      	strh	r3, [r4, #12]
 8008d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d30:	e7e9      	b.n	8008d06 <__ssputs_r+0x8a>
	...

08008d34 <_svfiprintf_r>:
 8008d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d38:	4698      	mov	r8, r3
 8008d3a:	898b      	ldrh	r3, [r1, #12]
 8008d3c:	061b      	lsls	r3, r3, #24
 8008d3e:	b09d      	sub	sp, #116	@ 0x74
 8008d40:	4607      	mov	r7, r0
 8008d42:	460d      	mov	r5, r1
 8008d44:	4614      	mov	r4, r2
 8008d46:	d510      	bpl.n	8008d6a <_svfiprintf_r+0x36>
 8008d48:	690b      	ldr	r3, [r1, #16]
 8008d4a:	b973      	cbnz	r3, 8008d6a <_svfiprintf_r+0x36>
 8008d4c:	2140      	movs	r1, #64	@ 0x40
 8008d4e:	f7ff fb87 	bl	8008460 <_malloc_r>
 8008d52:	6028      	str	r0, [r5, #0]
 8008d54:	6128      	str	r0, [r5, #16]
 8008d56:	b930      	cbnz	r0, 8008d66 <_svfiprintf_r+0x32>
 8008d58:	230c      	movs	r3, #12
 8008d5a:	603b      	str	r3, [r7, #0]
 8008d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d60:	b01d      	add	sp, #116	@ 0x74
 8008d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d66:	2340      	movs	r3, #64	@ 0x40
 8008d68:	616b      	str	r3, [r5, #20]
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d6e:	2320      	movs	r3, #32
 8008d70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d74:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d78:	2330      	movs	r3, #48	@ 0x30
 8008d7a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008f18 <_svfiprintf_r+0x1e4>
 8008d7e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d82:	f04f 0901 	mov.w	r9, #1
 8008d86:	4623      	mov	r3, r4
 8008d88:	469a      	mov	sl, r3
 8008d8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d8e:	b10a      	cbz	r2, 8008d94 <_svfiprintf_r+0x60>
 8008d90:	2a25      	cmp	r2, #37	@ 0x25
 8008d92:	d1f9      	bne.n	8008d88 <_svfiprintf_r+0x54>
 8008d94:	ebba 0b04 	subs.w	fp, sl, r4
 8008d98:	d00b      	beq.n	8008db2 <_svfiprintf_r+0x7e>
 8008d9a:	465b      	mov	r3, fp
 8008d9c:	4622      	mov	r2, r4
 8008d9e:	4629      	mov	r1, r5
 8008da0:	4638      	mov	r0, r7
 8008da2:	f7ff ff6b 	bl	8008c7c <__ssputs_r>
 8008da6:	3001      	adds	r0, #1
 8008da8:	f000 80a7 	beq.w	8008efa <_svfiprintf_r+0x1c6>
 8008dac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008dae:	445a      	add	r2, fp
 8008db0:	9209      	str	r2, [sp, #36]	@ 0x24
 8008db2:	f89a 3000 	ldrb.w	r3, [sl]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	f000 809f 	beq.w	8008efa <_svfiprintf_r+0x1c6>
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8008dc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dc6:	f10a 0a01 	add.w	sl, sl, #1
 8008dca:	9304      	str	r3, [sp, #16]
 8008dcc:	9307      	str	r3, [sp, #28]
 8008dce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008dd2:	931a      	str	r3, [sp, #104]	@ 0x68
 8008dd4:	4654      	mov	r4, sl
 8008dd6:	2205      	movs	r2, #5
 8008dd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ddc:	484e      	ldr	r0, [pc, #312]	@ (8008f18 <_svfiprintf_r+0x1e4>)
 8008dde:	f7f7 f9f7 	bl	80001d0 <memchr>
 8008de2:	9a04      	ldr	r2, [sp, #16]
 8008de4:	b9d8      	cbnz	r0, 8008e1e <_svfiprintf_r+0xea>
 8008de6:	06d0      	lsls	r0, r2, #27
 8008de8:	bf44      	itt	mi
 8008dea:	2320      	movmi	r3, #32
 8008dec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008df0:	0711      	lsls	r1, r2, #28
 8008df2:	bf44      	itt	mi
 8008df4:	232b      	movmi	r3, #43	@ 0x2b
 8008df6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008dfa:	f89a 3000 	ldrb.w	r3, [sl]
 8008dfe:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e00:	d015      	beq.n	8008e2e <_svfiprintf_r+0xfa>
 8008e02:	9a07      	ldr	r2, [sp, #28]
 8008e04:	4654      	mov	r4, sl
 8008e06:	2000      	movs	r0, #0
 8008e08:	f04f 0c0a 	mov.w	ip, #10
 8008e0c:	4621      	mov	r1, r4
 8008e0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e12:	3b30      	subs	r3, #48	@ 0x30
 8008e14:	2b09      	cmp	r3, #9
 8008e16:	d94b      	bls.n	8008eb0 <_svfiprintf_r+0x17c>
 8008e18:	b1b0      	cbz	r0, 8008e48 <_svfiprintf_r+0x114>
 8008e1a:	9207      	str	r2, [sp, #28]
 8008e1c:	e014      	b.n	8008e48 <_svfiprintf_r+0x114>
 8008e1e:	eba0 0308 	sub.w	r3, r0, r8
 8008e22:	fa09 f303 	lsl.w	r3, r9, r3
 8008e26:	4313      	orrs	r3, r2
 8008e28:	9304      	str	r3, [sp, #16]
 8008e2a:	46a2      	mov	sl, r4
 8008e2c:	e7d2      	b.n	8008dd4 <_svfiprintf_r+0xa0>
 8008e2e:	9b03      	ldr	r3, [sp, #12]
 8008e30:	1d19      	adds	r1, r3, #4
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	9103      	str	r1, [sp, #12]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	bfbb      	ittet	lt
 8008e3a:	425b      	neglt	r3, r3
 8008e3c:	f042 0202 	orrlt.w	r2, r2, #2
 8008e40:	9307      	strge	r3, [sp, #28]
 8008e42:	9307      	strlt	r3, [sp, #28]
 8008e44:	bfb8      	it	lt
 8008e46:	9204      	strlt	r2, [sp, #16]
 8008e48:	7823      	ldrb	r3, [r4, #0]
 8008e4a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e4c:	d10a      	bne.n	8008e64 <_svfiprintf_r+0x130>
 8008e4e:	7863      	ldrb	r3, [r4, #1]
 8008e50:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e52:	d132      	bne.n	8008eba <_svfiprintf_r+0x186>
 8008e54:	9b03      	ldr	r3, [sp, #12]
 8008e56:	1d1a      	adds	r2, r3, #4
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	9203      	str	r2, [sp, #12]
 8008e5c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e60:	3402      	adds	r4, #2
 8008e62:	9305      	str	r3, [sp, #20]
 8008e64:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008f28 <_svfiprintf_r+0x1f4>
 8008e68:	7821      	ldrb	r1, [r4, #0]
 8008e6a:	2203      	movs	r2, #3
 8008e6c:	4650      	mov	r0, sl
 8008e6e:	f7f7 f9af 	bl	80001d0 <memchr>
 8008e72:	b138      	cbz	r0, 8008e84 <_svfiprintf_r+0x150>
 8008e74:	9b04      	ldr	r3, [sp, #16]
 8008e76:	eba0 000a 	sub.w	r0, r0, sl
 8008e7a:	2240      	movs	r2, #64	@ 0x40
 8008e7c:	4082      	lsls	r2, r0
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	3401      	adds	r4, #1
 8008e82:	9304      	str	r3, [sp, #16]
 8008e84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e88:	4824      	ldr	r0, [pc, #144]	@ (8008f1c <_svfiprintf_r+0x1e8>)
 8008e8a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e8e:	2206      	movs	r2, #6
 8008e90:	f7f7 f99e 	bl	80001d0 <memchr>
 8008e94:	2800      	cmp	r0, #0
 8008e96:	d036      	beq.n	8008f06 <_svfiprintf_r+0x1d2>
 8008e98:	4b21      	ldr	r3, [pc, #132]	@ (8008f20 <_svfiprintf_r+0x1ec>)
 8008e9a:	bb1b      	cbnz	r3, 8008ee4 <_svfiprintf_r+0x1b0>
 8008e9c:	9b03      	ldr	r3, [sp, #12]
 8008e9e:	3307      	adds	r3, #7
 8008ea0:	f023 0307 	bic.w	r3, r3, #7
 8008ea4:	3308      	adds	r3, #8
 8008ea6:	9303      	str	r3, [sp, #12]
 8008ea8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008eaa:	4433      	add	r3, r6
 8008eac:	9309      	str	r3, [sp, #36]	@ 0x24
 8008eae:	e76a      	b.n	8008d86 <_svfiprintf_r+0x52>
 8008eb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008eb4:	460c      	mov	r4, r1
 8008eb6:	2001      	movs	r0, #1
 8008eb8:	e7a8      	b.n	8008e0c <_svfiprintf_r+0xd8>
 8008eba:	2300      	movs	r3, #0
 8008ebc:	3401      	adds	r4, #1
 8008ebe:	9305      	str	r3, [sp, #20]
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	f04f 0c0a 	mov.w	ip, #10
 8008ec6:	4620      	mov	r0, r4
 8008ec8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ecc:	3a30      	subs	r2, #48	@ 0x30
 8008ece:	2a09      	cmp	r2, #9
 8008ed0:	d903      	bls.n	8008eda <_svfiprintf_r+0x1a6>
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d0c6      	beq.n	8008e64 <_svfiprintf_r+0x130>
 8008ed6:	9105      	str	r1, [sp, #20]
 8008ed8:	e7c4      	b.n	8008e64 <_svfiprintf_r+0x130>
 8008eda:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ede:	4604      	mov	r4, r0
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	e7f0      	b.n	8008ec6 <_svfiprintf_r+0x192>
 8008ee4:	ab03      	add	r3, sp, #12
 8008ee6:	9300      	str	r3, [sp, #0]
 8008ee8:	462a      	mov	r2, r5
 8008eea:	4b0e      	ldr	r3, [pc, #56]	@ (8008f24 <_svfiprintf_r+0x1f0>)
 8008eec:	a904      	add	r1, sp, #16
 8008eee:	4638      	mov	r0, r7
 8008ef0:	f7fd fd7e 	bl	80069f0 <_printf_float>
 8008ef4:	1c42      	adds	r2, r0, #1
 8008ef6:	4606      	mov	r6, r0
 8008ef8:	d1d6      	bne.n	8008ea8 <_svfiprintf_r+0x174>
 8008efa:	89ab      	ldrh	r3, [r5, #12]
 8008efc:	065b      	lsls	r3, r3, #25
 8008efe:	f53f af2d 	bmi.w	8008d5c <_svfiprintf_r+0x28>
 8008f02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f04:	e72c      	b.n	8008d60 <_svfiprintf_r+0x2c>
 8008f06:	ab03      	add	r3, sp, #12
 8008f08:	9300      	str	r3, [sp, #0]
 8008f0a:	462a      	mov	r2, r5
 8008f0c:	4b05      	ldr	r3, [pc, #20]	@ (8008f24 <_svfiprintf_r+0x1f0>)
 8008f0e:	a904      	add	r1, sp, #16
 8008f10:	4638      	mov	r0, r7
 8008f12:	f7fe f805 	bl	8006f20 <_printf_i>
 8008f16:	e7ed      	b.n	8008ef4 <_svfiprintf_r+0x1c0>
 8008f18:	08009c60 	.word	0x08009c60
 8008f1c:	08009c6a 	.word	0x08009c6a
 8008f20:	080069f1 	.word	0x080069f1
 8008f24:	08008c7d 	.word	0x08008c7d
 8008f28:	08009c66 	.word	0x08009c66

08008f2c <__sfputc_r>:
 8008f2c:	6893      	ldr	r3, [r2, #8]
 8008f2e:	3b01      	subs	r3, #1
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	b410      	push	{r4}
 8008f34:	6093      	str	r3, [r2, #8]
 8008f36:	da08      	bge.n	8008f4a <__sfputc_r+0x1e>
 8008f38:	6994      	ldr	r4, [r2, #24]
 8008f3a:	42a3      	cmp	r3, r4
 8008f3c:	db01      	blt.n	8008f42 <__sfputc_r+0x16>
 8008f3e:	290a      	cmp	r1, #10
 8008f40:	d103      	bne.n	8008f4a <__sfputc_r+0x1e>
 8008f42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f46:	f7fe bab4 	b.w	80074b2 <__swbuf_r>
 8008f4a:	6813      	ldr	r3, [r2, #0]
 8008f4c:	1c58      	adds	r0, r3, #1
 8008f4e:	6010      	str	r0, [r2, #0]
 8008f50:	7019      	strb	r1, [r3, #0]
 8008f52:	4608      	mov	r0, r1
 8008f54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f58:	4770      	bx	lr

08008f5a <__sfputs_r>:
 8008f5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f5c:	4606      	mov	r6, r0
 8008f5e:	460f      	mov	r7, r1
 8008f60:	4614      	mov	r4, r2
 8008f62:	18d5      	adds	r5, r2, r3
 8008f64:	42ac      	cmp	r4, r5
 8008f66:	d101      	bne.n	8008f6c <__sfputs_r+0x12>
 8008f68:	2000      	movs	r0, #0
 8008f6a:	e007      	b.n	8008f7c <__sfputs_r+0x22>
 8008f6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f70:	463a      	mov	r2, r7
 8008f72:	4630      	mov	r0, r6
 8008f74:	f7ff ffda 	bl	8008f2c <__sfputc_r>
 8008f78:	1c43      	adds	r3, r0, #1
 8008f7a:	d1f3      	bne.n	8008f64 <__sfputs_r+0xa>
 8008f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008f80 <_vfiprintf_r>:
 8008f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f84:	460d      	mov	r5, r1
 8008f86:	b09d      	sub	sp, #116	@ 0x74
 8008f88:	4614      	mov	r4, r2
 8008f8a:	4698      	mov	r8, r3
 8008f8c:	4606      	mov	r6, r0
 8008f8e:	b118      	cbz	r0, 8008f98 <_vfiprintf_r+0x18>
 8008f90:	6a03      	ldr	r3, [r0, #32]
 8008f92:	b90b      	cbnz	r3, 8008f98 <_vfiprintf_r+0x18>
 8008f94:	f7fe f970 	bl	8007278 <__sinit>
 8008f98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f9a:	07d9      	lsls	r1, r3, #31
 8008f9c:	d405      	bmi.n	8008faa <_vfiprintf_r+0x2a>
 8008f9e:	89ab      	ldrh	r3, [r5, #12]
 8008fa0:	059a      	lsls	r2, r3, #22
 8008fa2:	d402      	bmi.n	8008faa <_vfiprintf_r+0x2a>
 8008fa4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008fa6:	f7fe fb96 	bl	80076d6 <__retarget_lock_acquire_recursive>
 8008faa:	89ab      	ldrh	r3, [r5, #12]
 8008fac:	071b      	lsls	r3, r3, #28
 8008fae:	d501      	bpl.n	8008fb4 <_vfiprintf_r+0x34>
 8008fb0:	692b      	ldr	r3, [r5, #16]
 8008fb2:	b99b      	cbnz	r3, 8008fdc <_vfiprintf_r+0x5c>
 8008fb4:	4629      	mov	r1, r5
 8008fb6:	4630      	mov	r0, r6
 8008fb8:	f7fe faba 	bl	8007530 <__swsetup_r>
 8008fbc:	b170      	cbz	r0, 8008fdc <_vfiprintf_r+0x5c>
 8008fbe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008fc0:	07dc      	lsls	r4, r3, #31
 8008fc2:	d504      	bpl.n	8008fce <_vfiprintf_r+0x4e>
 8008fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fc8:	b01d      	add	sp, #116	@ 0x74
 8008fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fce:	89ab      	ldrh	r3, [r5, #12]
 8008fd0:	0598      	lsls	r0, r3, #22
 8008fd2:	d4f7      	bmi.n	8008fc4 <_vfiprintf_r+0x44>
 8008fd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008fd6:	f7fe fb7f 	bl	80076d8 <__retarget_lock_release_recursive>
 8008fda:	e7f3      	b.n	8008fc4 <_vfiprintf_r+0x44>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fe0:	2320      	movs	r3, #32
 8008fe2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008fe6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fea:	2330      	movs	r3, #48	@ 0x30
 8008fec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800919c <_vfiprintf_r+0x21c>
 8008ff0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ff4:	f04f 0901 	mov.w	r9, #1
 8008ff8:	4623      	mov	r3, r4
 8008ffa:	469a      	mov	sl, r3
 8008ffc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009000:	b10a      	cbz	r2, 8009006 <_vfiprintf_r+0x86>
 8009002:	2a25      	cmp	r2, #37	@ 0x25
 8009004:	d1f9      	bne.n	8008ffa <_vfiprintf_r+0x7a>
 8009006:	ebba 0b04 	subs.w	fp, sl, r4
 800900a:	d00b      	beq.n	8009024 <_vfiprintf_r+0xa4>
 800900c:	465b      	mov	r3, fp
 800900e:	4622      	mov	r2, r4
 8009010:	4629      	mov	r1, r5
 8009012:	4630      	mov	r0, r6
 8009014:	f7ff ffa1 	bl	8008f5a <__sfputs_r>
 8009018:	3001      	adds	r0, #1
 800901a:	f000 80a7 	beq.w	800916c <_vfiprintf_r+0x1ec>
 800901e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009020:	445a      	add	r2, fp
 8009022:	9209      	str	r2, [sp, #36]	@ 0x24
 8009024:	f89a 3000 	ldrb.w	r3, [sl]
 8009028:	2b00      	cmp	r3, #0
 800902a:	f000 809f 	beq.w	800916c <_vfiprintf_r+0x1ec>
 800902e:	2300      	movs	r3, #0
 8009030:	f04f 32ff 	mov.w	r2, #4294967295
 8009034:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009038:	f10a 0a01 	add.w	sl, sl, #1
 800903c:	9304      	str	r3, [sp, #16]
 800903e:	9307      	str	r3, [sp, #28]
 8009040:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009044:	931a      	str	r3, [sp, #104]	@ 0x68
 8009046:	4654      	mov	r4, sl
 8009048:	2205      	movs	r2, #5
 800904a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800904e:	4853      	ldr	r0, [pc, #332]	@ (800919c <_vfiprintf_r+0x21c>)
 8009050:	f7f7 f8be 	bl	80001d0 <memchr>
 8009054:	9a04      	ldr	r2, [sp, #16]
 8009056:	b9d8      	cbnz	r0, 8009090 <_vfiprintf_r+0x110>
 8009058:	06d1      	lsls	r1, r2, #27
 800905a:	bf44      	itt	mi
 800905c:	2320      	movmi	r3, #32
 800905e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009062:	0713      	lsls	r3, r2, #28
 8009064:	bf44      	itt	mi
 8009066:	232b      	movmi	r3, #43	@ 0x2b
 8009068:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800906c:	f89a 3000 	ldrb.w	r3, [sl]
 8009070:	2b2a      	cmp	r3, #42	@ 0x2a
 8009072:	d015      	beq.n	80090a0 <_vfiprintf_r+0x120>
 8009074:	9a07      	ldr	r2, [sp, #28]
 8009076:	4654      	mov	r4, sl
 8009078:	2000      	movs	r0, #0
 800907a:	f04f 0c0a 	mov.w	ip, #10
 800907e:	4621      	mov	r1, r4
 8009080:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009084:	3b30      	subs	r3, #48	@ 0x30
 8009086:	2b09      	cmp	r3, #9
 8009088:	d94b      	bls.n	8009122 <_vfiprintf_r+0x1a2>
 800908a:	b1b0      	cbz	r0, 80090ba <_vfiprintf_r+0x13a>
 800908c:	9207      	str	r2, [sp, #28]
 800908e:	e014      	b.n	80090ba <_vfiprintf_r+0x13a>
 8009090:	eba0 0308 	sub.w	r3, r0, r8
 8009094:	fa09 f303 	lsl.w	r3, r9, r3
 8009098:	4313      	orrs	r3, r2
 800909a:	9304      	str	r3, [sp, #16]
 800909c:	46a2      	mov	sl, r4
 800909e:	e7d2      	b.n	8009046 <_vfiprintf_r+0xc6>
 80090a0:	9b03      	ldr	r3, [sp, #12]
 80090a2:	1d19      	adds	r1, r3, #4
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	9103      	str	r1, [sp, #12]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	bfbb      	ittet	lt
 80090ac:	425b      	neglt	r3, r3
 80090ae:	f042 0202 	orrlt.w	r2, r2, #2
 80090b2:	9307      	strge	r3, [sp, #28]
 80090b4:	9307      	strlt	r3, [sp, #28]
 80090b6:	bfb8      	it	lt
 80090b8:	9204      	strlt	r2, [sp, #16]
 80090ba:	7823      	ldrb	r3, [r4, #0]
 80090bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80090be:	d10a      	bne.n	80090d6 <_vfiprintf_r+0x156>
 80090c0:	7863      	ldrb	r3, [r4, #1]
 80090c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80090c4:	d132      	bne.n	800912c <_vfiprintf_r+0x1ac>
 80090c6:	9b03      	ldr	r3, [sp, #12]
 80090c8:	1d1a      	adds	r2, r3, #4
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	9203      	str	r2, [sp, #12]
 80090ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80090d2:	3402      	adds	r4, #2
 80090d4:	9305      	str	r3, [sp, #20]
 80090d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80091ac <_vfiprintf_r+0x22c>
 80090da:	7821      	ldrb	r1, [r4, #0]
 80090dc:	2203      	movs	r2, #3
 80090de:	4650      	mov	r0, sl
 80090e0:	f7f7 f876 	bl	80001d0 <memchr>
 80090e4:	b138      	cbz	r0, 80090f6 <_vfiprintf_r+0x176>
 80090e6:	9b04      	ldr	r3, [sp, #16]
 80090e8:	eba0 000a 	sub.w	r0, r0, sl
 80090ec:	2240      	movs	r2, #64	@ 0x40
 80090ee:	4082      	lsls	r2, r0
 80090f0:	4313      	orrs	r3, r2
 80090f2:	3401      	adds	r4, #1
 80090f4:	9304      	str	r3, [sp, #16]
 80090f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090fa:	4829      	ldr	r0, [pc, #164]	@ (80091a0 <_vfiprintf_r+0x220>)
 80090fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009100:	2206      	movs	r2, #6
 8009102:	f7f7 f865 	bl	80001d0 <memchr>
 8009106:	2800      	cmp	r0, #0
 8009108:	d03f      	beq.n	800918a <_vfiprintf_r+0x20a>
 800910a:	4b26      	ldr	r3, [pc, #152]	@ (80091a4 <_vfiprintf_r+0x224>)
 800910c:	bb1b      	cbnz	r3, 8009156 <_vfiprintf_r+0x1d6>
 800910e:	9b03      	ldr	r3, [sp, #12]
 8009110:	3307      	adds	r3, #7
 8009112:	f023 0307 	bic.w	r3, r3, #7
 8009116:	3308      	adds	r3, #8
 8009118:	9303      	str	r3, [sp, #12]
 800911a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800911c:	443b      	add	r3, r7
 800911e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009120:	e76a      	b.n	8008ff8 <_vfiprintf_r+0x78>
 8009122:	fb0c 3202 	mla	r2, ip, r2, r3
 8009126:	460c      	mov	r4, r1
 8009128:	2001      	movs	r0, #1
 800912a:	e7a8      	b.n	800907e <_vfiprintf_r+0xfe>
 800912c:	2300      	movs	r3, #0
 800912e:	3401      	adds	r4, #1
 8009130:	9305      	str	r3, [sp, #20]
 8009132:	4619      	mov	r1, r3
 8009134:	f04f 0c0a 	mov.w	ip, #10
 8009138:	4620      	mov	r0, r4
 800913a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800913e:	3a30      	subs	r2, #48	@ 0x30
 8009140:	2a09      	cmp	r2, #9
 8009142:	d903      	bls.n	800914c <_vfiprintf_r+0x1cc>
 8009144:	2b00      	cmp	r3, #0
 8009146:	d0c6      	beq.n	80090d6 <_vfiprintf_r+0x156>
 8009148:	9105      	str	r1, [sp, #20]
 800914a:	e7c4      	b.n	80090d6 <_vfiprintf_r+0x156>
 800914c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009150:	4604      	mov	r4, r0
 8009152:	2301      	movs	r3, #1
 8009154:	e7f0      	b.n	8009138 <_vfiprintf_r+0x1b8>
 8009156:	ab03      	add	r3, sp, #12
 8009158:	9300      	str	r3, [sp, #0]
 800915a:	462a      	mov	r2, r5
 800915c:	4b12      	ldr	r3, [pc, #72]	@ (80091a8 <_vfiprintf_r+0x228>)
 800915e:	a904      	add	r1, sp, #16
 8009160:	4630      	mov	r0, r6
 8009162:	f7fd fc45 	bl	80069f0 <_printf_float>
 8009166:	4607      	mov	r7, r0
 8009168:	1c78      	adds	r0, r7, #1
 800916a:	d1d6      	bne.n	800911a <_vfiprintf_r+0x19a>
 800916c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800916e:	07d9      	lsls	r1, r3, #31
 8009170:	d405      	bmi.n	800917e <_vfiprintf_r+0x1fe>
 8009172:	89ab      	ldrh	r3, [r5, #12]
 8009174:	059a      	lsls	r2, r3, #22
 8009176:	d402      	bmi.n	800917e <_vfiprintf_r+0x1fe>
 8009178:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800917a:	f7fe faad 	bl	80076d8 <__retarget_lock_release_recursive>
 800917e:	89ab      	ldrh	r3, [r5, #12]
 8009180:	065b      	lsls	r3, r3, #25
 8009182:	f53f af1f 	bmi.w	8008fc4 <_vfiprintf_r+0x44>
 8009186:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009188:	e71e      	b.n	8008fc8 <_vfiprintf_r+0x48>
 800918a:	ab03      	add	r3, sp, #12
 800918c:	9300      	str	r3, [sp, #0]
 800918e:	462a      	mov	r2, r5
 8009190:	4b05      	ldr	r3, [pc, #20]	@ (80091a8 <_vfiprintf_r+0x228>)
 8009192:	a904      	add	r1, sp, #16
 8009194:	4630      	mov	r0, r6
 8009196:	f7fd fec3 	bl	8006f20 <_printf_i>
 800919a:	e7e4      	b.n	8009166 <_vfiprintf_r+0x1e6>
 800919c:	08009c60 	.word	0x08009c60
 80091a0:	08009c6a 	.word	0x08009c6a
 80091a4:	080069f1 	.word	0x080069f1
 80091a8:	08008f5b 	.word	0x08008f5b
 80091ac:	08009c66 	.word	0x08009c66

080091b0 <__sflush_r>:
 80091b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80091b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091b8:	0716      	lsls	r6, r2, #28
 80091ba:	4605      	mov	r5, r0
 80091bc:	460c      	mov	r4, r1
 80091be:	d454      	bmi.n	800926a <__sflush_r+0xba>
 80091c0:	684b      	ldr	r3, [r1, #4]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	dc02      	bgt.n	80091cc <__sflush_r+0x1c>
 80091c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	dd48      	ble.n	800925e <__sflush_r+0xae>
 80091cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80091ce:	2e00      	cmp	r6, #0
 80091d0:	d045      	beq.n	800925e <__sflush_r+0xae>
 80091d2:	2300      	movs	r3, #0
 80091d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80091d8:	682f      	ldr	r7, [r5, #0]
 80091da:	6a21      	ldr	r1, [r4, #32]
 80091dc:	602b      	str	r3, [r5, #0]
 80091de:	d030      	beq.n	8009242 <__sflush_r+0x92>
 80091e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80091e2:	89a3      	ldrh	r3, [r4, #12]
 80091e4:	0759      	lsls	r1, r3, #29
 80091e6:	d505      	bpl.n	80091f4 <__sflush_r+0x44>
 80091e8:	6863      	ldr	r3, [r4, #4]
 80091ea:	1ad2      	subs	r2, r2, r3
 80091ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80091ee:	b10b      	cbz	r3, 80091f4 <__sflush_r+0x44>
 80091f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80091f2:	1ad2      	subs	r2, r2, r3
 80091f4:	2300      	movs	r3, #0
 80091f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80091f8:	6a21      	ldr	r1, [r4, #32]
 80091fa:	4628      	mov	r0, r5
 80091fc:	47b0      	blx	r6
 80091fe:	1c43      	adds	r3, r0, #1
 8009200:	89a3      	ldrh	r3, [r4, #12]
 8009202:	d106      	bne.n	8009212 <__sflush_r+0x62>
 8009204:	6829      	ldr	r1, [r5, #0]
 8009206:	291d      	cmp	r1, #29
 8009208:	d82b      	bhi.n	8009262 <__sflush_r+0xb2>
 800920a:	4a2a      	ldr	r2, [pc, #168]	@ (80092b4 <__sflush_r+0x104>)
 800920c:	410a      	asrs	r2, r1
 800920e:	07d6      	lsls	r6, r2, #31
 8009210:	d427      	bmi.n	8009262 <__sflush_r+0xb2>
 8009212:	2200      	movs	r2, #0
 8009214:	6062      	str	r2, [r4, #4]
 8009216:	04d9      	lsls	r1, r3, #19
 8009218:	6922      	ldr	r2, [r4, #16]
 800921a:	6022      	str	r2, [r4, #0]
 800921c:	d504      	bpl.n	8009228 <__sflush_r+0x78>
 800921e:	1c42      	adds	r2, r0, #1
 8009220:	d101      	bne.n	8009226 <__sflush_r+0x76>
 8009222:	682b      	ldr	r3, [r5, #0]
 8009224:	b903      	cbnz	r3, 8009228 <__sflush_r+0x78>
 8009226:	6560      	str	r0, [r4, #84]	@ 0x54
 8009228:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800922a:	602f      	str	r7, [r5, #0]
 800922c:	b1b9      	cbz	r1, 800925e <__sflush_r+0xae>
 800922e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009232:	4299      	cmp	r1, r3
 8009234:	d002      	beq.n	800923c <__sflush_r+0x8c>
 8009236:	4628      	mov	r0, r5
 8009238:	f7ff f89e 	bl	8008378 <_free_r>
 800923c:	2300      	movs	r3, #0
 800923e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009240:	e00d      	b.n	800925e <__sflush_r+0xae>
 8009242:	2301      	movs	r3, #1
 8009244:	4628      	mov	r0, r5
 8009246:	47b0      	blx	r6
 8009248:	4602      	mov	r2, r0
 800924a:	1c50      	adds	r0, r2, #1
 800924c:	d1c9      	bne.n	80091e2 <__sflush_r+0x32>
 800924e:	682b      	ldr	r3, [r5, #0]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d0c6      	beq.n	80091e2 <__sflush_r+0x32>
 8009254:	2b1d      	cmp	r3, #29
 8009256:	d001      	beq.n	800925c <__sflush_r+0xac>
 8009258:	2b16      	cmp	r3, #22
 800925a:	d11e      	bne.n	800929a <__sflush_r+0xea>
 800925c:	602f      	str	r7, [r5, #0]
 800925e:	2000      	movs	r0, #0
 8009260:	e022      	b.n	80092a8 <__sflush_r+0xf8>
 8009262:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009266:	b21b      	sxth	r3, r3
 8009268:	e01b      	b.n	80092a2 <__sflush_r+0xf2>
 800926a:	690f      	ldr	r7, [r1, #16]
 800926c:	2f00      	cmp	r7, #0
 800926e:	d0f6      	beq.n	800925e <__sflush_r+0xae>
 8009270:	0793      	lsls	r3, r2, #30
 8009272:	680e      	ldr	r6, [r1, #0]
 8009274:	bf08      	it	eq
 8009276:	694b      	ldreq	r3, [r1, #20]
 8009278:	600f      	str	r7, [r1, #0]
 800927a:	bf18      	it	ne
 800927c:	2300      	movne	r3, #0
 800927e:	eba6 0807 	sub.w	r8, r6, r7
 8009282:	608b      	str	r3, [r1, #8]
 8009284:	f1b8 0f00 	cmp.w	r8, #0
 8009288:	dde9      	ble.n	800925e <__sflush_r+0xae>
 800928a:	6a21      	ldr	r1, [r4, #32]
 800928c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800928e:	4643      	mov	r3, r8
 8009290:	463a      	mov	r2, r7
 8009292:	4628      	mov	r0, r5
 8009294:	47b0      	blx	r6
 8009296:	2800      	cmp	r0, #0
 8009298:	dc08      	bgt.n	80092ac <__sflush_r+0xfc>
 800929a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800929e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092a2:	81a3      	strh	r3, [r4, #12]
 80092a4:	f04f 30ff 	mov.w	r0, #4294967295
 80092a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092ac:	4407      	add	r7, r0
 80092ae:	eba8 0800 	sub.w	r8, r8, r0
 80092b2:	e7e7      	b.n	8009284 <__sflush_r+0xd4>
 80092b4:	dfbffffe 	.word	0xdfbffffe

080092b8 <_fflush_r>:
 80092b8:	b538      	push	{r3, r4, r5, lr}
 80092ba:	690b      	ldr	r3, [r1, #16]
 80092bc:	4605      	mov	r5, r0
 80092be:	460c      	mov	r4, r1
 80092c0:	b913      	cbnz	r3, 80092c8 <_fflush_r+0x10>
 80092c2:	2500      	movs	r5, #0
 80092c4:	4628      	mov	r0, r5
 80092c6:	bd38      	pop	{r3, r4, r5, pc}
 80092c8:	b118      	cbz	r0, 80092d2 <_fflush_r+0x1a>
 80092ca:	6a03      	ldr	r3, [r0, #32]
 80092cc:	b90b      	cbnz	r3, 80092d2 <_fflush_r+0x1a>
 80092ce:	f7fd ffd3 	bl	8007278 <__sinit>
 80092d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d0f3      	beq.n	80092c2 <_fflush_r+0xa>
 80092da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80092dc:	07d0      	lsls	r0, r2, #31
 80092de:	d404      	bmi.n	80092ea <_fflush_r+0x32>
 80092e0:	0599      	lsls	r1, r3, #22
 80092e2:	d402      	bmi.n	80092ea <_fflush_r+0x32>
 80092e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80092e6:	f7fe f9f6 	bl	80076d6 <__retarget_lock_acquire_recursive>
 80092ea:	4628      	mov	r0, r5
 80092ec:	4621      	mov	r1, r4
 80092ee:	f7ff ff5f 	bl	80091b0 <__sflush_r>
 80092f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80092f4:	07da      	lsls	r2, r3, #31
 80092f6:	4605      	mov	r5, r0
 80092f8:	d4e4      	bmi.n	80092c4 <_fflush_r+0xc>
 80092fa:	89a3      	ldrh	r3, [r4, #12]
 80092fc:	059b      	lsls	r3, r3, #22
 80092fe:	d4e1      	bmi.n	80092c4 <_fflush_r+0xc>
 8009300:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009302:	f7fe f9e9 	bl	80076d8 <__retarget_lock_release_recursive>
 8009306:	e7dd      	b.n	80092c4 <_fflush_r+0xc>

08009308 <__swhatbuf_r>:
 8009308:	b570      	push	{r4, r5, r6, lr}
 800930a:	460c      	mov	r4, r1
 800930c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009310:	2900      	cmp	r1, #0
 8009312:	b096      	sub	sp, #88	@ 0x58
 8009314:	4615      	mov	r5, r2
 8009316:	461e      	mov	r6, r3
 8009318:	da0d      	bge.n	8009336 <__swhatbuf_r+0x2e>
 800931a:	89a3      	ldrh	r3, [r4, #12]
 800931c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009320:	f04f 0100 	mov.w	r1, #0
 8009324:	bf14      	ite	ne
 8009326:	2340      	movne	r3, #64	@ 0x40
 8009328:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800932c:	2000      	movs	r0, #0
 800932e:	6031      	str	r1, [r6, #0]
 8009330:	602b      	str	r3, [r5, #0]
 8009332:	b016      	add	sp, #88	@ 0x58
 8009334:	bd70      	pop	{r4, r5, r6, pc}
 8009336:	466a      	mov	r2, sp
 8009338:	f000 f862 	bl	8009400 <_fstat_r>
 800933c:	2800      	cmp	r0, #0
 800933e:	dbec      	blt.n	800931a <__swhatbuf_r+0x12>
 8009340:	9901      	ldr	r1, [sp, #4]
 8009342:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009346:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800934a:	4259      	negs	r1, r3
 800934c:	4159      	adcs	r1, r3
 800934e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009352:	e7eb      	b.n	800932c <__swhatbuf_r+0x24>

08009354 <__smakebuf_r>:
 8009354:	898b      	ldrh	r3, [r1, #12]
 8009356:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009358:	079d      	lsls	r5, r3, #30
 800935a:	4606      	mov	r6, r0
 800935c:	460c      	mov	r4, r1
 800935e:	d507      	bpl.n	8009370 <__smakebuf_r+0x1c>
 8009360:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009364:	6023      	str	r3, [r4, #0]
 8009366:	6123      	str	r3, [r4, #16]
 8009368:	2301      	movs	r3, #1
 800936a:	6163      	str	r3, [r4, #20]
 800936c:	b003      	add	sp, #12
 800936e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009370:	ab01      	add	r3, sp, #4
 8009372:	466a      	mov	r2, sp
 8009374:	f7ff ffc8 	bl	8009308 <__swhatbuf_r>
 8009378:	9f00      	ldr	r7, [sp, #0]
 800937a:	4605      	mov	r5, r0
 800937c:	4639      	mov	r1, r7
 800937e:	4630      	mov	r0, r6
 8009380:	f7ff f86e 	bl	8008460 <_malloc_r>
 8009384:	b948      	cbnz	r0, 800939a <__smakebuf_r+0x46>
 8009386:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800938a:	059a      	lsls	r2, r3, #22
 800938c:	d4ee      	bmi.n	800936c <__smakebuf_r+0x18>
 800938e:	f023 0303 	bic.w	r3, r3, #3
 8009392:	f043 0302 	orr.w	r3, r3, #2
 8009396:	81a3      	strh	r3, [r4, #12]
 8009398:	e7e2      	b.n	8009360 <__smakebuf_r+0xc>
 800939a:	89a3      	ldrh	r3, [r4, #12]
 800939c:	6020      	str	r0, [r4, #0]
 800939e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093a2:	81a3      	strh	r3, [r4, #12]
 80093a4:	9b01      	ldr	r3, [sp, #4]
 80093a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80093aa:	b15b      	cbz	r3, 80093c4 <__smakebuf_r+0x70>
 80093ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093b0:	4630      	mov	r0, r6
 80093b2:	f000 f837 	bl	8009424 <_isatty_r>
 80093b6:	b128      	cbz	r0, 80093c4 <__smakebuf_r+0x70>
 80093b8:	89a3      	ldrh	r3, [r4, #12]
 80093ba:	f023 0303 	bic.w	r3, r3, #3
 80093be:	f043 0301 	orr.w	r3, r3, #1
 80093c2:	81a3      	strh	r3, [r4, #12]
 80093c4:	89a3      	ldrh	r3, [r4, #12]
 80093c6:	431d      	orrs	r5, r3
 80093c8:	81a5      	strh	r5, [r4, #12]
 80093ca:	e7cf      	b.n	800936c <__smakebuf_r+0x18>

080093cc <memmove>:
 80093cc:	4288      	cmp	r0, r1
 80093ce:	b510      	push	{r4, lr}
 80093d0:	eb01 0402 	add.w	r4, r1, r2
 80093d4:	d902      	bls.n	80093dc <memmove+0x10>
 80093d6:	4284      	cmp	r4, r0
 80093d8:	4623      	mov	r3, r4
 80093da:	d807      	bhi.n	80093ec <memmove+0x20>
 80093dc:	1e43      	subs	r3, r0, #1
 80093de:	42a1      	cmp	r1, r4
 80093e0:	d008      	beq.n	80093f4 <memmove+0x28>
 80093e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80093ea:	e7f8      	b.n	80093de <memmove+0x12>
 80093ec:	4402      	add	r2, r0
 80093ee:	4601      	mov	r1, r0
 80093f0:	428a      	cmp	r2, r1
 80093f2:	d100      	bne.n	80093f6 <memmove+0x2a>
 80093f4:	bd10      	pop	{r4, pc}
 80093f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80093fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80093fe:	e7f7      	b.n	80093f0 <memmove+0x24>

08009400 <_fstat_r>:
 8009400:	b538      	push	{r3, r4, r5, lr}
 8009402:	4d07      	ldr	r5, [pc, #28]	@ (8009420 <_fstat_r+0x20>)
 8009404:	2300      	movs	r3, #0
 8009406:	4604      	mov	r4, r0
 8009408:	4608      	mov	r0, r1
 800940a:	4611      	mov	r1, r2
 800940c:	602b      	str	r3, [r5, #0]
 800940e:	f7f9 f957 	bl	80026c0 <_fstat>
 8009412:	1c43      	adds	r3, r0, #1
 8009414:	d102      	bne.n	800941c <_fstat_r+0x1c>
 8009416:	682b      	ldr	r3, [r5, #0]
 8009418:	b103      	cbz	r3, 800941c <_fstat_r+0x1c>
 800941a:	6023      	str	r3, [r4, #0]
 800941c:	bd38      	pop	{r3, r4, r5, pc}
 800941e:	bf00      	nop
 8009420:	20000b6c 	.word	0x20000b6c

08009424 <_isatty_r>:
 8009424:	b538      	push	{r3, r4, r5, lr}
 8009426:	4d06      	ldr	r5, [pc, #24]	@ (8009440 <_isatty_r+0x1c>)
 8009428:	2300      	movs	r3, #0
 800942a:	4604      	mov	r4, r0
 800942c:	4608      	mov	r0, r1
 800942e:	602b      	str	r3, [r5, #0]
 8009430:	f7f9 f956 	bl	80026e0 <_isatty>
 8009434:	1c43      	adds	r3, r0, #1
 8009436:	d102      	bne.n	800943e <_isatty_r+0x1a>
 8009438:	682b      	ldr	r3, [r5, #0]
 800943a:	b103      	cbz	r3, 800943e <_isatty_r+0x1a>
 800943c:	6023      	str	r3, [r4, #0]
 800943e:	bd38      	pop	{r3, r4, r5, pc}
 8009440:	20000b6c 	.word	0x20000b6c

08009444 <_sbrk_r>:
 8009444:	b538      	push	{r3, r4, r5, lr}
 8009446:	4d06      	ldr	r5, [pc, #24]	@ (8009460 <_sbrk_r+0x1c>)
 8009448:	2300      	movs	r3, #0
 800944a:	4604      	mov	r4, r0
 800944c:	4608      	mov	r0, r1
 800944e:	602b      	str	r3, [r5, #0]
 8009450:	f7f9 f95e 	bl	8002710 <_sbrk>
 8009454:	1c43      	adds	r3, r0, #1
 8009456:	d102      	bne.n	800945e <_sbrk_r+0x1a>
 8009458:	682b      	ldr	r3, [r5, #0]
 800945a:	b103      	cbz	r3, 800945e <_sbrk_r+0x1a>
 800945c:	6023      	str	r3, [r4, #0]
 800945e:	bd38      	pop	{r3, r4, r5, pc}
 8009460:	20000b6c 	.word	0x20000b6c

08009464 <memcpy>:
 8009464:	440a      	add	r2, r1
 8009466:	4291      	cmp	r1, r2
 8009468:	f100 33ff 	add.w	r3, r0, #4294967295
 800946c:	d100      	bne.n	8009470 <memcpy+0xc>
 800946e:	4770      	bx	lr
 8009470:	b510      	push	{r4, lr}
 8009472:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009476:	f803 4f01 	strb.w	r4, [r3, #1]!
 800947a:	4291      	cmp	r1, r2
 800947c:	d1f9      	bne.n	8009472 <memcpy+0xe>
 800947e:	bd10      	pop	{r4, pc}

08009480 <__assert_func>:
 8009480:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009482:	4614      	mov	r4, r2
 8009484:	461a      	mov	r2, r3
 8009486:	4b09      	ldr	r3, [pc, #36]	@ (80094ac <__assert_func+0x2c>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4605      	mov	r5, r0
 800948c:	68d8      	ldr	r0, [r3, #12]
 800948e:	b954      	cbnz	r4, 80094a6 <__assert_func+0x26>
 8009490:	4b07      	ldr	r3, [pc, #28]	@ (80094b0 <__assert_func+0x30>)
 8009492:	461c      	mov	r4, r3
 8009494:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009498:	9100      	str	r1, [sp, #0]
 800949a:	462b      	mov	r3, r5
 800949c:	4905      	ldr	r1, [pc, #20]	@ (80094b4 <__assert_func+0x34>)
 800949e:	f000 f86f 	bl	8009580 <fiprintf>
 80094a2:	f000 f87f 	bl	80095a4 <abort>
 80094a6:	4b04      	ldr	r3, [pc, #16]	@ (80094b8 <__assert_func+0x38>)
 80094a8:	e7f4      	b.n	8009494 <__assert_func+0x14>
 80094aa:	bf00      	nop
 80094ac:	2000001c 	.word	0x2000001c
 80094b0:	08009cb6 	.word	0x08009cb6
 80094b4:	08009c88 	.word	0x08009c88
 80094b8:	08009c7b 	.word	0x08009c7b

080094bc <_calloc_r>:
 80094bc:	b570      	push	{r4, r5, r6, lr}
 80094be:	fba1 5402 	umull	r5, r4, r1, r2
 80094c2:	b93c      	cbnz	r4, 80094d4 <_calloc_r+0x18>
 80094c4:	4629      	mov	r1, r5
 80094c6:	f7fe ffcb 	bl	8008460 <_malloc_r>
 80094ca:	4606      	mov	r6, r0
 80094cc:	b928      	cbnz	r0, 80094da <_calloc_r+0x1e>
 80094ce:	2600      	movs	r6, #0
 80094d0:	4630      	mov	r0, r6
 80094d2:	bd70      	pop	{r4, r5, r6, pc}
 80094d4:	220c      	movs	r2, #12
 80094d6:	6002      	str	r2, [r0, #0]
 80094d8:	e7f9      	b.n	80094ce <_calloc_r+0x12>
 80094da:	462a      	mov	r2, r5
 80094dc:	4621      	mov	r1, r4
 80094de:	f7fe f87d 	bl	80075dc <memset>
 80094e2:	e7f5      	b.n	80094d0 <_calloc_r+0x14>

080094e4 <__ascii_mbtowc>:
 80094e4:	b082      	sub	sp, #8
 80094e6:	b901      	cbnz	r1, 80094ea <__ascii_mbtowc+0x6>
 80094e8:	a901      	add	r1, sp, #4
 80094ea:	b142      	cbz	r2, 80094fe <__ascii_mbtowc+0x1a>
 80094ec:	b14b      	cbz	r3, 8009502 <__ascii_mbtowc+0x1e>
 80094ee:	7813      	ldrb	r3, [r2, #0]
 80094f0:	600b      	str	r3, [r1, #0]
 80094f2:	7812      	ldrb	r2, [r2, #0]
 80094f4:	1e10      	subs	r0, r2, #0
 80094f6:	bf18      	it	ne
 80094f8:	2001      	movne	r0, #1
 80094fa:	b002      	add	sp, #8
 80094fc:	4770      	bx	lr
 80094fe:	4610      	mov	r0, r2
 8009500:	e7fb      	b.n	80094fa <__ascii_mbtowc+0x16>
 8009502:	f06f 0001 	mvn.w	r0, #1
 8009506:	e7f8      	b.n	80094fa <__ascii_mbtowc+0x16>

08009508 <_realloc_r>:
 8009508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800950c:	4680      	mov	r8, r0
 800950e:	4615      	mov	r5, r2
 8009510:	460c      	mov	r4, r1
 8009512:	b921      	cbnz	r1, 800951e <_realloc_r+0x16>
 8009514:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009518:	4611      	mov	r1, r2
 800951a:	f7fe bfa1 	b.w	8008460 <_malloc_r>
 800951e:	b92a      	cbnz	r2, 800952c <_realloc_r+0x24>
 8009520:	f7fe ff2a 	bl	8008378 <_free_r>
 8009524:	2400      	movs	r4, #0
 8009526:	4620      	mov	r0, r4
 8009528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800952c:	f000 f841 	bl	80095b2 <_malloc_usable_size_r>
 8009530:	4285      	cmp	r5, r0
 8009532:	4606      	mov	r6, r0
 8009534:	d802      	bhi.n	800953c <_realloc_r+0x34>
 8009536:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800953a:	d8f4      	bhi.n	8009526 <_realloc_r+0x1e>
 800953c:	4629      	mov	r1, r5
 800953e:	4640      	mov	r0, r8
 8009540:	f7fe ff8e 	bl	8008460 <_malloc_r>
 8009544:	4607      	mov	r7, r0
 8009546:	2800      	cmp	r0, #0
 8009548:	d0ec      	beq.n	8009524 <_realloc_r+0x1c>
 800954a:	42b5      	cmp	r5, r6
 800954c:	462a      	mov	r2, r5
 800954e:	4621      	mov	r1, r4
 8009550:	bf28      	it	cs
 8009552:	4632      	movcs	r2, r6
 8009554:	f7ff ff86 	bl	8009464 <memcpy>
 8009558:	4621      	mov	r1, r4
 800955a:	4640      	mov	r0, r8
 800955c:	f7fe ff0c 	bl	8008378 <_free_r>
 8009560:	463c      	mov	r4, r7
 8009562:	e7e0      	b.n	8009526 <_realloc_r+0x1e>

08009564 <__ascii_wctomb>:
 8009564:	4603      	mov	r3, r0
 8009566:	4608      	mov	r0, r1
 8009568:	b141      	cbz	r1, 800957c <__ascii_wctomb+0x18>
 800956a:	2aff      	cmp	r2, #255	@ 0xff
 800956c:	d904      	bls.n	8009578 <__ascii_wctomb+0x14>
 800956e:	228a      	movs	r2, #138	@ 0x8a
 8009570:	601a      	str	r2, [r3, #0]
 8009572:	f04f 30ff 	mov.w	r0, #4294967295
 8009576:	4770      	bx	lr
 8009578:	700a      	strb	r2, [r1, #0]
 800957a:	2001      	movs	r0, #1
 800957c:	4770      	bx	lr
	...

08009580 <fiprintf>:
 8009580:	b40e      	push	{r1, r2, r3}
 8009582:	b503      	push	{r0, r1, lr}
 8009584:	4601      	mov	r1, r0
 8009586:	ab03      	add	r3, sp, #12
 8009588:	4805      	ldr	r0, [pc, #20]	@ (80095a0 <fiprintf+0x20>)
 800958a:	f853 2b04 	ldr.w	r2, [r3], #4
 800958e:	6800      	ldr	r0, [r0, #0]
 8009590:	9301      	str	r3, [sp, #4]
 8009592:	f7ff fcf5 	bl	8008f80 <_vfiprintf_r>
 8009596:	b002      	add	sp, #8
 8009598:	f85d eb04 	ldr.w	lr, [sp], #4
 800959c:	b003      	add	sp, #12
 800959e:	4770      	bx	lr
 80095a0:	2000001c 	.word	0x2000001c

080095a4 <abort>:
 80095a4:	b508      	push	{r3, lr}
 80095a6:	2006      	movs	r0, #6
 80095a8:	f000 f834 	bl	8009614 <raise>
 80095ac:	2001      	movs	r0, #1
 80095ae:	f7f9 f837 	bl	8002620 <_exit>

080095b2 <_malloc_usable_size_r>:
 80095b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095b6:	1f18      	subs	r0, r3, #4
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	bfbc      	itt	lt
 80095bc:	580b      	ldrlt	r3, [r1, r0]
 80095be:	18c0      	addlt	r0, r0, r3
 80095c0:	4770      	bx	lr

080095c2 <_raise_r>:
 80095c2:	291f      	cmp	r1, #31
 80095c4:	b538      	push	{r3, r4, r5, lr}
 80095c6:	4605      	mov	r5, r0
 80095c8:	460c      	mov	r4, r1
 80095ca:	d904      	bls.n	80095d6 <_raise_r+0x14>
 80095cc:	2316      	movs	r3, #22
 80095ce:	6003      	str	r3, [r0, #0]
 80095d0:	f04f 30ff 	mov.w	r0, #4294967295
 80095d4:	bd38      	pop	{r3, r4, r5, pc}
 80095d6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80095d8:	b112      	cbz	r2, 80095e0 <_raise_r+0x1e>
 80095da:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80095de:	b94b      	cbnz	r3, 80095f4 <_raise_r+0x32>
 80095e0:	4628      	mov	r0, r5
 80095e2:	f000 f831 	bl	8009648 <_getpid_r>
 80095e6:	4622      	mov	r2, r4
 80095e8:	4601      	mov	r1, r0
 80095ea:	4628      	mov	r0, r5
 80095ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095f0:	f000 b818 	b.w	8009624 <_kill_r>
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d00a      	beq.n	800960e <_raise_r+0x4c>
 80095f8:	1c59      	adds	r1, r3, #1
 80095fa:	d103      	bne.n	8009604 <_raise_r+0x42>
 80095fc:	2316      	movs	r3, #22
 80095fe:	6003      	str	r3, [r0, #0]
 8009600:	2001      	movs	r0, #1
 8009602:	e7e7      	b.n	80095d4 <_raise_r+0x12>
 8009604:	2100      	movs	r1, #0
 8009606:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800960a:	4620      	mov	r0, r4
 800960c:	4798      	blx	r3
 800960e:	2000      	movs	r0, #0
 8009610:	e7e0      	b.n	80095d4 <_raise_r+0x12>
	...

08009614 <raise>:
 8009614:	4b02      	ldr	r3, [pc, #8]	@ (8009620 <raise+0xc>)
 8009616:	4601      	mov	r1, r0
 8009618:	6818      	ldr	r0, [r3, #0]
 800961a:	f7ff bfd2 	b.w	80095c2 <_raise_r>
 800961e:	bf00      	nop
 8009620:	2000001c 	.word	0x2000001c

08009624 <_kill_r>:
 8009624:	b538      	push	{r3, r4, r5, lr}
 8009626:	4d07      	ldr	r5, [pc, #28]	@ (8009644 <_kill_r+0x20>)
 8009628:	2300      	movs	r3, #0
 800962a:	4604      	mov	r4, r0
 800962c:	4608      	mov	r0, r1
 800962e:	4611      	mov	r1, r2
 8009630:	602b      	str	r3, [r5, #0]
 8009632:	f7f8 ffe5 	bl	8002600 <_kill>
 8009636:	1c43      	adds	r3, r0, #1
 8009638:	d102      	bne.n	8009640 <_kill_r+0x1c>
 800963a:	682b      	ldr	r3, [r5, #0]
 800963c:	b103      	cbz	r3, 8009640 <_kill_r+0x1c>
 800963e:	6023      	str	r3, [r4, #0]
 8009640:	bd38      	pop	{r3, r4, r5, pc}
 8009642:	bf00      	nop
 8009644:	20000b6c 	.word	0x20000b6c

08009648 <_getpid_r>:
 8009648:	f7f8 bfd2 	b.w	80025f0 <_getpid>

0800964c <_init>:
 800964c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800964e:	bf00      	nop
 8009650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009652:	bc08      	pop	{r3}
 8009654:	469e      	mov	lr, r3
 8009656:	4770      	bx	lr

08009658 <_fini>:
 8009658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800965a:	bf00      	nop
 800965c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800965e:	bc08      	pop	{r3}
 8009660:	469e      	mov	lr, r3
 8009662:	4770      	bx	lr
